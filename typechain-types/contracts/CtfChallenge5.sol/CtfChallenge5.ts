/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CtfChallenge5Interface extends Interface {
  getFunction(
    nameOrSignature: "TARGET" | "callCount" | "challenge" | "startClaim"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "fallbackCalled" | "recieveCalled"
  ): EventFragment;

  encodeFunctionData(functionFragment: "TARGET", values?: undefined): string;
  encodeFunctionData(functionFragment: "callCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "challenge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startClaim",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "TARGET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startClaim", data: BytesLike): Result;
}

export namespace fallbackCalledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace recieveCalledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CtfChallenge5 extends BaseContract {
  connect(runner?: ContractRunner | null): CtfChallenge5;
  waitForDeployment(): Promise<this>;

  interface: CtfChallenge5Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  TARGET: TypedContractMethod<[], [bigint], "view">;

  callCount: TypedContractMethod<[], [bigint], "view">;

  challenge: TypedContractMethod<[], [string], "view">;

  startClaim: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "TARGET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "callCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "challenge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "startClaim"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "fallbackCalled"
  ): TypedContractEvent<
    fallbackCalledEvent.InputTuple,
    fallbackCalledEvent.OutputTuple,
    fallbackCalledEvent.OutputObject
  >;
  getEvent(
    key: "recieveCalled"
  ): TypedContractEvent<
    recieveCalledEvent.InputTuple,
    recieveCalledEvent.OutputTuple,
    recieveCalledEvent.OutputObject
  >;

  filters: {
    "fallbackCalled()": TypedContractEvent<
      fallbackCalledEvent.InputTuple,
      fallbackCalledEvent.OutputTuple,
      fallbackCalledEvent.OutputObject
    >;
    fallbackCalled: TypedContractEvent<
      fallbackCalledEvent.InputTuple,
      fallbackCalledEvent.OutputTuple,
      fallbackCalledEvent.OutputObject
    >;

    "recieveCalled()": TypedContractEvent<
      recieveCalledEvent.InputTuple,
      recieveCalledEvent.OutputTuple,
      recieveCalledEvent.OutputObject
    >;
    recieveCalled: TypedContractEvent<
      recieveCalledEvent.InputTuple,
      recieveCalledEvent.OutputTuple,
      recieveCalledEvent.OutputObject
    >;
  };
}
