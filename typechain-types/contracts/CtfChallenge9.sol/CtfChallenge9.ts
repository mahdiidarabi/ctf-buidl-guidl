/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CtfChallenge9Interface extends Interface {
  getFunction(
    nameOrSignature: "count" | "generateNewPassword" | "password"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "newPasswordGenerated"): EventFragment;

  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "generateNewPassword",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "password", values?: undefined): string;

  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateNewPassword",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "password", data: BytesLike): Result;
}

export namespace newPasswordGeneratedEvent {
  export type InputTuple = [password: BytesLike];
  export type OutputTuple = [password: string];
  export interface OutputObject {
    password: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CtfChallenge9 extends BaseContract {
  connect(runner?: ContractRunner | null): CtfChallenge9;
  waitForDeployment(): Promise<this>;

  interface: CtfChallenge9Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  count: TypedContractMethod<[], [bigint], "view">;

  generateNewPassword: TypedContractMethod<[], [void], "nonpayable">;

  password: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "generateNewPassword"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "password"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "newPasswordGenerated"
  ): TypedContractEvent<
    newPasswordGeneratedEvent.InputTuple,
    newPasswordGeneratedEvent.OutputTuple,
    newPasswordGeneratedEvent.OutputObject
  >;

  filters: {
    "newPasswordGenerated(bytes32)": TypedContractEvent<
      newPasswordGeneratedEvent.InputTuple,
      newPasswordGeneratedEvent.OutputTuple,
      newPasswordGeneratedEvent.OutputObject
    >;
    newPasswordGenerated: TypedContractEvent<
      newPasswordGeneratedEvent.InputTuple,
      newPasswordGeneratedEvent.OutputTuple,
      newPasswordGeneratedEvent.OutputObject
    >;
  };
}
