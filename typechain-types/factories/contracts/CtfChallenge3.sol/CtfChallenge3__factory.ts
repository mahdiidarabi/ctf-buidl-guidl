/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  CtfChallenge3,
  CtfChallenge3Interface,
} from "../../../contracts/CtfChallenge3.sol/CtfChallenge3";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610175380380610175833981810160405281019061003291906100fb565b8073ffffffffffffffffffffffffffffffffffffffff1663e00d023f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561007a57600080fd5b505af115801561008e573d6000803e3d6000fd5b5050505050610128565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100c88261009d565b9050919050565b6100d8816100bd565b81146100e357600080fd5b50565b6000815190506100f5816100cf565b92915050565b60006020828403121561011157610110610098565b5b600061011f848285016100e6565b91505092915050565b603f806101366000396000f3fe6080604052600080fdfea264697066735822122023a986d62e8a03e3ff6e6d7731e2599fa7523ac2270cb93a100cd9aeec7dd70464736f6c634300081c0033";

type CtfChallenge3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CtfChallenge3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CtfChallenge3__factory extends ContractFactory {
  constructor(...args: CtfChallenge3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    target: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(target, overrides || {});
  }
  override deploy(
    target: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(target, overrides || {}) as Promise<
      CtfChallenge3 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CtfChallenge3__factory {
    return super.connect(runner) as CtfChallenge3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CtfChallenge3Interface {
    return new Interface(_abi) as CtfChallenge3Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CtfChallenge3 {
    return new Contract(address, _abi, runner) as unknown as CtfChallenge3;
  }
}
