/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  CtfChallenge2,
  CtfChallenge2Interface,
} from "../../../contracts/CtfChallenge2.sol/CtfChallenge2";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "indirectCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506101758061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636ee6199f14610030575b600080fd5b61004a60048036038101906100459190610112565b61004c565b005b8073ffffffffffffffffffffffffffffffffffffffff166382cb05c66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561009457600080fd5b505af11580156100a8573d6000803e3d6000fd5b5050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100df826100b4565b9050919050565b6100ef816100d4565b81146100fa57600080fd5b50565b60008135905061010c816100e6565b92915050565b600060208284031215610128576101276100af565b5b6000610136848285016100fd565b9150509291505056fea26469706673582212202361183df103df38f4aff029db74028f840b13ba2a6a0f4a5cca17f91d5b04c964736f6c634300081c0033";

type CtfChallenge2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CtfChallenge2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CtfChallenge2__factory extends ContractFactory {
  constructor(...args: CtfChallenge2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CtfChallenge2 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CtfChallenge2__factory {
    return super.connect(runner) as CtfChallenge2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CtfChallenge2Interface {
    return new Interface(_abi) as CtfChallenge2Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CtfChallenge2 {
    return new Contract(address, _abi, runner) as unknown as CtfChallenge2;
  }
}
